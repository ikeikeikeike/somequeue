!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
API	deps/ecto/lib/ecto/query/api.ex	/^defmodule Ecto.Query.API do$/;"	m
ActionClauseError	deps/phoenix/lib/phoenix/exceptions.ex	/^defmodule Phoenix.ActionClauseError do$/;"	m
Adapter	deps/ecto/lib/ecto/adapter.ex	/^defmodule Ecto.Adapter do$/;"	m
Adapter	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^defmodule Phoenix.Endpoint.Adapter do$/;"	m
Adapter	deps/plug/lib/plug/conn/adapter.ex	/^defmodule Plug.Conn.Adapter do$/;"	m
AddColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AddColumnMigration do$/;"	m
AlreadySentError	deps/plug/lib/plug/conn.ex	/^  defmodule AlreadySentError do$/;"	m
AlterColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterColumnMigration do$/;"	m
AlterForeignKeyMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterForeignKeyMigration do$/;"	m
Api	deps/exq/lib/exq/api.ex	/^defmodule Exq.Api do$/;"	m
ApiTest	deps/exq/test/ui_test.exs	/^defmodule Exq.ApiTest do$/;"	m
App	deps/tzdata/lib/tzdata/tzdata_app.ex	/^defmodule Tzdata.App do$/;"	m
AppRouter	deps/plug/lib/plug/error_handler.ex	/^      defmodule AppRouter do$/;"	m
AppRouter	deps/plug/lib/plug/router.ex	/^      defmodule AppRouter do$/;"	m
Assoc	deps/ecto/lib/ecto/repo/assoc.ex	/^defmodule Ecto.Repo.Assoc do$/;"	m
Association	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association do$/;"	m
Autogenerate	deps/ecto/lib/ecto/model/autogenerate.ex	/^defmodule Ecto.Model.Autogenerate do$/;"	m
BadEncodingError	deps/plug/lib/plug/parsers.ex	/^  defmodule BadEncodingError do$/;"	m
BadMigration	deps/ecto/integration_test/cases/migrator.exs	/^  defmodule BadMigration do$/;"	m
Barebone	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Barebone do$/;"	m
Base	deps/combine/lib/combine/parsers/base.ex	/^defmodule Combine.Parsers.Base do$/;"	m
BasicDataMap	deps/tzdata/lib/tzdata/basic_data_map.ex	/^defmodule Tzdata.BasicDataMap do$/;"	m
BelongsTo	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.BelongsTo do$/;"	m
Binary	deps/combine/lib/combine/parsers/binary.ex	/^defmodule Combine.Parsers.Binary do$/;"	m
Binary	deps/exq/lib/exq/support/binary.ex	/^defmodule Exq.Support.Binary do$/;"	m
Binary	deps/postgrex/lib/postgrex/extensions/binary.ex	/^defmodule Postgrex.Extensions.Binary do$/;"	m
BinaryUtils	deps/postgrex/lib/postgrex/binary_utils.ex	/^defmodule Postgrex.BinaryUtils do$/;"	m
Broadcast	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Broadcast do$/;"	m
BroadcastError	deps/phoenix/lib/phoenix/pubsub.ex	/^  defmodule BroadcastError do$/;"	m
Builder	deps/ecto/lib/ecto/query/builder.ex	/^defmodule Ecto.Query.Builder do$/;"	m
Builder	deps/plug/lib/plug/builder.ex	/^defmodule Plug.Builder do$/;"	m
COOKIE	deps/plug/lib/plug/session/cookie.ex	/^defmodule Plug.Session.COOKIE do$/;"	m
CSRFProtection	deps/plug/lib/plug/csrf_protection.ex	/^defmodule Plug.CSRFProtection do$/;"	m
Callbacks	deps/ecto/lib/ecto/model/callbacks.ex	/^defmodule Ecto.Model.Callbacks do$/;"	m
CastError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.CastError do$/;"	m
ChangeError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.ChangeError do$/;"	m
Changeset	deps/ecto/lib/ecto/changeset.ex	/^defmodule Ecto.Changeset do$/;"	m
Channel	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Channel do$/;"	m
Channel	deps/phoenix/lib/phoenix/channel.ex	/^defmodule Phoenix.Channel do$/;"	m
Channel	deps/phoenix_live_reload/lib/phoenix_live_reload/channel.ex	/^defmodule Phoenix.LiveReload.Channel do$/;"	m
ChannelCase	test/support/channel_case.ex	/^defmodule Exqueue.ChannelCase do$/;"	m
ChannelTest	deps/phoenix/lib/phoenix/test/channel_test.ex	/^defmodule Phoenix.ChannelTest do$/;"	m
Chars	deps/decimal/lib/decimal.ex	/^defimpl String.Chars, for: Decimal do$/;"	i
Chars	deps/ecto/lib/ecto/datetime.ex	/^defimpl String.Chars, for: [Ecto.DateTime, Ecto.Date, Ecto.Time] do$/;"	i
CoDel	deps/ecto/lib/ecto/pools/sojourn_broker/codel.ex	/^defmodule Ecto.Pools.SojournBroker.CoDel do$/;"	m
CodeReloader	deps/phoenix/lib/phoenix/code_reloader.ex	/^defmodule Phoenix.CodeReloader do$/;"	m
Collectable	deps/plug/lib/plug/conn.ex	/^defimpl Collectable, for: Plug.Conn do$/;"	i
Combine	deps/combine/lib/combine.ex	/^defmodule Combine do$/;"	m
Comment	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Comment do$/;"	m
Comment	deps/ecto/lib/ecto.ex	/^      defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/changeset.ex	/^                defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/schema.ex	/^      defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/schema.ex	/^      defmodule MyApp.Comment do$/;"	m
CompileError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.Query.CompileError do$/;"	m
Config	deps/exq/lib/exq/support/config.ex	/^defmodule Exq.Support.Config do$/;"	m
Config	deps/phoenix/lib/phoenix/config.ex	/^defmodule Phoenix.Config do$/;"	m
ConfigTest	deps/exq/test/config_test.exs	/^defmodule Exq.ConfigTest do$/;"	m
Conn	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^defmodule Plug.Adapters.Cowboy.Conn do$/;"	m
Conn	deps/plug/lib/plug/adapters/test/conn.ex	/^defmodule Plug.Adapters.Test.Conn do$/;"	m
Conn	deps/plug/lib/plug/conn.ex	/^defmodule Plug.Conn do$/;"	m
ConnCase	test/support/conn_case.ex	/^defmodule Exqueue.ConnCase do$/;"	m
ConnTest	deps/phoenix/lib/phoenix/test/conn_test.ex	/^defmodule Phoenix.ConnTest do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/connection.ex	/^defmodule Ecto.Adapters.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^  defmodule Ecto.Adapters.MySQL.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^  defmodule Ecto.Adapters.Postgres.Connection do$/;"	m
Connection	deps/exq/lib/exq/redis/connection.ex	/^defmodule Exq.Redis.Connection do$/;"	m
Connection	deps/postgrex/lib/postgrex/connection.ex	/^defmodule Postgrex.Connection do$/;"	m
ConsoleFormatter	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^defmodule Phoenix.Router.ConsoleFormatter do$/;"	m
ConstraintError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.ConstraintError do$/;"	m
Context	deps/decimal/lib/decimal.ex	/^  defmodule Context do$/;"	m
Controller	deps/phoenix/lib/phoenix/controller.ex	/^defmodule Phoenix.Controller do$/;"	m
Convert	deps/timex/lib/date/date_convert.ex	/^defimpl Timex.Date.Convert, for: Timex.DateTime do$/;"	i
Convert	deps/timex/lib/date/date_convert.ex	/^defprotocol Timex.Date.Convert do$/;"	p
Cookies	deps/plug/lib/plug/conn/cookies.ex	/^defmodule Plug.Conn.Cookies do$/;"	m
Cowboy	deps/plug/lib/plug/adapters/cowboy.ex	/^defmodule Plug.Adapters.Cowboy do$/;"	m
CowboyHandler	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^defmodule Phoenix.Endpoint.CowboyHandler do$/;"	m
CowboyWebSocket	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^defmodule Phoenix.Endpoint.CowboyWebSocket do$/;"	m
Create	deps/ecto/lib/mix/tasks/ecto.create.ex	/^defmodule Mix.Tasks.Ecto.Create do$/;"	m
CreateIndexes	deps/ecto/lib/ecto/migration.ex	/^      defmodule MyRepo.Migrations.CreateIndexes do$/;"	m
CreateMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule CreateMigration do$/;"	m
CreatePosts	deps/ecto/lib/ecto/migration.ex	/^      defmodule MyRepo.Migrations.CreatePosts do$/;"	m
Crypto	deps/plug/lib/plug/crypto.ex	/^defmodule Plug.Crypto do$/;"	m
Custom	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Custom do$/;"	m
CustomMethodWorker	deps/exq/test/exq_test.exs	/^  defmodule CustomMethodWorker do$/;"	m
CustomMethodWorker	deps/exq/test/worker_test.exs	/^  defmodule CustomMethodWorker do$/;"	m
DataBuilder	deps/tzdata/lib/tzdata/data_builder.ex	/^defmodule Tzdata.DataBuilder do$/;"	m
DataLoader	deps/tzdata/lib/tzdata/data_loader.ex	/^defmodule Tzdata.DataLoader do$/;"	m
Database	deps/timex/lib/timezone/database.ex	/^defmodule Timex.Timezone.Database do$/;"	m
Date	deps/ecto/lib/ecto/datetime.ex	/^defmodule Ecto.Date do$/;"	m
Date	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Date do$/;"	m
Date	deps/timex/lib/date/date.ex	/^defmodule Timex.Date do$/;"	m
DateFormat	deps/timex/lib/date/date_format.ex	/^defmodule Timex.DateFormat do$/;"	m
DateTime	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^  defmodule Ecto.Adapters.Postgres.DateTime do$/;"	m
DateTime	deps/ecto/lib/ecto/datetime.ex	/^defmodule Ecto.DateTime do$/;"	m
DateTime	deps/timex/lib/date/datetime.ex	/^defmodule Timex.DateTime do$/;"	m
Debugger	deps/plug/lib/plug/debugger.ex	/^defmodule Plug.Debugger do$/;"	m
Decimal	deps/decimal/lib/decimal.ex	/^defmodule Decimal do$/;"	m
Decode	deps/poison/lib/poison/decoder.ex	/^defmodule Poison.Decode do$/;"	m
Decoder	deps/poison/lib/poison/decoder.ex	/^defimpl Poison.Decoder, for: Any do$/;"	i
Decoder	deps/poison/lib/poison/decoder.ex	/^defprotocol Poison.Decoder do$/;"	p
Default	deps/timex/lib/format/datetime/formatters/default.ex	/^defmodule Timex.Format.DateTime.Formatters.Default do$/;"	m
Default	deps/timex/lib/format/time/formatters/default.ex	/^defmodule Timex.Format.Time.Formatters.Default do$/;"	m
Default	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Default do$/;"	m
Dependent	deps/ecto/lib/ecto/model/dependent.ex	/^defmodule Ecto.Model.Dependent do$/;"	m
Digest	deps/phoenix/lib/mix/tasks/phoenix.digest.ex	/^defmodule Mix.Tasks.Phoenix.Digest do$/;"	m
Digester	deps/phoenix/lib/phoenix/digester.ex	/^defmodule Phoenix.Digester do$/;"	m
Directive	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Directive do$/;"	m
Distinct	deps/ecto/lib/ecto/query/builder/distinct.ex	/^defmodule Ecto.Query.Builder.Distinct do$/;"	m
Drop	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^defmodule Mix.Tasks.Ecto.Drop do$/;"	m
DropColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule DropColumnMigration do$/;"	m
EExEngine	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^defmodule Phoenix.Template.EExEngine do$/;"	m
ETS	deps/plug/lib/plug/session/ets.ex	/^defmodule Plug.Session.ETS do$/;"	m
EchoJob	web/jobs/echo_job.ex	/^defmodule EchoJob do$/;"	m
Ecto	deps/ecto/lib/ecto.ex	/^defmodule Ecto do$/;"	m
Ecto	deps/ecto/lib/mix/ecto.ex	/^defmodule Mix.Ecto do$/;"	m
Ecto	deps/phoenix_ecto/lib/phoenix_ecto.ex	/^defmodule Phoenix.Ecto do$/;"	m
Embedded	deps/ecto/lib/ecto/embedded.ex	/^defmodule Ecto.Embedded do$/;"	m
Encode	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Encode do$/;"	m
EncodeError	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.EncodeError do$/;"	m
Encoder	deps/ecto/lib/ecto/poison.ex	/^  defimpl Poison.Encoder, for: Decimal do$/;"	i
Encoder	deps/ecto/lib/ecto/poison.ex	/^  defimpl Poison.Encoder, for: [Ecto.Date, Ecto.Time, Ecto.DateTime] do$/;"	i
Encoder	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^  defimpl Poison.Encoder, for: Ecto.Association.NotLoaded do$/;"	i
Encoder	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^  defimpl Poison.Encoder, for: Ecto.Changeset do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^      defimpl Poison.Encoder, for: unquote(module) do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Any do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Atom do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: BitString do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Float do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: HashDict do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Integer do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: List do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Map do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: [Range, Stream, HashSet] do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defprotocol Poison.Encoder do$/;"	p
Endpoint	deps/phoenix/lib/phoenix/endpoint.ex	/^      defmodule YourApp.Endpoint do$/;"	m
Endpoint	deps/phoenix/lib/phoenix/endpoint.ex	/^defmodule Phoenix.Endpoint do$/;"	m
Endpoint	lib/exqueue/endpoint.ex	/^defmodule Exqueue.Endpoint do$/;"	m
Engine	deps/phoenix/lib/phoenix/template/engine.ex	/^defmodule Phoenix.Template.Engine do$/;"	m
Engine	deps/phoenix_html/lib/phoenix_html/engine.ex	/^defmodule Phoenix.HTML.Engine do$/;"	m
Enqueuer	deps/exq/lib/exq/enqueuer.ex	/^defmodule Exq.Enqueuer do$/;"	m
Error	deps/decimal/lib/decimal.ex	/^  defmodule Error do$/;"	m
Error	deps/postgrex/lib/postgrex/error.ex	/^defmodule Postgrex.Error do$/;"	m
ErrorCode	deps/postgrex/lib/postgrex/error_code.ex	/^defmodule Postgrex.ErrorCode do$/;"	m
ErrorHandler	deps/plug/lib/plug/error_handler.ex	/^defmodule Plug.ErrorHandler do$/;"	m
ErrorView	web/views/error_view.ex	/^defmodule Exqueue.ErrorView do$/;"	m
ErrorViewTest	test/views/error_view_test.exs	/^defmodule Exqueue.ErrorViewTest do$/;"	m
EscapeTest	deps/ecto/integration_test/sql/escape.exs	/^defmodule Ecto.Integration.EscapeTest do$/;"	m
EtsHolder	deps/tzdata/lib/tzdata/ets_holder.ex	/^defmodule Tzdata.EtsHolder do$/;"	m
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.CastError do$/;"	i
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.NoResultsError do$/;"	i
Exception	deps/plug/lib/plug/exceptions.ex	/^defimpl Plug.Exception, for: Any do$/;"	i
Exception	deps/plug/lib/plug/exceptions.ex	/^defprotocol Plug.Exception do$/;"	p
Exq	deps/exq/lib/exq.ex	/^defmodule Exq do$/;"	m
ExqTest	deps/exq/test/exq_test.exs	/^defmodule ExqTest do$/;"	m
ExqTestUtil	deps/exq/test/test_helper.exs	/^defmodule ExqTestUtil do$/;"	m
Exqueue	lib/exqueue.ex	/^defmodule Exqueue do$/;"	m
ExsEngine	deps/phoenix/lib/phoenix/template/exs_engine.ex	/^defmodule Phoenix.Template.ExsEngine do$/;"	m
Extension	deps/postgrex/lib/postgrex/extension.ex	/^defmodule Postgrex.Extension do$/;"	m
FailWorker	deps/exq/test/exq_test.exs	/^  defmodule FailWorker do$/;"	m
FarFutureDynamicPeriods	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^defmodule Tzdata.FarFutureDynamicPeriods do$/;"	m
FileHelpers	deps/ecto/integration_test/support/file_helpers.exs	/^defmodule Support.FileHelpers do$/;"	m
Filter	deps/ecto/lib/ecto/query/builder/filter.ex	/^defmodule Ecto.Query.Builder.Filter do$/;"	m
Form	deps/phoenix_html/lib/phoenix_html/form.ex	/^defmodule Phoenix.HTML.Form do$/;"	m
FormData	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^  defimpl Phoenix.HTML.FormData, for: Ecto.Changeset do$/;"	i
FormData	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^defimpl Phoenix.HTML.FormData, for: Plug.Conn do$/;"	i
FormData	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^defprotocol Phoenix.HTML.FormData do$/;"	p
FormatError	deps/timex/lib/format/format_error.ex	/^defmodule Timex.Format.FormatError do$/;"	m
Formatter	deps/timex/lib/format/datetime/formatter.ex	/^defmodule Timex.Format.DateTime.Formatter do$/;"	m
Formatter	deps/timex/lib/format/time/formatter.ex	/^defmodule Timex.Format.Time.Formatter do$/;"	m
From	deps/ecto/lib/ecto/query/builder/from.ex	/^defmodule Ecto.Query.Builder.From do$/;"	m
GoodMigration	deps/ecto/integration_test/cases/migrator.exs	/^  defmodule GoodMigration do$/;"	m
GroupBy	deps/ecto/lib/ecto/query/builder/group_by.ex	/^defmodule Ecto.Query.Builder.GroupBy do$/;"	m
HTML	deps/phoenix/lib/phoenix/template/html.ex	/^defmodule Phoenix.Template.HTML do$/;"	m
HTML	deps/phoenix_html/lib/phoenix_html.ex	/^defmodule Phoenix.HTML do$/;"	m
HTML	deps/plug/lib/plug/html.ex	/^defmodule Plug.HTML do$/;"	m
Handler	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^defmodule Plug.Adapters.Cowboy.Handler do$/;"	m
Has	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.Has do$/;"	m
HasThrough	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.HasThrough do$/;"	m
Head	deps/plug/lib/plug/head.ex	/^defmodule Plug.Head do$/;"	m
Header	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule Header do$/;"	m
Helpers	deps/combine/lib/combine/helpers.ex	/^defmodule Combine.Helpers do$/;"	m
Helpers	deps/phoenix/lib/phoenix/router/helpers.ex	/^defmodule Phoenix.Router.Helpers do$/;"	m
Helpers	deps/timex/lib/parse/datetime/helpers.ex	/^defmodule Timex.Parse.DateTime.Helpers do$/;"	m
Html	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Html do$/;"	m
Humanized	deps/timex/lib/format/time/formatters/humanized.ex	/^defmodule Timex.Format.Time.Formatters.Humanized do$/;"	m
ID	deps/ecto/integration_test/cases/repo.exs	/^    defmodule ID do$/;"	m
Index	deps/ecto/lib/ecto/migration.ex	/^  defmodule Index do$/;"	m
Inspect	deps/decimal/lib/decimal.ex	/^defimpl Inspect, for: Decimal do$/;"	i
Inspect	deps/ecto/lib/ecto/association.ex	/^  defimpl Inspect do$/;"	i
Inspect	deps/ecto/lib/ecto/datetime.ex	/^defimpl Inspect, for: [Ecto.DateTime, Ecto.Date, Ecto.Time] do$/;"	i
Inspect	deps/ecto/lib/ecto/query/inspect.ex	/^defimpl Inspect, for: Ecto.Query do$/;"	i
Inspect	deps/ecto/lib/ecto/schema.ex	/^    defimpl Inspect do$/;"	i
Inspect	deps/plug/lib/plug/conn.ex	/^defimpl Inspect, for: Plug.Conn do$/;"	i
Interval	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Interval do$/;"	m
IntervalTest	deps/ecto/integration_test/cases/interval.exs	/^defmodule Ecto.Integration.IntervalTest do$/;"	m
InvalidCSRFTokenError	deps/plug/lib/plug/csrf_protection.ex	/^  defmodule InvalidCSRFTokenError do$/;"	m
InvalidChangesetError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.InvalidChangesetError do$/;"	m
InvalidCrossOriginRequestError	deps/plug/lib/plug/csrf_protection.ex	/^  defmodule InvalidCrossOriginRequestError do$/;"	m
InvalidHeaderKeyFormatError	deps/plug/lib/plug/conn.ex	/^  defmodule InvalidHeaderKeyFormatError do$/;"	m
InvalidMessageError	deps/phoenix/lib/phoenix/socket.ex	/^  defmodule InvalidMessageError do$/;"	m
InvalidPathError	deps/plug/lib/plug/static.ex	/^  defmodule InvalidPathError do$/;"	m
InvalidSpecError	deps/plug/lib/plug/router/utils.ex	/^defmodule Plug.Router.InvalidSpecError do$/;"	m
InvalidURLError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.InvalidURLError do$/;"	m
Item	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Item do$/;"	m
Item	deps/ecto/lib/ecto/schema.ex	/^      defmodule Item do$/;"	m
JSON	deps/plug/lib/plug/parsers/json.ex	/^defmodule Plug.Parsers.JSON do$/;"	m
JSON	deps/postgrex/lib/postgrex/extensions/json.ex	/^defmodule Postgrex.Extensions.JSON do$/;"	m
JSONHeaderPlug	deps/plug/lib/plug.ex	/^      defmodule JSONHeaderPlug do$/;"	m
Job	deps/exq/lib/exq/support/job.ex	/^defmodule Exq.Support.Job do$/;"	m
JobQueue	deps/exq/lib/exq/redis/job_queue.ex	/^defmodule Exq.Redis.JobQueue do$/;"	m
JobQueueTest	deps/exq/test/job_queue_test.exs	/^defmodule JobQueueTest do$/;"	m
Join	deps/ecto/lib/ecto/query/builder/join.ex	/^defmodule Ecto.Query.Builder.Join do$/;"	m
JoinExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule JoinExpr do$/;"	m
JoinsTest	deps/ecto/integration_test/cases/joins.exs	/^defmodule Ecto.Integration.JoinsTest do$/;"	m
Json	deps/exq/lib/exq/support/json.ex	/^defmodule Exq.Support.Json do$/;"	m
Json	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Json do$/;"	m
JsonApi	deps/exq/web/json_api.ex	/^defmodule JsonApi do$/;"	m
KeyGenerator	deps/plug/lib/plug/crypto/key_generator.ex	/^defmodule Plug.Crypto.KeyGenerator do$/;"	m
LayoutView	web/views/layout_view.ex	/^defmodule Exqueue.LayoutView do$/;"	m
LayoutViewTest	test/views/layout_view_test.exs	/^defmodule Exqueue.LayoutViewTest do$/;"	m
LeapSecParser	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^defmodule Tzdata.LeapSecParser do$/;"	m
LeapSecond	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule LeapSecond do$/;"	m
LimitOffset	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^defmodule Ecto.Query.Builder.LimitOffset do$/;"	m
Link	deps/phoenix_html/lib/phoenix_html/link.ex	/^defmodule Phoenix.HTML.Link do$/;"	m
LiveReloader	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^defmodule Phoenix.LiveReloader do$/;"	m
Local	deps/phoenix/lib/phoenix/pubsub/local.ex	/^defmodule Phoenix.PubSub.Local do$/;"	m
Local	deps/timex/lib/timezone/timezone_local.ex	/^defmodule Timex.Timezone.Local do$/;"	m
Lock	deps/ecto/lib/ecto/query/builder/lock.ex	/^defmodule Ecto.Query.Builder.Lock do$/;"	m
LockCounter	deps/ecto/integration_test/sql/lock.exs	/^  defmodule LockCounter do$/;"	m
LockTest	deps/ecto/integration_test/sql/lock.exs	/^defmodule Ecto.Integration.LockTest do$/;"	m
LogEntry	deps/ecto/lib/ecto/log_entry.ex	/^defmodule Ecto.LogEntry do$/;"	m
Logger	deps/phoenix/lib/phoenix/controller/logger.ex	/^defmodule Phoenix.Controller.Logger do$/;"	m
Logger	deps/plug/lib/plug/logger.ex	/^defmodule Plug.Logger do$/;"	m
LongPoll	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^defmodule Phoenix.Transports.LongPoll do$/;"	m
LongPollSerializer	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^defmodule Phoenix.Transports.LongPollSerializer do$/;"	m
LongWorker	deps/exq/web/workers/longworker.ex	/^defmodule LongWorker do$/;"	m
MIME	deps/plug/lib/plug/mime.ex	/^defmodule Plug.MIME do$/;"	m
MULTIPART	deps/plug/lib/plug/parsers/multipart.ex	/^defmodule Plug.Parsers.MULTIPART do$/;"	m
Message	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Message do$/;"	m
MessageEncryptor	deps/plug/lib/plug/crypto/message_encryptor.ex	/^defmodule Plug.Crypto.MessageEncryptor do$/;"	m
MessageVerifier	deps/plug/lib/plug/crypto/message_verifier.ex	/^defmodule Plug.Crypto.MessageVerifier do$/;"	m
Messages	deps/postgrex/lib/postgrex/messages.ex	/^defmodule Postgrex.Messages do$/;"	m
Metadata	deps/ecto/lib/ecto/schema.ex	/^  defmodule Metadata do$/;"	m
MethodOverride	deps/plug/lib/plug/method_override.ex	/^defmodule Plug.MethodOverride do$/;"	m
Migrate	deps/ecto/lib/mix/tasks/ecto.migrate.ex	/^defmodule Mix.Tasks.Ecto.Migrate do$/;"	m
Migration	deps/ecto/integration_test/support/migration.exs	/^defmodule Ecto.Integration.Migration do$/;"	m
Migration	deps/ecto/lib/ecto/adapter/migration.ex	/^defmodule Ecto.Adapter.Migration  do$/;"	m
Migration	deps/ecto/lib/ecto/migration.ex	/^defmodule Ecto.Migration do$/;"	m
Migration	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^defmodule Mix.Tasks.Ecto.Gen.Migration do$/;"	m
MigrationError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.MigrationError do$/;"	m
MigrationExample	deps/ecto/lib/ecto/migrator.ex	/^      defmodule MyApp.MigrationExample do$/;"	m
MigrationTest	deps/ecto/integration_test/sql/migration.exs	/^defmodule Ecto.Integration.MigrationTest do$/;"	m
Migrator	deps/ecto/lib/ecto/migrator.ex	/^defmodule Ecto.Migrator do$/;"	m
MigratorTest	deps/ecto/integration_test/cases/migrator.exs	/^defmodule Ecto.Integration.MigratorTest do$/;"	m
MissingMethodWorker	deps/exq/test/exq_test.exs	/^  defmodule MissingMethodWorker do$/;"	m
MissingMethodWorker	deps/exq/test/worker_test.exs	/^  defmodule MissingMethodWorker do$/;"	m
MissingParamError	deps/phoenix/lib/phoenix/exceptions.ex	/^defmodule Phoenix.MissingParamError do$/;"	m
Mixfile	deps/combine/mix.exs	/^defmodule Combine.Mixfile do$/;"	m
Mixfile	deps/decimal/mix.exs	/^defmodule Decimal.Mixfile do$/;"	m
Mixfile	deps/ecto/mix.exs	/^defmodule Ecto.Mixfile do$/;"	m
Mixfile	deps/exq/mix.exs	/^defmodule Exq.Mixfile do$/;"	m
Mixfile	deps/fs/package.exs	/^defmodule FS.Mixfile do$/;"	m
Mixfile	deps/phoenix/mix.exs	/^defmodule Phoenix.Mixfile do$/;"	m
Mixfile	deps/phoenix_ecto/mix.exs	/^defmodule PhoenixEcto.Mixfile do$/;"	m
Mixfile	deps/phoenix_html/mix.exs	/^defmodule PhoenixHtml.Mixfile do$/;"	m
Mixfile	deps/phoenix_live_reload/mix.exs	/^defmodule PhoenixLiveReload.Mixfile do$/;"	m
Mixfile	deps/plug/mix.exs	/^defmodule Plug.Mixfile do$/;"	m
Mixfile	deps/poison/mix.exs	/^defmodule Poison.Mixfile do$/;"	m
Mixfile	deps/postgrex/mix.exs	/^defmodule Postgrex.Mixfile do$/;"	m
Mixfile	deps/timex/mix.exs	/^defmodule Timex.Mixfile do$/;"	m
Mixfile	deps/tzdata/mix.exs	/^defmodule Tzdata.Mixfile do$/;"	m
Mixfile	deps/uuid/mix.exs	/^defmodule UUID.Mixfile do$/;"	m
Mixfile	mix.exs	/^defmodule Exqueue.Mixfile do$/;"	m
MockPool	deps/ecto/integration_test/cases/pool.exs	/^  defmodule MockPool do$/;"	m
MockRepo	deps/ecto/integration_test/cases/pool.exs	/^  defmodule MockRepo do$/;"	m
Model	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Model do$/;"	m
Model	deps/ecto/lib/ecto/model.ex	/^defmodule Ecto.Model do$/;"	m
Model	deps/ecto/lib/ecto/repo/model.ex	/^defmodule Ecto.Repo.Model do$/;"	m
Model	deps/ecto/lib/ecto/schema.ex	/^      defmodule MyApp.Model do$/;"	m
Model	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Model do$/;"	m
ModelCase	test/support/model_case.ex	/^defmodule Exqueue.ModelCase do$/;"	m
MultipleResultsError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.MultipleResultsError do$/;"	m
MyApp	deps/plug/lib/plug/builder.ex	/^      defmodule MyApp do$/;"	m
MyApp	deps/plug/lib/plug/debugger.ex	/^      defmodule MyApp do$/;"	m
MyPlug	deps/plug/lib/plug/static.ex	/^      defmodule MyPlug do$/;"	m
MyQueue	deps/phoenix/lib/phoenix/pubsub.ex	/^      defmodule Phoenix.PubSub.MyQueue do$/;"	m
MySQL	deps/ecto/lib/ecto/adapters/mysql.ex	/^defmodule Ecto.Adapters.MySQL do$/;"	m
Naming	deps/phoenix/lib/phoenix/naming.ex	/^defmodule Phoenix.Naming do$/;"	m
NoArgWorker	deps/exq/test/worker_test.exs	/^  defmodule NoArgWorker do$/;"	m
NoErrorIndexMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoErrorIndexMigration do$/;"	m
NoErrorTableMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoErrorTableMigration do$/;"	m
NoPrimaryKeyFieldError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoPrimaryKeyFieldError do$/;"	m
NoPrimaryKeyValueError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoPrimaryKeyValueError do$/;"	m
NoResultsError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoResultsError do$/;"	m
NoRouteError	deps/phoenix/lib/phoenix/router.ex	/^  defmodule NoRouteError do$/;"	m
NoSQLMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoSQLMigration do$/;"	m
NoopSerializer	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmodule NoopSerializer do$/;"	m
NotLoaded	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.NotLoaded do$/;"	m
NotSentError	deps/plug/lib/plug/conn.ex	/^  defmodule NotSentError do$/;"	m
Note	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^      defmodule Note do$/;"	m
OnDeleteMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule OnDeleteMigration do$/;"	m
OptimisticLock	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^defmodule Ecto.Model.OptimisticLock do$/;"	m
Order	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Order do$/;"	m
Order	deps/ecto/lib/ecto/schema.ex	/^      defmodule Order do$/;"	m
OrderBy	deps/ecto/lib/ecto/query/builder/order_by.ex	/^defmodule Ecto.Query.Builder.OrderBy do$/;"	m
PG2	deps/phoenix/lib/phoenix/pubsub/pg2.ex	/^defmodule Phoenix.PubSub.PG2 do$/;"	m
PG2Server	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^defmodule Phoenix.PubSub.PG2Server do$/;"	m
PageController	web/controllers/page_controller.ex	/^defmodule Exqueue.PageController do$/;"	m
PageControllerTest	test/controllers/page_controller_test.exs	/^defmodule Exqueue.PageControllerTest do$/;"	m
PageView	web/views/page_view.ex	/^defmodule Exqueue.PageView do$/;"	m
PageViewTest	test/views/page_view_test.exs	/^defmodule Exqueue.PageViewTest do$/;"	m
Param	deps/phoenix/lib/phoenix/param.ex	/^      defimpl Phoenix.Param, for: unquote(module) do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Any do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Atom do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: BitString do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Integer do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Map do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defprotocol Phoenix.Param do$/;"	p
Parent	deps/ecto/integration_test/sql/migration.exs	/^  defmodule Parent do$/;"	m
ParseError	deps/plug/lib/plug/parsers.ex	/^  defmodule ParseError do$/;"	m
ParseError	deps/timex/lib/parse/parse_error.ex	/^defmodule Timex.Parse.ParseError do$/;"	m
Parser	deps/poison/lib/poison/parser.ex	/^defmodule Poison.Parser do$/;"	m
Parser	deps/timex/lib/parse/datetime/parser.ex	/^defmodule Timex.Parse.DateTime.Parser do$/;"	m
Parser	deps/timex/lib/parse/zoneinfo/parser.ex	/^defmodule Timex.Parse.ZoneInfo.Parser do$/;"	m
Parser	deps/tzdata/lib/tzdata/parser.ex	/^defmodule Tzdata.Parser do$/;"	m
ParserOrganizer	deps/tzdata/lib/tzdata/parser_organizer.ex	/^defmodule Tzdata.ParserOrganizer do$/;"	m
ParserState	deps/combine/lib/combine/parser_state.ex	/^defmodule Combine.ParserState do$/;"	m
Parsers	deps/plug/lib/plug/parsers.ex	/^defmodule Plug.Parsers do$/;"	m
Parsers	deps/timex/lib/parse/datetime/parsers.ex	/^defmodule Timex.Parse.DateTime.Parsers do$/;"	m
PerformArgWorker	deps/exq/test/exq_test.exs	/^  defmodule PerformArgWorker do$/;"	m
PerformWorker	deps/exq/test/exq_test.exs	/^  defmodule PerformWorker do$/;"	m
PerformanceTest	deps/exq/test/performance_test.exs	/^defmodule PerformanceTest do$/;"	m
PeriodBuilder	deps/tzdata/lib/tzdata/period_builder.ex	/^defmodule Tzdata.PeriodBuilder do$/;"	m
Permalink	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Permalink do$/;"	m
Permalink	deps/ecto/integration_test/support/types.exs	/^defmodule Custom.Permalink do$/;"	m
Permalink	deps/ecto/lib/ecto/type.ex	/^      defmodule Permalink do$/;"	m
Permalink	deps/phoenix_html/lib/phoenix_html/form.ex	/^      defmodule Permalink do$/;"	m
Phoenix	deps/phoenix/lib/mix/phoenix.ex	/^defmodule Mix.Phoenix do$/;"	m
Phoenix	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^defmodule Mix.Tasks.Compile.Phoenix do$/;"	m
Phoenix	deps/phoenix/lib/phoenix.ex	/^defmodule Phoenix do$/;"	m
Pipeline	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^defmodule Phoenix.Controller.Pipeline do$/;"	m
Planner	deps/ecto/lib/ecto/query/planner.ex	/^defmodule Ecto.Query.Planner do$/;"	m
Plug	deps/plug/lib/plug.ex	/^defmodule Plug do$/;"	m
PlugUsingHalt	deps/plug/lib/plug/builder.ex	/^      defmodule PlugUsingHalt do$/;"	m
PlugWithCustomCall	deps/plug/lib/plug/builder.ex	/^      defmodule PlugWithCustomCall do$/;"	m
PlugWithCustomOptions	deps/plug/lib/plug/builder.ex	/^      defmodule PlugWithCustomOptions do$/;"	m
Poison	deps/poison/lib/poison.ex	/^defmodule Poison do$/;"	m
Pool	deps/ecto/lib/ecto/pool.ex	/^defmodule Ecto.Pool do$/;"	m
PoolTest	deps/ecto/integration_test/cases/pool.exs	/^defmodule Ecto.Integration.PoolTest do$/;"	m
Poolboy	deps/ecto/lib/ecto/pools/poolboy.ex	/^defmodule Ecto.Pools.Poolboy do$/;"	m
Post	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Post do$/;"	m
Post	deps/ecto/lib/ecto.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/schema.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/type.ex	/^      defmodule Post do$/;"	m
PostTest	deps/ecto/lib/ecto/adapters/sql.ex	/^      defmodule PostTest do$/;"	m
PostUsecTimestamps	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.PostUsecTimestamps do$/;"	m
Postgres	deps/ecto/lib/ecto/adapters/postgres.ex	/^defmodule Ecto.Adapters.Postgres do$/;"	m
Postgrex	deps/postgrex/lib/postgrex.ex	/^defmodule Postgrex do$/;"	m
Preload	deps/ecto/lib/ecto/query/builder/preload.ex	/^defmodule Ecto.Query.Builder.Preload do$/;"	m
PreloadTest	deps/ecto/integration_test/cases/preload.exs	/^defmodule Ecto.Integration.PreloadTest do$/;"	m
Preloader	deps/ecto/lib/ecto/repo/preloader.ex	/^defmodule Ecto.Repo.Preloader do$/;"	m
Pretty	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Pretty do$/;"	m
Process	deps/exq/lib/exq/stats/process.ex	/^defmodule Exq.Stats.Process do$/;"	m
Protocol	deps/postgrex/lib/postgrex/protocol.ex	/^defmodule Postgrex.Protocol do$/;"	m
Proxy	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^defmodule Phoenix.CodeReloader.Proxy do$/;"	m
PubSub	deps/phoenix/lib/phoenix/pubsub.ex	/^defmodule Phoenix.PubSub do$/;"	m
PubSubTest	deps/phoenix/test/shared/pubsub_test.exs	/^defmodule Phoenix.PubSubTest do$/;"	m
Query	deps/ecto/lib/ecto/adapters/sql/query.ex	/^defmodule Ecto.Adapters.SQL.Query do$/;"	m
Query	deps/ecto/lib/ecto/query.ex	/^defmodule Ecto.Query do$/;"	m
Query	deps/plug/lib/plug/conn/query.ex	/^defmodule Plug.Conn.Query do$/;"	m
QueryError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.QueryError do$/;"	m
QueryExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule QueryExpr do$/;"	m
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Atom do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: BitString do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Ecto.Query do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Tuple do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defprotocol Ecto.Queryable do$/;"	p
Queryable	deps/ecto/lib/ecto/repo/queryable.ex	/^defmodule Ecto.Repo.Queryable do$/;"	m
RAW	deps/ecto/integration_test/cases/repo.exs	/^    defmodule RAW do$/;"	m
Range	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Range do$/;"	m
RedisTest	deps/exq/test/redis_test.exs	/^defmodule Exq.RedisTest do$/;"	m
Reference	deps/ecto/lib/ecto/migration.ex	/^  defmodule Reference do$/;"	m
ReferencesRollbackMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule ReferencesRollbackMigration do$/;"	m
Relation	deps/ecto/lib/ecto/changeset/relation.ex	/^defmodule Ecto.Changeset.Relation do$/;"	m
ReleaseReader	deps/tzdata/lib/tzdata/release_reader.ex	/^defmodule Tzdata.ReleaseReader do$/;"	m
ReleaseUpdater	deps/tzdata/lib/tzdata/release_updater.ex	/^defmodule Tzdata.ReleaseUpdater do$/;"	m
RenameColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule RenameColumnMigration do$/;"	m
RenameMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule RenameMigration do$/;"	m
RenderErrors	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^defmodule Phoenix.Endpoint.RenderErrors do$/;"	m
Reply	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Reply do$/;"	m
Repo	deps/ecto/integration_test/support/repo.exs	/^defmodule Ecto.Integration.Repo do$/;"	m
Repo	deps/ecto/lib/ecto.ex	/^      defmodule Repo do$/;"	m
Repo	deps/ecto/lib/ecto/repo.ex	/^      defmodule Repo do$/;"	m
Repo	deps/ecto/lib/ecto/repo.ex	/^defmodule Ecto.Repo do$/;"	m
Repo	deps/ecto/lib/mix/tasks/ecto.gen.repo.ex	/^defmodule Mix.Tasks.Ecto.Gen.Repo do$/;"	m
Repo	lib/exqueue/repo.ex	/^defmodule Exqueue.Repo do$/;"	m
RepoTest	deps/ecto/integration_test/cases/repo.exs	/^defmodule Ecto.Integration.RepoTest do$/;"	m
RequestId	deps/plug/lib/plug/request_id.ex	/^defmodule Plug.RequestId do$/;"	m
RequestTooLargeError	deps/plug/lib/plug/parsers.ex	/^  defmodule RequestTooLargeError do$/;"	m
Resource	deps/phoenix/lib/phoenix/router/resource.ex	/^defmodule Phoenix.Router.Resource do$/;"	m
Result	deps/postgrex/lib/postgrex/result.ex	/^defmodule Postgrex.Result do$/;"	m
Rollback	deps/ecto/lib/mix/tasks/ecto.rollback.ex	/^defmodule Mix.Tasks.Ecto.Rollback do$/;"	m
Route	deps/phoenix/lib/phoenix/router/route.ex	/^defmodule Phoenix.Router.Route do$/;"	m
Router	deps/exq/web/router.ex	/^  defmodule Router do$/;"	m
Router	deps/phoenix/lib/phoenix/router.ex	/^      defmodule MyApp.Router do$/;"	m
Router	deps/phoenix/lib/phoenix/router.ex	/^defmodule Phoenix.Router do$/;"	m
Router	deps/plug/lib/plug/router.ex	/^defmodule Plug.Router do$/;"	m
Router	web/router.ex	/^defmodule Exqueue.Router do$/;"	m
RouterPlug	deps/exq/web/router.ex	/^defmodule Exq.RouterPlug do$/;"	m
Routes	deps/phoenix/lib/mix/tasks/phoenix.routes.ex	/^defmodule Mix.Tasks.Phoenix.Routes do$/;"	m
Run	deps/exq/lib/mix/tasks/exq.run.ex	/^defmodule Mix.Tasks.Exq.Run do$/;"	m
Runner	deps/ecto/lib/ecto/migration/runner.ex	/^defmodule Ecto.Migration.Runner do$/;"	m
SQL	deps/ecto/lib/ecto/adapters/sql.ex	/^defmodule Ecto.Adapters.SQL do$/;"	m
SQLTest	deps/ecto/integration_test/sql/sql.exs	/^defmodule Ecto.Integration.SQLTest do$/;"	m
SSL	deps/plug/lib/plug/ssl.ex	/^defmodule Plug.SSL do$/;"	m
Safe	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^  defimpl Phoenix.HTML.Safe, for: [Decimal, Ecto.Time, Ecto.Date, Ecto.DateTime] do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Atom do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: BitString do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Float do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Integer do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: List do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Tuple do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defprotocol Phoenix.HTML.Safe do$/;"	p
Sandbox	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^defmodule Ecto.Adapters.SQL.Sandbox do$/;"	m
Schema	deps/ecto/lib/ecto/schema.ex	/^defmodule Ecto.Schema do$/;"	m
SchemaMigration	deps/ecto/lib/ecto/migration/schema_migration.ex	/^defmodule Ecto.Migration.SchemaMigration do$/;"	m
Scope	deps/phoenix/lib/phoenix/router/scope.ex	/^defmodule Phoenix.Router.Scope do$/;"	m
Secret	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Secret do$/;"	m
Select	deps/ecto/lib/ecto/query/builder/select.ex	/^defmodule Ecto.Query.Builder.Select do$/;"	m
SelectExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule SelectExpr do$/;"	m
SendWorker	deps/exq/test/test_helper.exs	/^  defmodule SendWorker do$/;"	m
Serializer	deps/phoenix/lib/phoenix/transports/serializer.ex	/^defmodule Phoenix.Transports.Serializer do$/;"	m
Server	deps/exq/lib/exq/enqueuer/server.ex	/^defmodule Exq.Enqueuer.Server do$/;"	m
Server	deps/exq/lib/exq/manager/server.ex	/^defmodule Exq.Manager.Server do$/;"	m
Server	deps/exq/lib/exq/scheduler/scheduler.ex	/^defmodule Exq.Scheduler.Server do$/;"	m
Server	deps/exq/lib/exq/stats/server.ex	/^defmodule Exq.Stats.Server do$/;"	m
Server	deps/exq/lib/exq/worker/server.ex	/^defmodule Exq.Worker.Server do$/;"	m
Server	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^defmodule Mix.Tasks.Phoenix.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/channel/server.ex	/^defmodule Phoenix.Channel.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^defmodule Phoenix.CodeReloader.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/endpoint/server.ex	/^defmodule Phoenix.Endpoint.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^defmodule Phoenix.Transports.LongPoll.Server do$/;"	m
Session	deps/plug/lib/plug/session.ex	/^defmodule Plug.Session do$/;"	m
Shuffle	deps/exq/lib/exq/support/shuffle.ex	/^defmodule Exq.Support.Shuffle do$/;"	m
SleepWorker	deps/exq/test/exq_test.exs	/^  defmodule SleepWorker do$/;"	m
Socket	deps/phoenix/lib/phoenix/socket.ex	/^defmodule Phoenix.Socket do$/;"	m
Socket	deps/phoenix_live_reload/lib/phoenix_live_reload/socket.ex	/^defmodule Phoenix.LiveReloader.Socket do$/;"	m
SojournBroker	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^defmodule Ecto.Pools.SojournBroker do$/;"	m
StaleModelError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.StaleModelError do$/;"	m
State	deps/exq/lib/exq/enqueuer/server.ex	/^  defmodule State do$/;"	m
State	deps/exq/lib/exq/manager/server.ex	/^  defmodule State do$/;"	m
State	deps/exq/lib/exq/scheduler/scheduler.ex	/^  defmodule State do$/;"	m
State	deps/exq/lib/exq/stats/server.ex	/^  defmodule State do$/;"	m
State	deps/exq/lib/exq/worker/server.ex	/^  defmodule State do$/;"	m
Static	deps/plug/lib/plug/static.ex	/^defmodule Plug.Static do$/;"	m
StaticRoot	deps/exq/web/static_root.ex	/^defmodule Plug.StaticRoot do$/;"	m
Status	deps/plug/lib/plug/conn/status.ex	/^defmodule Plug.Conn.Status do$/;"	m
Storage	deps/ecto/lib/ecto/adapter/storage.ex	/^defmodule Ecto.Adapter.Storage  do$/;"	m
Storage	deps/ecto/lib/ecto/storage.ex	/^defmodule Ecto.Storage do$/;"	m
Store	deps/plug/lib/plug/session/store.ex	/^defmodule Plug.Session.Store do$/;"	m
Strftime	deps/timex/lib/format/datetime/formatters/strftime.ex	/^defmodule Timex.Format.DateTime.Formatters.Strftime do$/;"	m
Strftime	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Strftime do$/;"	m
Supervisor	deps/ecto/lib/ecto/repo/supervisor.ex	/^defmodule Ecto.Repo.Supervisor do$/;"	m
Supervisor	deps/exq/lib/exq/enqueuer/supervisor.ex	/^defmodule Exq.Enqueuer.Supervisor do$/;"	m
Supervisor	deps/exq/lib/exq/manager/supervisor.ex	/^defmodule Exq.Manager.Supervisor do$/;"	m
Supervisor	deps/exq/lib/exq/scheduler/supervisor.ex	/^defmodule Exq.Scheduler.Supervisor do$/;"	m
Supervisor	deps/phoenix/lib/phoenix/supervisor.ex	/^defmodule Phoenix.Supervisor do$/;"	m
Supervisor	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^defmodule Phoenix.Transports.LongPoll.Supervisor do$/;"	m
Supervisor	deps/plug/lib/plug/supervisor.ex	/^defmodule Plug.Supervisor do$/;"	m
SyntaxError	deps/poison/lib/poison/parser.ex	/^defmodule Poison.SyntaxError do$/;"	m
Table	deps/ecto/lib/ecto/migration.ex	/^  defmodule Table do$/;"	m
TableData	deps/tzdata/lib/tzdata/table_data.ex	/^defmodule Tzdata.TableData do$/;"	m
TableParser	deps/tzdata/lib/tzdata/table_parser.ex	/^defmodule Tzdata.TableParser do$/;"	m
Tag	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.Tag do$/;"	m
Tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^defmodule Phoenix.HTML.Tag do$/;"	m
Tagged	deps/ecto/lib/ecto/query.ex	/^  defmodule Tagged do$/;"	m
Task	deps/ecto/lib/ecto/schema.ex	/^      defmodule Task do$/;"	m
Template	deps/phoenix/lib/phoenix/template.ex	/^defmodule Phoenix.Template do$/;"	m
Templates	deps/phoenix/lib/phoenix/template.ex	/^      defmodule Templates do$/;"	m
Test	deps/combine/lib/combine.ex	/^      defmodule Test do$/;"	m
Test	deps/plug/lib/plug/test.ex	/^defmodule Plug.Test do$/;"	m
TestRedis	deps/exq/test/test_helper.exs	/^defmodule TestRedis do$/;"	m
TestStats	deps/exq/test/test_helper.exs	/^defmodule TestStats do$/;"	m
TestTransactionTest	deps/ecto/integration_test/sql/test_transaction.exs	/^defmodule Ecto.Integration.TestTransactionTest do$/;"	m
Text	deps/combine/lib/combine/parsers/text.ex	/^defmodule Combine.Parsers.Text do$/;"	m
Text	deps/postgrex/lib/postgrex/extensions/text.ex	/^defmodule Postgrex.Extensions.Text do$/;"	m
ThreeArgWorker	deps/exq/test/worker_test.exs	/^  defmodule ThreeArgWorker do$/;"	m
Time	deps/ecto/lib/ecto/datetime.ex	/^defmodule Ecto.Time do$/;"	m
Time	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Time do$/;"	m
Time	deps/timex/lib/time/time.ex	/^defmodule Timex.Time do$/;"	m
Timeout	deps/ecto/lib/ecto/pools/sojourn_broker/timeout.ex	/^defmodule Ecto.Pools.SojournBroker.Timeout do$/;"	m
Timestamp	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Timestamp do$/;"	m
Timestamps	deps/ecto/lib/ecto/model/timestamps.ex	/^defmodule Ecto.Model.Timestamps do$/;"	m
Timex	deps/timex/lib/timex.ex	/^defmodule Timex do$/;"	m
Timezone	deps/timex/lib/timezone/timezone.ex	/^defmodule Timex.Timezone do$/;"	m
TimezoneInfo	deps/timex/lib/timezone/timezone_info.ex	/^defmodule Timex.TimezoneInfo do$/;"	m
Token	deps/phoenix/lib/phoenix/token.ex	/^defmodule Phoenix.Token do$/;"	m
Tokenizer	deps/timex/lib/parse/datetime/tokenizer.ex	/^defmodule Timex.Parse.DateTime.Tokenizer do$/;"	m
Trans	deps/ecto/integration_test/sql/transaction.exs	/^  defmodule Trans do$/;"	m
Transaction	deps/ecto/lib/ecto/adapter/transaction.ex	/^defmodule Ecto.Adapter.Transaction  do$/;"	m
TransactionTest	deps/ecto/integration_test/sql/transaction.exs	/^defmodule Ecto.Integration.TransactionTest do$/;"	m
TransitionInfo	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule TransitionInfo do$/;"	m
Translator	deps/plug/lib/plug/adapters/translator.ex	/^defmodule Plug.Adapters.Translator do$/;"	m
Transport	deps/phoenix/lib/phoenix/socket/transport.ex	/^defmodule Phoenix.Socket.Transport do$/;"	m
Type	deps/ecto/lib/ecto/type.ex	/^defmodule Ecto.Type do$/;"	m
TypeInfo	deps/postgrex/lib/postgrex/type_info.ex	/^defmodule Postgrex.TypeInfo do$/;"	m
TypeServer	deps/postgrex/lib/postgrex/type_server.ex	/^defmodule Postgrex.TypeServer do$/;"	m
TypeTest	deps/ecto/integration_test/cases/type.exs	/^defmodule Ecto.Integration.TypeTest do$/;"	m
Types	deps/postgrex/lib/postgrex/types.ex	/^defmodule Postgrex.Types do$/;"	m
Tzdata	deps/tzdata/lib/tzdata.ex	/^defmodule Tzdata do$/;"	m
URLENCODED	deps/plug/lib/plug/parsers/urlencoded.ex	/^defmodule Plug.Parsers.URLENCODED do$/;"	m
UUID	deps/ecto/lib/ecto/uuid.ex	/^defmodule Ecto.UUID do$/;"	m
UUID	deps/uuid/lib/uuid.ex	/^defmodule UUID do$/;"	m
Ui	deps/exq/lib/mix/tasks/exq.ui.ex	/^defmodule Mix.Tasks.Exq.Ui do$/;"	m
UndefinedError	deps/phoenix/lib/phoenix/template.ex	/^  defmodule UndefinedError do$/;"	m
Unfetched	deps/plug/lib/plug/conn/unfetched.ex	/^defmodule Plug.Conn.Unfetched do$/;"	m
UniqueError	deps/ecto/integration_test/sql/transaction.exs	/^  defmodule UniqueError do$/;"	m
UnsupportedMediaTypeError	deps/plug/lib/plug/parsers.ex	/^  defmodule UnsupportedMediaTypeError do$/;"	m
Update	deps/ecto/lib/ecto/query/builder/update.ex	/^defmodule Ecto.Query.Builder.Update do$/;"	m
Upload	deps/plug/lib/plug/upload.ex	/^defmodule Plug.Upload do$/;"	m
User	deps/ecto/integration_test/support/models.exs	/^defmodule Ecto.Integration.User do$/;"	m
User	deps/ecto/lib/ecto.ex	/^      defmodule User do$/;"	m
User	deps/ecto/lib/ecto/changeset.ex	/^      defmodule User do$/;"	m
User	deps/ecto/lib/ecto/model/callbacks.ex	/^      defmodule User do$/;"	m
User	deps/ecto/lib/ecto/schema.ex	/^      defmodule User do$/;"	m
User	deps/phoenix/lib/phoenix/param.ex	/^      defmodule User do$/;"	m
User	deps/phoenix_html/lib/phoenix_html/form.ex	/^      defmodule User do$/;"	m
UserController	deps/phoenix/lib/phoenix/controller.ex	/^      defmodule MyApp.UserController do$/;"	m
UserController	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      defmodule UserController do$/;"	m
UserSocket	deps/phoenix/lib/phoenix/socket.ex	/^      defmodule MyApp.UserSocket do$/;"	m
UserSocket	deps/phoenix/lib/phoenix/token.ex	/^      defmodule MyApp.UserSocket do$/;"	m
UserSocket	web/channels/user_socket.ex	/^defmodule Exqueue.UserSocket do$/;"	m
UserView	deps/phoenix/lib/phoenix/view.ex	/^      defmodule YourApp.UserView do$/;"	m
Util	deps/tzdata/lib/tzdata/util.ex	/^defmodule Tzdata.Util do$/;"	m
Utils	deps/ecto/lib/ecto/datetime.ex	/^defmodule Ecto.DateTime.Utils do$/;"	m
Utils	deps/phoenix/lib/phoenix/utils.ex	/^defmodule Phoenix.Utils do$/;"	m
Utils	deps/plug/lib/plug/conn/utils.ex	/^defmodule Plug.Conn.Utils do$/;"	m
Utils	deps/plug/lib/plug/router/utils.ex	/^defmodule Plug.Router.Utils do$/;"	m
Utils	deps/postgrex/lib/postgrex/utils.ex	/^defmodule Postgrex.Utils do$/;"	m
Utils	deps/timex/lib/utils/utils.ex	/^defmodule Timex.Utils do$/;"	m
View	deps/phoenix/lib/phoenix/view.ex	/^defmodule Phoenix.View do$/;"	m
Watcher	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^defmodule Phoenix.Endpoint.Watcher do$/;"	m
Weather	deps/ecto/lib/ecto.ex	/^      defmodule Weather do$/;"	m
Web	deps/phoenix/lib/phoenix/view.ex	/^      defmodule YourApp.Web do$/;"	m
Web	web/web.ex	/^defmodule Exqueue.Web do$/;"	m
WebSocket	deps/phoenix/lib/phoenix/transports/websocket.ex	/^defmodule Phoenix.Transports.WebSocket do$/;"	m
WebSocketSerializer	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^defmodule Phoenix.Transports.WebSocketSerializer do$/;"	m
Worker	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^defmodule Ecto.Pools.Poolboy.Worker do$/;"	m
Worker	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^defmodule Ecto.Pools.SojournBroker.Worker do$/;"	m
Worker	deps/exq/test/performance_test.exs	/^  defmodule Worker do$/;"	m
WorkerTest	deps/exq/test/worker_test.exs	/^defmodule WorkerTest do$/;"	m
WrapperError	deps/plug/lib/plug/conn/wrapper_error.ex	/^defmodule Plug.Conn.WrapperError do$/;"	m
Zone	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule Zone do$/;"	m
__adapter__	deps/ecto/lib/ecto/repo.ex	/^      def __adapter__ do$/;"	f
__adapter__	deps/ecto/lib/ecto/repo.ex	/^  defcallback __adapter__ :: Ecto.Adapter.t$/;"	c
__apply__	deps/ecto/lib/ecto/model/callbacks.ex	/^  def __apply__(module, callback, %{__struct__: expected} = data) do$/;"	f
__assocs__	deps/ecto/lib/ecto/schema.ex	/^  def __assocs__(assocs) do$/;"	f
__autogenerate__	deps/ecto/lib/ecto/schema.ex	/^  def __autogenerate__(id) do$/;"	f
__before_compile__	deps/ecto/lib/ecto/adapters/sql.ex	/^      defmacro __before_compile__(_env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/migration.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/model/autogenerate.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/model/dependent.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/model/timestamps.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/schema.ex	/^  def __before_compile__(env) do$/;"	f
__before_compile__	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/router.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/template.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/plug/lib/plug/builder.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/plug/lib/plug/debugger.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/plug/lib/plug/error_handler.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__before_compile__	deps/plug/lib/plug/router.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__belongs_to__	deps/ecto/lib/ecto/schema.ex	/^  def __belongs_to__(mod, name, queryable, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def __catch__(:error, :function_clause, controller, action,$/;"	f
__catch__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def __catch__(kind, reason, _controller, _action, stack) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def __catch__(conn, kind, reason, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp __catch__(_conn, :error, %Phoenix.Router.NoRouteError{} = reason, stack, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp __catch__(conn, kind, reason, stack, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  def __catch__(conn, kind, reason, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  defp __catch__(conn, kind, reason, stack, opts) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, handle_errors) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  def __catch__(conn, kind, reason, handle_errors) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  defp __catch__(conn, kind, reason, stack, handle_errors) do$/;"	f
__changeset__	deps/ecto/lib/ecto/schema.ex	/^      def __changeset__, do: unquote(map)$/;"	f
__changeset__	deps/ecto/lib/ecto/schema.ex	/^  def __changeset__(changeset_fields) do$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(_topic, _transport), do: nil$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(unquote(topic_match), _transport), do: unquote(channel_module)$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(unquote(topic_match), transport)$/;"	f
__deriving__	deps/phoenix/lib/phoenix/param.ex	/^  defmacro __deriving__(module, struct, options) do$/;"	a
__deriving__	deps/poison/lib/poison/encoder.ex	/^  defmacro __deriving__(module, struct, options) do$/;"	a
__embeds__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds__(embeds) do$/;"	f
__embeds_many__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds_many__(mod, name, model, opts) do$/;"	f
__embeds_one__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds_one__(mod, name, model, opts) do$/;"	f
__field__	deps/ecto/lib/ecto/schema.ex	/^  def __field__(mod, name, type, pk?, opts) do$/;"	f
__has_many__	deps/ecto/lib/ecto/schema.ex	/^  def __has_many__(mod, name, queryable, opts) do$/;"	f
__has_one__	deps/ecto/lib/ecto/schema.ex	/^  def __has_one__(mod, name, queryable, opts) do$/;"	f
__helpers__	deps/phoenix/lib/phoenix/router.ex	/^      def __helpers__, do: __MODULE__.Helpers$/;"	f
__intercepts__	deps/phoenix/lib/phoenix/channel.ex	/^      def __intercepts__, do: @phoenix_intercepts$/;"	f
__layout__	deps/phoenix/lib/phoenix/controller.ex	/^  def __layout__(controller_module, opts) do$/;"	f
__load__	deps/ecto/lib/ecto/schema.ex	/^  def __load__(model, prefix, source, context, data, loader) do$/;"	f
__lock__	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^  def __lock__(%Ecto.Changeset{model: model} = changeset, field) do$/;"	f
__migration__	deps/ecto/lib/ecto/migration.ex	/^      def __migration__,$/;"	f
__on_definition__	deps/phoenix/lib/phoenix/channel.ex	/^  def __on_definition__(_env, _kind, _name, _args, _guards, _body) do$/;"	f
__on_definition__	deps/phoenix/lib/phoenix/channel.ex	/^  def __on_definition__(env, :def, :handle_out, [event, _payload, _socket], _, _)$/;"	f
__phoenix_recompile__?	deps/phoenix/lib/phoenix/template.ex	/^      def __phoenix_recompile__? do$/;"	f
__pool__	deps/ecto/lib/ecto/repo.ex	/^      def __pool__ do$/;"	f
__pool__	deps/ecto/lib/ecto/repo.ex	/^  defcallback __pool__ :: {module, atom, timeout}$/;"	c
__pubsub_server__	deps/phoenix/lib/phoenix/endpoint.ex	/^      def __pubsub_server__, do: @pubsub_server$/;"	f
__query_cache__	deps/ecto/lib/ecto/repo.ex	/^      def __query_cache__ do$/;"	f
__query_cache__	deps/ecto/lib/ecto/repo.ex	/^  defcallback __query_cache__ :: atom$/;"	c
__read_after_writes__	deps/ecto/lib/ecto/schema.ex	/^  def __read_after_writes__(fields) do$/;"	f
__repo__	deps/ecto/lib/ecto/repo.ex	/^      def __repo__ do$/;"	f
__repo__	deps/ecto/lib/ecto/repo.ex	/^  defcallback __repo__ :: true$/;"	c
__resource__	deps/phoenix/lib/phoenix/view.ex	/^        def __resource__, do: @view_resource$/;"	f
__route__	deps/plug/lib/plug/router.ex	/^  def __route__(method, path, guards, options) do$/;"	f
__routes__	deps/phoenix/lib/phoenix/router.ex	/^      def __routes__,  do: unquote(Macro.escape(routes))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:association, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:embed, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:type, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:association, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:associations), do: unquote(assoc_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:autogenerate_id), do: unquote(id)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:embed, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:embeds), do: unquote(embed_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:fields),      do: unquote(field_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:hash),        do: unquote(hash)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:primary_key), do: unquote(primary_key)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:read_after_writes), do: unquote(Enum.reverse(fields))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:source),      do: unquote(Macro.escape(source))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:type, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:types), do: unquote(types)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^  def __schema__(source, fields, primary_key) do$/;"	f
__sockets__	deps/phoenix/lib/phoenix/endpoint.ex	/^      def __sockets__, do: unquote(sockets)$/;"	f
__struct__	deps/ecto/lib/ecto/schema.ex	/^  def __struct__(struct_fields) do$/;"	f
__templates__	deps/phoenix/lib/phoenix/template.ex	/^      def __templates__ do$/;"	f
__transport__	deps/phoenix/lib/phoenix/socket.ex	/^          def __transport__(unquote(name)) do$/;"	f
__transport__	deps/phoenix/lib/phoenix/socket.ex	/^  def __transport__(transports, name, module, config) do$/;"	f
__transports__	deps/phoenix/lib/phoenix/socket.ex	/^      def __transports__, do: unquote(Macro.escape(transports))$/;"	f
__types__	deps/ecto/lib/ecto/schema.ex	/^  def __types__(fields) do$/;"	f
__using__	deps/combine/lib/combine.ex	/^  defmacro __using__(opts \\\\ []) do$/;"	a
__using__	deps/combine/lib/combine/helpers.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/integration_test/support/models.exs	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/integration_test/support/repo.exs	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/ecto/lib/ecto/adapters/sql.ex	/^  defmacro __using__(adapter) do$/;"	a
__using__	deps/ecto/lib/ecto/migration.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/model.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/ecto/lib/ecto/model/autogenerate.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/ecto/lib/ecto/model/dependent.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/model/timestamps.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/repo.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/ecto/lib/ecto/schema.ex	/^        defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/schema.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/controller.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/router.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/template.ex	/^  defmacro __using__(options) do$/;"	a
__using__	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/view.ex	/^  defmacro __using__(options) do$/;"	a
__using__	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/plug/lib/plug/builder.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/debugger.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/error_handler.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/plug/lib/plug/router.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/poison/lib/poison/encoder.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/format/datetime/formatter.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/timex/lib/format/time/formatter.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/parse/datetime/tokenizer.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/timex.ex	/^  defmacro __using__(_) do$/;"	a
__using__	web/web.ex	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__view__	deps/phoenix/lib/phoenix/controller.ex	/^  def __view__(controller_module) do$/;"	f
_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def _put_layout(conn, false) do$/;"	f
_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def _put_layout(conn, layout) when is_binary(layout) or is_atom(layout) do$/;"	f
_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def _put_layout(conn, layout)$/;"	f
_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def _put_layout(conn, {mod, layout}) when is_atom(mod) do$/;"	f
_string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  defp _string_amount_to_secs(list) when length(list) == 1 or length(list) == 2 do$/;"	f
_string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  defp _string_amount_to_secs(list) when length(list) == 3 do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{coef: :qNaN} = num) do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{coef: :sNaN} = num) do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{} = num) do$/;"	f
abs	deps/timex/lib/time/time.ex	/^  def abs(timestamp={mega, sec, micro}) do$/;"	f
accepts	deps/phoenix/lib/phoenix/controller.ex	/^  def accepts(conn, [_|_] = accepted) do$/;"	f
action	deps/phoenix/lib/phoenix/controller.ex	/^      def action(conn, _) do$/;"	f
action	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def action(%{private: %{phoenix_action: action}} = conn, _options) do$/;"	f
action	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def action(conn, opts) do$/;"	f
action_name	deps/phoenix/lib/phoenix/controller.ex	/^  def action_name(conn), do: conn.private.phoenix_action$/;"	f
action_to_state	deps/ecto/lib/ecto/repo/model.ex	/^  defp action_to_state(:delete), do: :deleted$/;"	f
action_to_state	deps/ecto/lib/ecto/repo/model.ex	/^  defp action_to_state(:insert), do: :loaded$/;"	f
action_to_state	deps/ecto/lib/ecto/repo/model.ex	/^  defp action_to_state(:update), do: :loaded$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :inf} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :inf} = num2) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
add	deps/ecto/lib/ecto/migration.ex	/^  def add(column, type, opts \\\\ []) when is_atom(column) do$/;"	f
add	deps/timex/lib/date/date.ex	/^  def add(%DateTime{} = date, {mega, sec, _}) do$/;"	f
add	deps/timex/lib/time/time.ex	/^  def add({mega1,sec1,micro1}, {mega2,sec2,micro2}) do$/;"	f
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 < exp2,$/;"	f
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 == exp2,$/;"	f
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 > exp2,$/;"	f
add_connection	deps/postgrex/lib/postgrex/type_server.ex	/^  defp add_connection(pid, key, conns) do$/;"	f
add_constraint	deps/ecto/lib/ecto/changeset.ex	/^  defp add_constraint(changeset, type, constraint, field, message)$/;"	f
add_dummy_command	deps/postgrex/lib/postgrex/connection.ex	/^  defp add_dummy_command(s) do$/;"	f
add_error	deps/ecto/lib/ecto/changeset.ex	/^  def add_error(%{errors: errors} = changeset, key, error) do$/;"	f
add_links_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_links_to_map(map, []), do: map$/;"	f
add_links_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_links_to_map(map, [head|tail]) do$/;"	f
add_pk_filter!	deps/ecto/lib/ecto/repo/model.ex	/^  defp add_pk_filter!(filters, struct) do$/;"	f
add_process	deps/exq/lib/exq/stats/server.ex	/^  def add_process(pid, namespace, worker, host, job) do$/;"	f
add_process	deps/exq/lib/exq/stats/server.ex	/^  def add_process(redis, namespace, process) do$/;"	f
add_queue	deps/exq/lib/exq/manager/server.ex	/^  defp add_queue(state, queue, concurrency \\\\ Config.get(:concurrency, 10_000)) do$/;"	f
add_reply_to_queue	deps/postgrex/lib/postgrex/connection.ex	/^  defp add_reply_to_queue(reply, %{queue: queue} = s) do$/;"	f
add_resources	deps/phoenix/lib/phoenix/router.ex	/^  defp add_resources(path, controller, options, do: context) do$/;"	f
add_route	deps/phoenix/lib/phoenix/router.ex	/^  defp add_route(kind, verb, path, plug, plug_opts, options) do$/;"	f
add_rules_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_rules_to_map(map, []), do: map$/;"	f
add_rules_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_rules_to_map(map, [rule|tail]) do$/;"	f
add_seconds	deps/plug/lib/plug/conn/cookies.ex	/^  defp add_seconds(time, seconds_to_add) do$/;"	f
add_sign	deps/decimal/lib/decimal.ex	/^  defp add_sign(sign1, sign2, coef) do$/;"	f
advance_datetime_from_59_to_60_sec	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp advance_datetime_from_59_to_60_sec(datetime) do$/;"	f
after_connect	deps/ecto/integration_test/cases/pool.exs	/^    def after_connect(conn) do$/;"	f
after_connect	deps/ecto/lib/ecto/adapters/connection.ex	/^  defp after_connect(conn, opts) do$/;"	f
after_delete	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_delete(function, args \\\\ []),$/;"	a
after_delete	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_delete(module, function, args),$/;"	a
after_insert	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_insert(function, args \\\\ []),$/;"	a
after_insert	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_insert(module, function, args),$/;"	a
after_load	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_load(function, args \\\\ []),$/;"	a
after_load	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_load(module, function, args),$/;"	a
after_update	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_update(function, args \\\\ []),$/;"	a
after_update	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro after_update(module, function, args),$/;"	a
aliases	mix.exs	/^  defp aliases do$/;"	f
all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def all(query) do$/;"	f
all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def all(query) do$/;"	f
all	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback all(Ecto.Query.t) :: String.t$/;"	c
all	deps/ecto/lib/ecto/repo.ex	/^      def all(queryable, opts \\\\ []) do$/;"	f
all	deps/ecto/lib/ecto/repo.ex	/^  defcallback all(Ecto.Query.t, Keyword.t) :: [Ecto.Model.t] | no_return$/;"	c
all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def all(repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
all_waiting	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp all_waiting(acc) do$/;"	f
allow_jsonp	deps/phoenix/lib/phoenix/controller.ex	/^  def allow_jsonp(conn, opts \\\\ []) do$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?(_only, []),   do: false$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?(nil, _list),  do: true$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?(only, [h|_]), do: h in only$/;"	f
alphanumeric_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp alphanumeric_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
alphanumeric_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp alphanumeric_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
alter	deps/ecto/lib/ecto/migration.ex	/^  defmacro alter(object, do: block) do$/;"	a
ampm	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm(_) do$/;"	f
ampm_lower	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm_lower(_) do$/;"	f
ampm_upper	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm_upper(_) do$/;"	f
ansic	deps/timex/lib/parse/datetime/parsers.ex	/^  def ansic(opts \\\\ []) do$/;"	f
any_char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp any_char_impl(%ParserState{status: :ok, column: col, input: <<cp::utf8, rest::binary>>, results: results} = state) do$/;"	f
any_char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp any_char_impl(%ParserState{status: :ok} = state) do$/;"	f
any_nonzero	deps/decimal/lib/decimal.ex	/^  defp any_nonzero(digits),$/;"	f
application	deps/combine/mix.exs	/^  def application, do: [applications: []]$/;"	f
application	deps/decimal/mix.exs	/^  def application do$/;"	f
application	deps/ecto/mix.exs	/^  def application do$/;"	f
application	deps/exq/mix.exs	/^  def application do$/;"	f
application	deps/phoenix/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_ecto/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_html/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_live_reload/mix.exs	/^  def application do$/;"	f
application	deps/plug/mix.exs	/^  def application do$/;"	f
application	deps/poison/mix.exs	/^  def application do$/;"	f
application	deps/postgrex/mix.exs	/^  def application do$/;"	f
application	deps/timex/mix.exs	/^  def application do$/;"	f
application	deps/tzdata/mix.exs	/^  def application do$/;"	f
application	deps/uuid/mix.exs	/^  def application do$/;"	f
application	mix.exs	/^  def application do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def apply(query, distinct) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(query, :having, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(query, :where, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/from.ex	/^  def apply(query, binds) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/join.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def apply(query, :limit, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def apply(query, :offset, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def apply(query, value) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def apply(query, preloads, assocs) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/select.ex	/^  def apply(query, select) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/update.ex	/^  def apply(query, updates) do$/;"	f
apply	deps/ecto/lib/ecto/repo/model.ex	/^  defp apply(changeset, _adapter, :noop, _args) do$/;"	f
apply	deps/ecto/lib/ecto/repo/model.ex	/^  defp apply(changeset, adapter, action, args) do$/;"	f
apply	deps/timex/lib/parse/datetime/tokenizer.ex	/^  defcallback apply(Timex.DateTime.t, token :: atom, value :: term) :: Timex.DateTime.t | {:error, term} | :unrecognized$/;"	c
apply	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def apply(_, _, _), do: :unrecognized$/;"	f
apply	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def apply(_, _, _), do: :unrecognized$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset.ex	/^  def apply_changes(%Changeset{changes: changes, model: model, types: types}) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset.ex	/^  def apply_changes(%Changeset{changes: changes, model: model}) when changes == %{} do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :many}, changesets) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :one}, changeset) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :one}, nil) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp apply_changes(%Changeset{action: :delete}), do: nil$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp apply_changes(changeset), do: Changeset.apply_changes(changeset)$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([], %DateTime{timezone: nil} = date, tokenizer) do$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([], %DateTime{} = date, _), do: {:ok, date}$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([], _),             do: {:ok, %DateTime{}}$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([{token, value}|tokens], %DateTime{} = date, tokenizer) do$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives(tokens, tokenizer), do: apply_directives(tokens, %DateTime{}, tokenizer)$/;"	f
apply_query	deps/ecto/lib/ecto/query/builder.ex	/^  def apply_query(query, module, args, env) do$/;"	f
archive_content_length	deps/tzdata/lib/tzdata/release_reader.ex	/^  def archive_content_length, do: simple_lookup(:archive_content_length) |> hd |> elem(1)$/;"	f
args	deps/plug/lib/plug/adapters/cowboy.ex	/^  def args(scheme, plug, opts, cowboy_options) do$/;"	f
array	deps/ecto/lib/ecto/type.ex	/^  defp array([], _fun, acc) do$/;"	f
array	deps/ecto/lib/ecto/type.ex	/^  defp array([h|t], fun, acc) do$/;"	f
array_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp array_elements(<<-1 :: int32, rest :: binary>>, count, acc, decoder) do$/;"	f
array_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp array_elements(<<size :: int32, elem :: binary(size), rest :: binary>>,$/;"	f
array_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp array_elements(rest, 0, acc, _decoder) do$/;"	f
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values("]" <> rest, _, []) do$/;"	f
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values(string, keys, acc) do$/;"	f
ask	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  defp ask(pool, fun, timeout) do$/;"	f
ask	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp ask(%{ref: nil} = s) do$/;"	f
assemble	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp assemble(list) do$/;"	f
assemble	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp assemble(list) do$/;"	f
assert_assoc!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_assoc!(_mode, atom, var) do$/;"	f
assert_assoc!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_assoc!(mode, _atom, _var) when mode in [:both, :assoc], do: :ok$/;"	f
assert_broadcast	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_broadcast(event, payload, timeout \\\\ 100) do$/;"	a
assert_empty_relation!	deps/ecto/lib/ecto/repo/model.ex	/^  defp assert_empty_relation!(struct, relation, types) do$/;"	f
assert_exq_up	deps/exq/test/test_helper.exs	/^  def assert_exq_up(exq) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file, callback) when is_function(callback, 1) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file, match) do$/;"	f
assert_joined!	deps/phoenix/lib/phoenix/channel.ex	/^  defp assert_joined!(%Socket{joined: false}) do$/;"	f
assert_joined!	deps/phoenix/lib/phoenix/channel.ex	/^  defp assert_joined!(%Socket{joined: true} = socket) do$/;"	f
assert_model!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp assert_model!(query) do$/;"	f
assert_no_update!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_no_update!(query, operation) do$/;"	f
assert_only_filter_expressions!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_only_filter_expressions!(query, operation) do$/;"	f
assert_preload!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_preload!(_mode, term) do$/;"	f
assert_preload!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_preload!(mode, _term) when mode in [:both, :preload], do: :ok$/;"	f
assert_push	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_push(event, payload, timeout \\\\ 100) do$/;"	a
assert_replace_strategy!	deps/ecto/lib/ecto/type.ex	/^  defp assert_replace_strategy!(%{strategy: :replace}), do: :ok$/;"	f
assert_replace_strategy!	deps/ecto/lib/ecto/type.ex	/^  defp assert_replace_strategy!(%{strategy: strategy, field: field}) do$/;"	f
assert_reply	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_reply(ref, status, payload \\\\ Macro.escape(%{}), timeout \\\\ 100) do$/;"	a
assert_ssl_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp assert_ssl_options(cowboy_options) do$/;"	f
assert_struct!	deps/ecto/lib/ecto/model.ex	/^  defp assert_struct!(model, %{__struct__: struct}) do$/;"	f
assert_struct!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assert_struct!(model, %{__struct__: struct}) do$/;"	f
assert_terminate	deps/exq/test/worker_test.exs	/^  def assert_terminate(worker, normal_terminate) do$/;"	f
assert_transaction	deps/ecto/integration_test/sql/test_transaction.exs	/^  defp assert_transaction(mode) do$/;"	f
assert_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp assert_type!(_expr, {int, _field}, _actual) when is_integer(int) do$/;"	f
assert_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp assert_type!(expr, type, actual) do$/;"	f
assert_update!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_update!(%Ecto.Query{updates: updates} = query, operation) do$/;"	f
assign	deps/phoenix/lib/phoenix/socket.ex	/^  def assign(socket = %Socket{}, key, value) do$/;"	f
assign	deps/plug/lib/plug/conn.ex	/^  def assign(%Conn{assigns: assigns} = conn, key, value) when is_atom(key) do$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list([], value), do: value$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list(t, current, value) do$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list(t, value),  do: assign_parts(t, value, %{})$/;"	f
assign_model	deps/phoenix/lib/phoenix/view.ex	/^  defp assign_model(assigns, view, model) do$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key,""|t], value, acc) do$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key], value, acc) do$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key|t], value, acc) do$/;"	f
assoc	deps/ecto/lib/ecto/model.ex	/^  def assoc(model_or_models, assoc) do$/;"	f
assoc_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def assoc_constraint(changeset, assoc, opts \\\\ []) do$/;"	f
assoc_dict	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assoc_dict(:many, key, structs) do$/;"	f
assoc_dict	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assoc_dict(:one, key, structs) do$/;"	f
assoc_from_model	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_model(%{__meta__: %{state: :built}}, %Ecto.Association.NotLoaded{}, _field), do: nil$/;"	f
assoc_from_model	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_model(%{__struct__: struct}, %Ecto.Association.NotLoaded{}, field) do$/;"	f
assoc_from_model	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_model(_model, value, _field) do$/;"	f
assoc_from_model	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_model(model, field) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{owner: owner, through: [h|t]}, %Ecto.Query{} = query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(refl, query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(refl, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  defcallback assoc_query(t, Ecto.Query.t, values :: [term]) :: Ecto.Query.t$/;"	c
assoc_query	deps/ecto/lib/ecto/association.ex	/^  defcallback assoc_query(t, values :: [term]) :: Ecto.Query.t$/;"	c
assoc_to_join	deps/ecto/lib/ecto/association.ex	/^  defp assoc_to_join(%{from: from, wheres: [on], order_bys: [], joins: []}, position) do$/;"	f
associate_extensions_with_types	deps/postgrex/lib/postgrex/types.ex	/^  def associate_extensions_with_types(table, extensions, extension_opts, types) do$/;"	f
association	deps/ecto/lib/ecto/schema.ex	/^  defp association(mod, cardinality, name, association, opts) do$/;"	f
association_from_model!	deps/ecto/lib/ecto/association.ex	/^  def association_from_model!(model, assoc) do$/;"	f
association_key	deps/ecto/lib/ecto/association.ex	/^  def association_key(module, suffix) do$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs([], _names),    do: []$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs(assocs) do$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs(assocs, names), do: [preload: expr(assocs(assocs), names, %{})]$/;"	f
assocs	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp assocs(assocs) do$/;"	f
async_assign	deps/plug/lib/plug/conn.ex	/^  def async_assign(%Conn{} = conn, key, fun) when is_atom(key) and is_function(fun, 0) do$/;"	f
at_least_four	deps/ecto/lib/ecto/query.ex	/^      def at_least_four(doors_or_tires) do$/;"	f
at_least_four	deps/ecto/lib/ecto/query/api.ex	/^      def at_least_four(doors_or_tires) do$/;"	f
attempt	deps/ecto/lib/ecto/migrator.ex	/^  defp attempt(repo, module, direction, operation, reference, opts) do$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(nil),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(other) when is_binary(other),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(other),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape({:safe, data}),$/;"	f
attrs	deps/phoenix/lib/mix/phoenix.ex	/^  def attrs(attrs) do$/;"	f
authenticate	deps/phoenix/lib/phoenix/controller.ex	/^        defp authenticate(conn, options) do$/;"	f
authorized?	_build/dev/lib/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  defp authorized?(_payload) do$/;"	f
authorized?	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  defp authorized?(_payload) do$/;"	f
autogenerate	deps/ecto/lib/ecto/model/autogenerate.ex	/^  def autogenerate(changeset, autogenerate) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/schema.ex	/^  defp autogenerate_id(type) do$/;"	f
available_modules	deps/timex/lib/utils/utils.ex	/^  defp available_modules(plugin_type) do$/;"	f
available_queues	deps/exq/lib/exq/manager/server.ex	/^  def available_queues(state) do$/;"	f
available_templates	deps/phoenix/lib/phoenix/template.ex	/^    defp available_templates([]), do: "No templates were compiled for this module."$/;"	f
available_templates	deps/phoenix/lib/phoenix/template.ex	/^    defp available_templates(available) do$/;"	f
avg	deps/ecto/lib/ecto/query/api.ex	/^  def avg(value), do: doc! [value]$/;"	f
await_assign	deps/plug/lib/plug/conn.ex	/^  def await_assign(%Conn{} = conn, key, timeout \\\\ 5000) when is_atom(key) do$/;"	f
backoff	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp backoff(%{tag: tag} = s) do$/;"	f
base	deps/phoenix/lib/mix/phoenix.ex	/^  def base do$/;"	f
base?	deps/ecto/lib/ecto/type.ex	/^  def base?(atom), do: atom in @base$/;"	f
base_10?	deps/decimal/lib/decimal.ex	/^  defp base_10?(1), do: true$/;"	f
base_10?	deps/decimal/lib/decimal.ex	/^  defp base_10?(num) do$/;"	f
beam_to_module	deps/phoenix/lib/mix/phoenix.ex	/^  defp beam_to_module(path) do$/;"	f
before_delete	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_delete(function, args \\\\ []),$/;"	a
before_delete	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_delete(module, function, args),$/;"	a
before_insert	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_insert(function, args \\\\ []),$/;"	a
before_insert	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_insert(module, function, args),$/;"	a
before_send	deps/plug/lib/plug/session.ex	/^  defp before_send(sid, config) do$/;"	f
before_send_inject_reloader	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  defp before_send_inject_reloader(conn) do$/;"	f
before_update	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_update(function, args \\\\ []),$/;"	a
before_update	deps/ecto/lib/ecto/model/callbacks.ex	/^  defmacro before_update(module, function, args),$/;"	a
begin	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp begin(repo, mod, mode, queue_time, opts) do$/;"	f
begin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def begin(pool, log, opts, timeout) do$/;"	f
begin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp begin(%{ref: nil, mode: :raw, module: module} = s, query!) do$/;"	f
begin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp begin(%{ref: nil, mode: :sandbox} = s, _) do$/;"	f
begin_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp begin_sql(mod, :raw),     do: mod.begin_transaction$/;"	f
begin_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp begin_sql(mod, :sandbox), do: mod.savepoint "ecto_trans"$/;"	f
begin_test_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  def begin_test_transaction(repo, opts \\\\ []) do$/;"	f
begin_transaction	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def begin_transaction do$/;"	f
begin_transaction	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def begin_transaction do$/;"	f
begin_transaction	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback begin_transaction :: String.t$/;"	c
belongs_to	deps/ecto/lib/ecto/schema.ex	/^  defmacro belongs_to(name, queryable, opts \\\\ []) do$/;"	a
bigger_than	deps/tzdata/lib/tzdata.ex	/^  defp bigger_than(:max, _), do: true$/;"	f
bigger_than	deps/tzdata/lib/tzdata.ex	/^  defp bigger_than(first, second), do: first > second$/;"	f
bin_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp bin_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
bin_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp bin_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
binary	deps/postgrex/lib/postgrex/binary_utils.ex	/^  defmacro binary(size) do$/;"	a
binary	deps/postgrex/lib/postgrex/binary_utils.ex	/^  defmacro binary(size, unit) do$/;"	a
binary_to_hex_list	deps/uuid/lib/uuid.ex	/^  defp binary_to_hex_list(binary) do$/;"	f
binary_to_identifier	deps/plug/lib/plug/router/utils.ex	/^  defp binary_to_identifier(prefix, <<letter, _::binary>> = binary)$/;"	f
binary_to_identifier	deps/plug/lib/plug/router/utils.ex	/^  defp binary_to_identifier(prefix, _) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(<<uuid::binary>>, format) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(_, _) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(uuid, format \\\\ :default)$/;"	f
bingenerate	deps/ecto/lib/ecto/adapters/sql.ex	/^  def bingenerate(key) do$/;"	f
bingenerate	deps/ecto/lib/ecto/uuid.ex	/^  def bingenerate do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(body, _query, headers) when is_binary(body) do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(nil, _query, headers),$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(params, query, headers) when is_list(params) do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(params, query, headers) when is_map(params) do$/;"	f
boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp boolean(_name, [], _sources, _query), do: []$/;"	f
boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp boolean(name, query_exprs, sources, query) do$/;"	f
boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp boolean(_name, [], _sources, _query), do: []$/;"	f
boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp boolean(name, query_exprs, sources, query) do$/;"	f
boom	deps/plug/lib/plug/debugger.ex	/^        def boom(conn, _) do$/;"	f
bootstrap	deps/postgrex/lib/postgrex/protocol.ex	/^  def bootstrap(s) do$/;"	f
bootstrap_query	deps/postgrex/lib/postgrex/types.ex	/^  def bootstrap_query(m, version) do$/;"	f
bound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp bound_from(from, name), do: ["from #{name} in #{unbound_from from}"]$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(:max), do: :max$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(:min), do: :min$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(secs), do: :calendar.gregorian_seconds_to_datetime(trunc(secs))$/;"	f
break	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def break(pool, ref, timeout) do$/;"	f
break	deps/ecto/lib/ecto/pool.ex	/^  def break({__MODULE__, pool_mod, pool} = ref, timeout) do$/;"	f
break	deps/ecto/lib/ecto/pool.ex	/^  defcallback break(t, worker, timeout) :: :ok when worker: any$/;"	c
break	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def break(pool, worker, timeout) do$/;"	f
break	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def break(worker, timeout) do$/;"	f
break	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def break(_, {worker, ref}, timeout) do$/;"	f
break	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def break(worker, ref, _) do$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast(socket, event, message) do$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast(_, _, _, _), do: raise_invalid_message$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast(pubsub_server, topic, event, payload)$/;"	f
broadcast	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast(topic, event, msg) do$/;"	f
broadcast	deps/phoenix/lib/phoenix/pubsub.ex	/^  def broadcast(server, topic, message) when is_atom(server),$/;"	f
broadcast	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def broadcast(local_server, from, topic, %Broadcast{event: event} = msg)$/;"	f
broadcast	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def broadcast(local_server, from, topic, msg) when is_atom(local_server) do$/;"	f
broadcast	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^  def broadcast(name, local_name, from_pid, topic, msg) do$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast!(socket, event, message) do$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast!(_, _, _, _), do: raise_invalid_message$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast!(pubsub_server, topic, event, payload)$/;"	f
broadcast!	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast!(topic, event, msg) do$/;"	f
broadcast!	deps/phoenix/lib/phoenix/pubsub.ex	/^  def broadcast!(server, topic, message) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast_from(socket, event, message) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from(_, _, _, _, _), do: raise_invalid_message$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from(pubsub_server, from, topic, event, payload)$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast_from(from, topic, event, msg) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/pubsub.ex	/^  def broadcast_from(server, from_pid, topic, message) when is_atom(server) and is_pid(from_pid),$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def broadcast_from(socket, event, message) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast_from!(socket, event, message) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from!(_, _, _, _, _), do: raise_invalid_message$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from!(pubsub_server, from, topic, event, payload)$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast_from!(from, topic, event, msg) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/pubsub.ex	/^  def broadcast_from!(server, from_pid, topic, message) when is_atom(server) and is_pid(from_pid) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def broadcast_from!(socket, event, message) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp broadcast_from!(_endpoint, pid, msg) when is_pid(pid),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp broadcast_from!(endpoint, topic, msg) when is_binary(topic),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp broadcast_from!(_state, client_ref, msg) when is_pid(client_ref),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp broadcast_from!(state, client_ref, msg) when is_binary(client_ref),$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{field: name}, %{__struct__: struct}, _attributes) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{owner_key: owner_key, related_key: related_key} = refl, struct, attributes) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{related: related, queryable: queryable, defaults: defaults}) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  defcallback build(t, Ecto.Model.t, %{atom => term} | [Keyword.t]) :: Ecto.Model.t$/;"	c
build	deps/ecto/lib/ecto/changeset/relation.ex	/^  defcallback build(t) :: Ecto.Model.t$/;"	c
build	deps/ecto/lib/ecto/embedded.ex	/^  def build(%Embedded{related: related}) do$/;"	f
build	deps/ecto/lib/ecto/model.ex	/^  def build(%{__struct__: model} = struct, assoc, attributes \\\\ %{}) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def build(kind, query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/from.ex	/^  def build(expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/join.ex	/^  def build(query, qual, binding, expr, on, count_bind, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def build(type, query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def build(query, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/select.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/update.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/phoenix/lib/phoenix/router/resource.ex	/^  def build(path, controller, options) when$/;"	f
build	deps/phoenix/lib/phoenix/router/route.ex	/^  def build(kind, verb, path, host, plug, opts, helper, pipe_through, private, assigns)$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(_tag, []), do: ""$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(_tag, [], acc),$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{_, false}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{_, nil}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, true}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, v}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, v}|t], acc) when k in @tag_prefixes and is_list(v) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, attrs), do: build_attrs(tag, attrs, [])$/;"	f
build_changeset!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp build_changeset!(new, current, fun, allowed_actions) do$/;"	f
build_conn_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_conn_forward_path(%Conn{private: %{phoenix_router: phx_router}} = conn, router, path) do$/;"	f
build_conn_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_conn_forward_path(_conn, _router, _path), do: nil$/;"	f
build_dispatch	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_dispatch(route, binding) do$/;"	f
build_host	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_host(host) do$/;"	f
build_host_match	deps/plug/lib/plug/router/utils.ex	/^  def build_host_match(host) do$/;"	f
build_match	deps/phoenix/lib/phoenix/router.ex	/^  defp build_match({_route, exprs}) do$/;"	f
build_meta	deps/ecto/lib/ecto/query/planner.ex	/^  defp build_meta(%{prefix: prefix, sources: sources,$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods([], guards) do$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods([method], guards) do$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods(methods, guards) do$/;"	f
build_own_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_own_forward_path(conn, router, path) do$/;"	f
build_path_and_binding	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_path_and_binding(%Route{path: path} = route) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  def build_path_match(spec, context \\\\ nil) when is_binary(spec) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  defp build_path_match([], _context, vars, acc) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  defp build_path_match([h|t], context, vars, acc) do$/;"	f
build_pipes	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_pipes(%Route{kind: :forward} = route) do$/;"	f
build_pipes	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_pipes(route) do$/;"	f
build_ref	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp build_ref(plug, scheme) do$/;"	f
build_types	deps/postgrex/lib/postgrex/types.ex	/^  def build_types(rows) do$/;"	f
build_url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp build_url(endpoint, url) do$/;"	f
build_url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp build_url(https, http, url) do$/;"	f
bump_client_last_active	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp bump_client_last_active(state) do$/;"	f
busy	deps/exq/lib/exq/api.ex	/^  def busy(pid) do$/;"	f
busy	deps/exq/lib/exq/enqueuer.ex	/^  def busy(pid) do$/;"	f
busy	deps/exq/lib/exq/stats/server.ex	/^  def busy(redis, namespace) do$/;"	f
button	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def button(text, opts) do$/;"	f
by_group	deps/tzdata/lib/tzdata/release_reader.ex	/^  def by_group,               do: simple_lookup(:by_group) |> hd |> elem(1)$/;"	f
bytes	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmacrop bytes(size) do$/;"	a
cache	deps/phoenix/lib/phoenix/config.ex	/^  def cache(module, key, fun) do$/;"	f
cache_lookup	deps/ecto/lib/ecto/query/planner.ex	/^  defp cache_lookup(repo, table, key) do$/;"	f
cache_static_manifest	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp cache_static_manifest(endpoint) do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, [zone_line_hd|zone_line_tl], from, zone_hd_rules, letter) do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, [zone_line_hd|zone_line_tl], from, zone_hd_rules, letter) when zone_hd_rules == nil do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, zone_name) do$/;"	f
calc_periods_for_year	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods_for_year(btz_data, [zone_line|zone_line_tl], from, utc_off, std_off, years, zone_rules, rules_for_year, letter) do$/;"	f
calc_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_periods_h(btz_data, zone_name) do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(_btz_data, zone_lines, from, utc_off, std_off, years, _, letter) when length(zone_lines)==1 and years ==[] do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(btz_data, [zone_line|zone_line_tl], from, utc_off, std_off, years, _, letter) when years==[] do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(btz_data, zone_lines, from, utc_off, std_off, [years_hd|years_tl], zone_rules, letter) do$/;"	f
calc_rule_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_rule_periods_h(btz_data, :amount, rules_value, [zone_line_hd|zone_line_tl], from, _, _, _, letter) do$/;"	f
calc_rule_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_rule_periods_h(btz_data, :named_rules, rules_value, [zone_line_hd|zone_line_tl], from, utc_off, std_off, years_to_use, letter) do$/;"	f
calculate_column_widths	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp calculate_column_widths(routes) do$/;"	f
calendar_gregorian_microseconds_to_datetime	deps/timex/lib/date/date.ex	/^  defp calendar_gregorian_microseconds_to_datetime(us, addseconds) do$/;"	f
calendar_local_time	deps/timex/lib/date/date.ex	/^  defp calendar_local_time() do$/;"	f
calendar_universal_time	deps/timex/lib/date/date.ex	/^  defp calendar_universal_time() do$/;"	f
call	deps/exq/test/ui_test.exs	/^  defp call(conn) do$/;"	f
call	deps/exq/web/json_api.ex	/^  def call(conn, opts) do$/;"	f
call	deps/exq/web/router.ex	/^  def call(conn, opts) do$/;"	f
call	deps/exq/web/static_root.ex	/^  def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/code_reloader.ex	/^  def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/controller/logger.ex	/^  def call(conn, false) do$/;"	f
call	deps/phoenix/lib/phoenix/controller/logger.ex	/^  def call(conn, level) do$/;"	f
call	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def call(conn, action) do$/;"	f
call	deps/phoenix/lib/phoenix/endpoint.ex	/^      def call(conn, _opts) do$/;"	f
call	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^      def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/pubsub.ex	/^  defp call(server, kind, args) do$/;"	f
call	deps/phoenix/lib/phoenix/router.ex	/^      def call(conn, opts), do: do_call(conn, opts)$/;"	f
call	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def call(conn, {endpoint, handler, transport}) do$/;"	f
call	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  def call(%Plug.Conn{path_info: ["phoenix", "live_reload", "frame"]} = conn, _opts) do$/;"	f
call	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  def call(conn, _opts) do$/;"	f
call	deps/plug/lib/plug.ex	/^        def call(conn, _opts) do$/;"	f
call	deps/plug/lib/plug.ex	/^  defcallback call(Plug.Conn.t, opts) :: Plug.Conn.t$/;"	c
call	deps/plug/lib/plug/builder.ex	/^        def call(conn, _opts) do$/;"	f
call	deps/plug/lib/plug/builder.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/csrf_protection.ex	/^  def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/debugger.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/error_handler.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/head.ex	/^  def call(%Conn{method: "HEAD"} = conn, []), do: %{conn | method: "GET"}$/;"	f
call	deps/plug/lib/plug/head.ex	/^  def call(conn, []), do: conn$/;"	f
call	deps/plug/lib/plug/logger.ex	/^  def call(conn, level) do$/;"	f
call	deps/plug/lib/plug/method_override.ex	/^  def call(%Plug.Conn{method: "POST", body_params: body_params} = conn, []),$/;"	f
call	deps/plug/lib/plug/method_override.ex	/^  def call(%Plug.Conn{} = conn, []),$/;"	f
call	deps/plug/lib/plug/parsers.ex	/^  def call(%Conn{body_params: %Plug.Conn.Unfetched{}} = conn, _opts) do$/;"	f
call	deps/plug/lib/plug/parsers.ex	/^  def call(%Conn{req_headers: req_headers, method: method,$/;"	f
call	deps/plug/lib/plug/parsers.ex	/^  def call(%Conn{} = conn, _opts) do$/;"	f
call	deps/plug/lib/plug/request_id.ex	/^  def call(conn, req_id_header) do$/;"	f
call	deps/plug/lib/plug/session.ex	/^  def call(conn, config) do$/;"	f
call	deps/plug/lib/plug/ssl.ex	/^  def call(conn, {hsts, host, rewrites}) do$/;"	f
call	deps/plug/lib/plug/static.ex	/^  def call(conn = %Conn{method: meth}, {at, from, gzip, qs_cache, et_cache, only, headers})$/;"	f
call	deps/plug/lib/plug/static.ex	/^  def call(conn, _opts) do$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(:is_nil, 1),                                     do: {:any, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(:not, 1),                                        do: {:boolean, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(_, _),                                           do: nil$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(agg, 1)  when agg in ~w(max count sum min avg)a, do: {:any, :any}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(bool, 2) when bool in ~w(and or)a,               do: {:boolean, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(comp, 2) when comp in ~w(== != < > <= >=)a,      do: {:any, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(like, 2) when like in ~w(like ilike)a,           do: {:string, :boolean}$/;"	f
callback_for	deps/ecto/lib/ecto/embedded.ex	/^    defp callback_for(unquote(type), unquote(action)), do: unquote(:"#{type}_#{action}")$/;"	f
callback_for	deps/ecto/lib/ecto/embedded.ex	/^  defp callback_for(_type, nil) do$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(""), do: ""$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(<<?_, t :: binary>>) do$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(<<h, t :: binary>>) do$/;"	f
cancel	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp cancel(_, _) do$/;"	f
cancel	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp cancel({:checkout, _, ref, _, mon}, ref) do$/;"	f
cancel_or_await	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp cancel_or_await(%{broker: broker, tag: tag}) do$/;"	f
cancel_timer	deps/postgrex/lib/postgrex/type_server.ex	/^  defp cancel_timer(nil), do: :ok$/;"	f
cancel_timer	deps/postgrex/lib/postgrex/type_server.ex	/^  defp cancel_timer({_, timer}), do: :erlang.cancel_timer(timer)$/;"	f
canonical_zone?	deps/tzdata/lib/tzdata.ex	/^  def canonical_zone?(name), do: Enum.member?(canonical_zone_list, name)$/;"	f
canonical_zone_list	deps/tzdata/lib/tzdata.ex	/^  def canonical_zone_list, do: Tzdata.ReleaseReader.zone_list$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("apr"), do: 4$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("aug"), do: 8$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("dec"), do: 12$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("feb"), do: 2$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jan"), do: 1$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jul"), do: 7$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jun"), do: 6$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("mar"), do: 3$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("may"), do: 5$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("nov"), do: 11$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("oct"), do: 10$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("sep"), do: 9$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name(string), do: to_int(string)$/;"	f
captured_zone_map_clean_up	deps/tzdata/lib/tzdata/parser.ex	/^  defp captured_zone_map_clean_up(captured) do$/;"	f
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(_), do: :error$/;"	f
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(string) when is_binary(string) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(%Changeset{changes: changes, model: model} = changeset, params, required, optional) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(%{__struct__: _} = model, params, required, optional) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(_model, %{__struct__: _} = params, _required, _optional) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(model_or_changeset, params, required, optional \\\\ [])$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  defp cast(%{__struct__: module} = model, %{} = changes, %{} = params, required, optional)$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  defp cast(%{__struct__: module} = model, %{} = changes, :empty, required, optional)$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{cardinality: :many} = relation, params, current) when is_map(params) do$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{cardinality: :one} = relation, nil, current) do$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{related: model} = relation, params, current) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%Ecto.DateTime{} = dt) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%Ecto.Date{} = d),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%Ecto.Time{} = t),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{"hour" => hour, "min" => min} = map),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{"year" => year, "month" => month, "day" => day, "hour" => hour, "min" => min} = map) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{"year" => year, "month" => month, "day" => day}),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{hour: hour, min: min} = map),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{year: year, month: month, day: day, hour: hour, min: min} = map) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(%{year: year, month: month, day: day}),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(<<hour::2-bytes, ?:, min::2-bytes, ?:, sec::2-bytes, rest::binary>>) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(<<year::4-bytes, ?-, month::2-bytes, ?-, day::2-bytes, sep,$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(<<year::4-bytes, ?-, month::2-bytes, ?-, day::2-bytes>>),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(_) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast(_),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast({hour, min, sec, usec}),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast({hour, min, sec}),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast({year, month, day}),$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast({{year, month, day}, {hour, min, sec, usec}}) do$/;"	f
cast	deps/ecto/lib/ecto/datetime.ex	/^  def cast({{year, month, day}, {hour, min, sec}}) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(_), do: :error$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(string) when is_binary(string) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:binary_id, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:boolean, term) when term in ~w(false 0), do: {:ok, false}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:boolean, term) when term in ~w(true 1),  do: {:ok, true}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:decimal, term) when is_binary(term) or is_number(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:float, term) when is_binary(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:float, term) when is_integer(term), do: {:ok, term + 0.0}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(_type, nil), do: {:ok, nil}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(type, term) when type in [:id, :integer] and is_binary(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(type, value) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:array, type}, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:embed, _}, _) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  defcallback cast(term) :: {:ok, term} | :error$/;"	c
cast	deps/ecto/lib/ecto/uuid.ex	/^  def cast(<< _::64, ?-, _::32, ?-, _::32, ?-, _::32, ?-, _::96 >> = u), do: {:ok, u}$/;"	f
cast	deps/ecto/lib/ecto/uuid.ex	/^  def cast(_), do: :error$/;"	f
cast_and_merge_params	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_and_merge_params(kind, query, expr, params, adapter) do$/;"	f
cast_field	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_field(param_key, type, params, current, _model, valid?) do$/;"	f
cast_field	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_field(param_key, {tag, relation}, params, current, model, valid?)$/;"	f
cast_key	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_key(key) when is_atom(key),$/;"	f
cast_key	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_key(key) when is_binary(key),$/;"	f
cast_merge	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_merge(cs1, cs2) do$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(%{cardinality: :many}, value, current, param_pks, pks, fun) when is_list(value) do$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(%{cardinality: :one} = relation, value, current, param_pks,$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(_, _, _, _, _, _), do: :error$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, query, expr, v, type, adapter) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, type, nil) when kind != :update do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, type, v) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, {:in_array, :any}, value) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, {:in_array, other}, value) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, {:in_array, {:array, type}}, value) do$/;"	f
century	deps/timex/lib/date/date.ex	/^  def century(%DateTime{:year => y}) do$/;"	f
century	deps/timex/lib/date/date.ex	/^  def century(), do: Date.now |> century$/;"	f
century	deps/timex/lib/parse/datetime/parsers.ex	/^  def century(opts \\\\ []) do$/;"	f
change	_build/dev/lib/phoenix/priv/templates/phoenix.gen.model/migration.exs	/^  def change do$/;"	f
change	deps/ecto/integration_test/cases/migrator.exs	/^    def change do$/;"	f
change	deps/ecto/integration_test/sql/migration.exs	/^    def change do$/;"	f
change	deps/ecto/integration_test/support/migration.exs	/^  def change do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%Changeset{changes: changes, types: types} = changeset, new_changes)$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%Changeset{types: nil}, _changes) do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%{__struct__: struct} = model, changes) when is_map(changes) do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(model_or_changeset, changes \\\\ %{})$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(model_or_changeset, changes) when is_list(changes) do$/;"	f
change	deps/ecto/lib/ecto/changeset/relation.ex	/^  def change(%{related: mod} = relation, model, value, current) do$/;"	f
change	deps/ecto/lib/ecto/changeset/relation.ex	/^  def change(_relation, _model, nil, nil), do: {:ok, nil, false, true}$/;"	f
change	deps/ecto/lib/ecto/migration.ex	/^        def change do$/;"	f
change	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^    def change do$/;"	f
change	deps/phoenix/priv/templates/phoenix.gen.model/migration.exs	/^  def change do$/;"	f
change_as_field	deps/ecto/lib/ecto/changeset.ex	/^  defp change_as_field(types, key, value) do$/;"	f
changeset	_build/dev/lib/phoenix/priv/templates/phoenix.gen.model/model.ex	/^  def changeset(model, params \\\\ :empty) do$/;"	f
changeset	deps/ecto/integration_test/support/models.exs	/^  def changeset(model, params) do$/;"	f
changeset	deps/ecto/lib/ecto.ex	/^        def changeset(user, params \\\\ :empty) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^                  def changeset(model, params) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^        def changeset(user, params \\\\ :empty) do$/;"	f
changeset	deps/phoenix/priv/templates/phoenix.gen.model/model.ex	/^  def changeset(model, params \\\\ :empty) do$/;"	f
changeset	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def changeset(user, params \\\\ :empty) do$/;"	f
channel	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro channel(topic_pattern, module, opts \\\\ []) do$/;"	a
channel	web/web.ex	/^  def channel do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char() do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char(c) when is_integer(c) do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char(parser) when is_function(parser, 1) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, column: col, input: <<c::utf8,rest::binary>>, results: results} = state, c) when is_integer(c) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, input: <<>>} = state, c) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, line: line, column: col, input: <<next::utf8,_::binary>>} = state, c) do$/;"	f
check_action!	deps/ecto/lib/ecto/association.ex	/^  defp check_action!(:delete, :insert, %{related: model}),$/;"	f
check_action!	deps/ecto/lib/ecto/association.ex	/^  defp check_action!(_, _, _), do: :ok$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(:delete, :insert, %{related: model}),$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(:update, :insert, %{related: model}),$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(_, _, _), do: :ok$/;"	f
check_binds	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp check_binds(query, count) do$/;"	f
check_default!	deps/ecto/lib/ecto/schema.ex	/^  defp check_default!(_name, :binary_id, _default), do: :ok$/;"	f
check_default!	deps/ecto/lib/ecto/schema.ex	/^  defp check_default!(_name, {:embed, _}, _default), do: :ok$/;"	f
check_default!	deps/ecto/lib/ecto/schema.ex	/^  defp check_default!(name, type, default) do$/;"	f
check_if_time_to_update	deps/tzdata/lib/tzdata/release_updater.ex	/^  def check_if_time_to_update do$/;"	f
check_module_name_availability!	deps/phoenix/lib/mix/phoenix.ex	/^  def check_module_name_availability!(name) do$/;"	f
check_options!	deps/ecto/lib/ecto/schema.ex	/^  defp check_options!(opts, valid, fun_arity) do$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(%Plug.Conn{halted: true} = conn, _handler, _endpoint, _opts, _sender),$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(conn, handler, endpoint, opts, sender \\\\ &Plug.Conn.send_resp\/1)$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(conn, handler, endpoint, opts, sender) do$/;"	f
check_origin_config	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp check_origin_config(handler, endpoint, opts) do$/;"	f
check_serializer	deps/plug/lib/plug/session/cookie.ex	/^  defp check_serializer(_), do:$/;"	f
check_serializer	deps/plug/lib/plug/session/cookie.ex	/^  defp check_serializer(serializer) when is_atom(serializer), do: serializer$/;"	f
check_signing_salt	deps/plug/lib/plug/session/cookie.ex	/^  defp check_signing_salt(opts) do$/;"	f
check_type!	deps/ecto/lib/ecto/schema.ex	/^  defp check_type!(name, type, virtual?) do$/;"	f
checkbox	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def checkbox(form, field, opts \\\\ []) do$/;"	f
checkin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def checkin(pool, ref, _) do$/;"	f
checkin	deps/ecto/lib/ecto/pool.ex	/^  defcallback checkin(t, worker, timeout) :: :ok when worker: any$/;"	c
checkin	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def checkin(pool, worker, _) do$/;"	f
checkin	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def checkin(worker) do$/;"	f
checkin	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def checkin(_, {worker, ref}, _) do$/;"	f
checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def checkout(pool, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp checkout(pool, fun, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/pool.ex	/^  defcallback checkout(t, timeout) ::$/;"	c
checkout	deps/ecto/lib/ecto/pool.ex	/^  defp checkout(pool_mod, pool, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def checkout(pool, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/pools/poolboy.ex	/^  defp checkout(pool, fun, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def checkout(worker, fun, timeout) do$/;"	f
checkout	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def checkout(pool, timeout) do$/;"	f
child_spec	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  def child_spec(scheme, endpoint, config) do$/;"	f
child_spec	deps/plug/lib/plug/adapters/cowboy.ex	/^  def child_spec(scheme, plug, opts, cowboy_options \\\\ []) do$/;"	f
chunk	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def chunk(req, body) do$/;"	f
chunk	deps/plug/lib/plug/adapters/test/conn.ex	/^  def chunk(%{chunks: chunks} = state, body) do$/;"	f
chunk	deps/plug/lib/plug/adapters/test/conn.ex	/^  def chunk(%{method: "HEAD"} = state, _body),$/;"	f
chunk	deps/plug/lib/plug/conn.ex	/^  def chunk(%Conn{adapter: {adapter, payload}, state: :chunked} = conn, chunk) do$/;"	f
chunk	deps/plug/lib/plug/conn.ex	/^  def chunk(%Conn{}, chunk) when is_binary(chunk) or is_list(chunk) do$/;"	f
chunk	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback chunk(payload, Conn.status) ::$/;"	c
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size("", _, acc), do: acc$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<_ :: utf8>> <> _, :unicode, acc) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char :: utf8>> <> _, :javascript, acc) when char in [0x2028, 0x2029] do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> _, _mode, acc) when char < 0x1F or char in '"\\\\' do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> rest, mode, acc) when char < 0x80 do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>>, _, _) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<codepoint :: utf8>> <> rest, mode, acc) do$/;"	f
clean_opts	deps/postgrex/lib/postgrex/protocol.ex	/^  defp clean_opts(opts) do$/;"	f
clear_cache	deps/phoenix/lib/phoenix/config.ex	/^  def clear_cache(module) do$/;"	f
clear_failed	deps/exq/lib/exq/api.ex	/^  def clear_failed(pid) do$/;"	f
clear_failed	deps/exq/lib/exq/stats/server.ex	/^  def clear_failed(redis, namespace) do$/;"	f
clear_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def clear_flash(conn) do$/;"	f
clear_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate clear_flash(conn), to: Phoenix.Controller$/;"	d
clear_processes	deps/exq/lib/exq/api.ex	/^  def clear_processes(pid) do$/;"	f
clear_processes	deps/exq/lib/exq/stats/server.ex	/^  def clear_processes(redis, namespace) do$/;"	f
clear_session	deps/plug/lib/plug/conn.ex	/^  def clear_session(conn) do$/;"	f
client_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp client_ref(pid) when is_pid(pid), do: self()$/;"	f
client_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp client_ref(topic) when is_binary(topic), do: topic$/;"	f
client_unresponsive?	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp client_unresponsive?(state) do$/;"	f
close	deps/phoenix/lib/phoenix/channel/server.ex	/^  def close(pid, timeout \\\\ 5000) do$/;"	f
close	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def close(socket, timeout \\\\ 5000) do$/;"	f
close_transaction	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def close_transaction(pool, ref, _) do$/;"	f
close_transaction	deps/ecto/lib/ecto/pool.ex	/^  defcallback close_transaction(t, worker, timeout) :: :ok when worker: any$/;"	c
close_transaction	deps/ecto/lib/ecto/pool.ex	/^  defp close_transaction(_, %{}, _) do$/;"	f
close_transaction	deps/ecto/lib/ecto/pool.ex	/^  defp close_transaction({__MODULE__, pool_mod, pool}, %{conn: _, worker: worker}, timeout) do$/;"	f
close_transaction	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def close_transaction(pool, worker, _) do$/;"	f
close_transaction	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def close_transaction(_, {worker, ref}, _) do$/;"	f
coalesce_token	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp coalesce_token([flags, directive]) do$/;"	f
coalesce_token	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp coalesce_token([flags, width, modifiers, directive]) do$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^    def code(unquote(atom)), do: unquote(code)$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^  def code(integer) when integer in 100..999 do$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^  def code(integer_or_atom)$/;"	f
code_change	deps/exq/lib/exq/enqueuer/server.ex	/^  def code_change(_old_version, state, _extra) do$/;"	f
code_change	deps/exq/lib/exq/manager/server.ex	/^  def code_change(_old_version, state, _extra) do$/;"	f
code_change	deps/exq/lib/exq/stats/server.ex	/^  def code_change(_old_version, state, _extra) do$/;"	f
code_change	deps/exq/lib/exq/worker/server.ex	/^  def code_change(_old_version, state, _extra) do$/;"	f
code_reloader_children	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp code_reloader_children(mod, conf) do$/;"	f
code_to_name	deps/postgrex/lib/postgrex/error_code.ex	/^    def code_to_name(unquote(code)), do: unquote(name)$/;"	f
code_to_name	deps/postgrex/lib/postgrex/error_code.ex	/^  def code_to_name(code)$/;"	f
collect_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_assocs([]),$/;"	f
collect_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_assocs([{_assoc, {ix, children}}|tail]),$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(_query, expr, from?),$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(_query, {:&, _, [ix]} = expr, from?) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(query, list, from?) when is_list(list),$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(query, {:%{}, _, pairs}, from?),$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(query, {:{}, _, elems}, from?),$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(query, {left, right}, from?),$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on([{:on, expr}|t], acc),$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on([{:on, expr}|t], nil),$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on(other, acc),$/;"	f
collect_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp collect_sources(query) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:add, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:modify, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:remove, name}), do: "DROP #{quote_name(name)}"$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(table, {:modify, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:add, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:modify, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:remove, name}), do: "DROP COLUMN #{quote_name(name)}"$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(table, {:modify, name, %Reference{} = ref, opts}) do$/;"	f
column_changes	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_changes(table, columns) do$/;"	f
column_changes	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_changes(table, columns) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definition(_table, {:add, name, type, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definition(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definition(_table, {:add, name, type, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definition(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_definitions	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definitions(table, columns) do$/;"	f
column_definitions	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definitions(table, columns) do$/;"	f
column_options	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_options(name, opts) do$/;"	f
column_options	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_options(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_type(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_type(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_type({:array, type}, opts),$/;"	f
columns	deps/postgrex/lib/postgrex/protocol.ex	/^  defp columns(fields) do$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command(ddl) when is_binary(ddl) or is_list(ddl),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:alter, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create_if_not_exists, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create_if_not_exists, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop, %Table{} = table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop_if_exists, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop_if_exists, %Table{} = table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:rename, %Table{} = current_table, %Table{} = new_table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:rename, %Table{} = table, current_column, new_column}),$/;"	f
command	deps/postgrex/lib/postgrex/connection.ex	/^  defp command({:listen, channel, pid}, s) do$/;"	f
command	deps/postgrex/lib/postgrex/connection.ex	/^  defp command({:query, statement, _params}, s) do$/;"	f
command	deps/postgrex/lib/postgrex/connection.ex	/^  defp command({:unlisten, ref}, s) do$/;"	f
commit	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def commit do$/;"	f
commit	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def commit do$/;"	f
commit	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp commit(_repo, _ref, _mod, _mode, _timeout, _opts, result) do$/;"	f
commit	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp commit(repo, ref, mod, :raw, timeout, opts, result) do$/;"	f
commit	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback commit :: String.t$/;"	c
compare	deps/decimal/lib/decimal.ex	/^  def compare(%Decimal{coef: coef1} = num1, %Decimal{coef: coef2} = num2) do$/;"	f
compare	deps/ecto/lib/ecto/datetime.ex	/^  def compare(%{__struct__: module} = t1, %{__struct__: module} = t2) do$/;"	f
compare	deps/ecto/lib/ecto/datetime.ex	/^  defdelegate compare(t1, t2), to: Ecto.DateTime.Utils$/;"	d
compare	deps/timex/lib/date/date.ex	/^  def compare( this, other, granularity)$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(_, :distant_future), do: -1$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(_, :distant_past),   do: +1$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(_, _, _), do: {:error, "Invalid comparison granularity."}$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(a, b),               do: compare(a, b, :secs)$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(date, :epoch),       do: compare(date, epoch())$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(date, :zero),        do: compare(date, zero())$/;"	f
compare	deps/timex/lib/date/date.ex	/^  def compare(date, date),         do: 0$/;"	f
compare?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare?(_, nil), do: true$/;"	f
compare?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare?(x, y),   do: x == y$/;"	f
compile	deps/phoenix/lib/phoenix/digester.ex	/^  def compile(input_path, output_path) do$/;"	f
compile	deps/phoenix/lib/phoenix/template.ex	/^  defp compile(path, root) do$/;"	f
compile	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^  def compile(path, name) do$/;"	f
compile	deps/phoenix/lib/phoenix/template/engine.ex	/^      def compile(template_path, template_name)$/;"	f
compile	deps/phoenix/lib/phoenix/template/engine.ex	/^  defcallback compile(template_path :: binary, template_name :: binary) :: Macro.t$/;"	c
compile	deps/phoenix/lib/phoenix/template/exs_engine.ex	/^  def compile(path, _name) do$/;"	f
compile	deps/plug/lib/plug/builder.ex	/^  def compile(env, pipeline, builder_opts) do$/;"	f
compile	deps/plug/lib/plug/router.ex	/^  defp compile(method, expr, options, contents) do$/;"	f
compile_callback	deps/ecto/lib/ecto/model/callbacks.ex	/^  defp compile_callback({function, args, []}, acc)$/;"	f
compile_callback	deps/ecto/lib/ecto/model/callbacks.ex	/^  defp compile_callback({module, function, args}, acc)$/;"	f
compile_error!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp compile_error!(expr) do$/;"	f
compile_guards	deps/plug/lib/plug/builder.ex	/^  defp compile_guards(call, guards) do$/;"	f
compile_guards	deps/plug/lib/plug/builder.ex	/^  defp compile_guards(call, true) do$/;"	f
compiled_engines	deps/phoenix/lib/phoenix/template.ex	/^  defp compiled_engines do$/;"	f
compiled_file?	deps/phoenix/lib/phoenix/digester.ex	/^  defp compiled_file?(file_path) do$/;"	f
compiled_format_encoders	deps/phoenix/lib/phoenix/template.ex	/^  defp compiled_format_encoders do$/;"	f
compose_namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp compose_namebased_uuid(version, hash) do$/;"	f
composite?	deps/ecto/lib/ecto/type.ex	/^  def composite?(atom), do: atom in @composite$/;"	f
compress	deps/phoenix/lib/phoenix/digester.ex	/^  defp compress(file) do$/;"	f
config	deps/ecto/lib/ecto/repo.ex	/^      def config do$/;"	f
config	deps/ecto/lib/ecto/repo.ex	/^  defcallback config() :: Keyword.t$/;"	c
config	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def config(repo, otp_app, custom) do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint.ex	/^      def config(key, default \\\\ nil) do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp config(opts) do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def config(otp_app, endpoint) do$/;"	f
config_change	deps/phoenix/lib/phoenix/config.ex	/^  def config_change(module, changed, removed) do$/;"	f
config_change	deps/phoenix/lib/phoenix/endpoint.ex	/^      def config_change(changed, removed) do$/;"	f
config_change	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def config_change(endpoint, changed, removed) do$/;"	f
config_change	lib/exqueue.ex	/^  def config_change(changed, _new, removed) do$/;"	f
config_children	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp config_children(mod, conf) do$/;"	f
configure_session	deps/plug/lib/plug/conn.ex	/^  def configure_session(%Conn{state: state}, _opts) when not state in @unsent,$/;"	f
configure_session	deps/plug/lib/plug/conn.ex	/^  def configure_session(conn, opts) do$/;"	f
conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def conn() do$/;"	f
conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def conn(method, path, params_or_body \\\\ nil) do$/;"	f
conn	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def conn(req, transport) do$/;"	f
conn	deps/plug/lib/plug/adapters/test/conn.ex	/^  def conn(conn, method, uri, body_or_params) do$/;"	f
conn	deps/plug/lib/plug/test.ex	/^  def conn(method, path, params_or_body \\\\ nil) do$/;"	f
conn_exit	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp conn_exit(%{ref: nil} = s) do$/;"	f
conn_exit	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp conn_exit(s) do$/;"	f
conn_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp conn_info(_min_level, conn) do$/;"	f
connect	deps/ecto/lib/ecto/adapters/connection.ex	/^  def connect(module, opts) do$/;"	f
connect	deps/ecto/lib/ecto/adapters/connection.ex	/^  defcallback connect(Keyword.t) :: {:ok, pid} | {:error, term}$/;"	c
connect	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def connect(opts) do$/;"	f
connect	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def connect(opts) do$/;"	f
connect	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp connect(%{conn: nil} = s) do$/;"	f
connect	deps/phoenix/lib/phoenix/socket.ex	/^        def connect(params, socket) do$/;"	f
connect	deps/phoenix/lib/phoenix/socket.ex	/^  defcallback connect(params :: map, Socket.t) :: {:ok, Socket.t} | :error$/;"	c
connect	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def connect(endpoint, handler, transport_name, transport, serializer, params) do$/;"	f
connect	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro connect(handler, params) do$/;"	a
connect	deps/phoenix/lib/phoenix/token.ex	/^        def connect(%{"token" => token}, socket) do$/;"	f
connect	deps/phoenix_live_reload/lib/phoenix_live_reload/socket.ex	/^  def connect(_params, socket), do: {:ok, socket}$/;"	f
connect	deps/postgrex/lib/postgrex/connection.ex	/^  defp connect(from, %{queue: queue, opts: opts} = s) do$/;"	f
connect	web/channels/user_socket.ex	/^  def connect(_params, socket) do$/;"	f
connect_vsn	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp connect_vsn(endpoint, handler, transport_name, transport, serializer, params) do$/;"	f
connection	deps/exq/lib/exq/redis/connection.ex	/^  def connection(opts \\\\ []) do$/;"	f
connection_type	deps/plug/lib/plug/logger.ex	/^  defp connection_type(%{state: :chunked}), do: "Chunked"$/;"	f
connection_type	deps/plug/lib/plug/logger.ex	/^  defp connection_type(_), do: "Sent"$/;"	f
consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp consecutive_matching(list, fun) do$/;"	f
constraint_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp constraint_expr(%Reference{} = ref, table, name),$/;"	f
constraint_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp constraint_expr(%Reference{} = ref, table, name),$/;"	f
constraints_to_errors	deps/ecto/lib/ecto/repo/model.ex	/^  defp constraints_to_errors(%{constraints: user_constraints} = changeset, action, constraints) do$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct(date, {h, min, sec}, %TimezoneInfo{} = tz), do: construct(date, {h, min, sec, 0}, tz)$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct(date, {h, min, sec}, tz), do: construct(date, {h, min, sec, 0}, tz)$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({_,_,_} = date, {_,_,_,_} = time, nil),     do: construct(date, time, %TimezoneInfo{})$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({_,_,_} = date, {_,_,_} = time, nil),       do: construct(date, time, %TimezoneInfo{})$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({_,_,_}=date, {_,_,_,_}=time, %TimezoneInfo{} = tz) do$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({_,_,_}=date, {_,_,_,_}=time, {_, name}) do$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({date, time}, tz), do: construct(date, time, tz)$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({{_, _, _} = date, {_, _, _, _} = time}),   do: construct(date, time, %TimezoneInfo{})$/;"	f
construct	deps/timex/lib/date/date.ex	/^  defp construct({{_, _, _} = date, {_, _, _} = time}),      do: construct(date, time, %TimezoneInfo{})$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?(_),$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?(list) when is_list(list),$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?({:&, _, _}),$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?({left, _, right}),$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?({left, right}),$/;"	f
content_length_from_headers	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp content_length_from_headers(headers) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, attrs, [do: block]) when is_atom(name) and is_list(attrs) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, content) when is_atom(name) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, content, attrs) when is_atom(name) and is_list(attrs) do$/;"	f
content_type	deps/plug/lib/plug/conn/utils.ex	/^  def content_type(binary) do$/;"	f
context	deps/decimal/lib/decimal.ex	/^  defp context(num, signals \\\\ []) do$/;"	f
controller	web/web.ex	/^  def controller do$/;"	f
controller_module	deps/phoenix/lib/phoenix/controller.ex	/^  def controller_module(conn), do: conn.private.phoenix_controller$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :days),  do: to_days(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :hours), do: to_hours(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :mins),  do: to_mins(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :msecs), do: to_msecs(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :secs),  do: to_secs(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :timestamp), do: timestamp$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :usecs), do: to_usecs(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, :weeks), do: to_weeks(timestamp)$/;"	f
convert	deps/timex/lib/time/time.ex	/^  def convert(timestamp, type \\\\ :timestamp)$/;"	f
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(%DateTime{ms: ms} = date, %TimezoneInfo{full_name: name} = tz) do$/;"	f
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(date, tz) when is_binary(tz) do$/;"	f
convert_params	deps/ecto/lib/ecto/changeset.ex	/^  defp convert_params(params) do$/;"	f
convert_parsers	deps/plug/lib/plug/parsers.ex	/^  defp convert_parsers(parsers) do$/;"	f
convert_store	deps/plug/lib/plug/session.ex	/^  defp convert_store(store) do$/;"	f
copy_from	deps/phoenix/lib/mix/phoenix.ex	/^  def copy_from(apps, source_dir, target_dir, binding, mapping) when is_list(mapping) do$/;"	f
copy_headers	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp copy_headers(conn, headers, copy) do$/;"	f
count	deps/ecto/lib/ecto/query/api.ex	/^  def count(value), do: doc! [value]$/;"	f
count_binds	deps/ecto/lib/ecto/query/builder.ex	/^  def count_binds(%Query{from: from, joins: joins}) do$/;"	f
count_entries	deps/ecto/integration_test/cases/migrator.exs	/^  defp count_entries() do$/;"	f
count_fields	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp count_fields(fields, sources) do$/;"	f
create	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create	deps/ecto/lib/ecto.ex	/^      def create(id, params) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  def create(%Index{} = index) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  def create(%Table{} = table) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  defmacro create(object, do: block) do$/;"	a
create	deps/phoenix/lib/phoenix/channel.ex	/^      def create(conn, params) do$/;"	f
create	deps/phoenix/lib/phoenix/token.ex	/^      def create(conn, params) do$/;"	f
create	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create_accs	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp create_accs(fields) do$/;"	f
create_changeset	deps/ecto/lib/ecto.ex	/^      def create_changeset(user, params) do$/;"	f
create_current_release_ets_table	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp create_current_release_ets_table do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  def create_if_not_exists(%Index{} = index) do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  def create_if_not_exists(%Table{} = table) do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  defmacro create_if_not_exists(object, do: block) do$/;"	a
create_migration	deps/ecto/integration_test/cases/migrator.exs	/^  defp create_migration(num) do$/;"	f
create_migrations_table	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  defp create_migrations_table(adapter, repo) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(%{prefix: prefix, sources: sources}) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(_prefix, _sources, pos, pos) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(prefix, sources, pos, limit) when pos < limit do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(%{prefix: prefix, sources: sources}) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(_prefix, _sources, pos, pos) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(prefix, sources, pos, limit) when pos < limit do$/;"	f
create_refls	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp create_refls(idx, fields, sources) do$/;"	f
cross_origin_js?	deps/plug/lib/plug/csrf_protection.ex	/^  defp cross_origin_js?(%Plug.Conn{method: "GET"} = conn),$/;"	f
cross_origin_js?	deps/plug/lib/plug/csrf_protection.ex	/^  defp cross_origin_js?(%Plug.Conn{}),$/;"	f
csrf_token_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp csrf_token_tag(opts, extra) do$/;"	f
current_date_utc	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp current_date_utc, do: :calendar.universal_time |> elem(0)$/;"	f
current_release_from_table	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp current_release_from_table do$/;"	f
custom_perform	deps/exq/test/worker_test.exs	/^    def custom_perform do$/;"	f
dasherize	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp dasherize(value) when is_atom(value),   do: dasherize(Atom.to_string(value))$/;"	f
dasherize	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp dasherize(value) when is_binary(value), do: String.replace(value, "_", "-")$/;"	f
date_add	deps/ecto/lib/ecto/query/api.ex	/^  def date_add(date, count, interval), do: doc! [date, count, interval]$/;"	f
date_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_builder(b, _opts) do$/;"	f
date_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def date_select(form, field, opts \\\\ []) do$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(%{"year" => year, "month" => month, "day" => day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(%{year: year, month: month, day: day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(nil),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(other),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value({year, month, day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value({{year, month, day}, _}),$/;"	f
datetime_add	deps/ecto/lib/ecto/query/api.ex	/^  def datetime_add(datetime, count, interval), do: doc! [datetime, count, interval]$/;"	f
datetime_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp datetime_builder(form, field, date, time, parent) do$/;"	f
datetime_options	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp datetime_options(type, values, id, name, parent, datetime, opts) do$/;"	f
datetime_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def datetime_select(form, field, opts \\\\ []) do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc(until, _, _) when until == nil do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, _, _) when modifier == :utc do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, utc_off, _) when modifier == :standard do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, utc_off, std_off) when modifier == :wall do$/;"	f
day	deps/timex/lib/date/date.ex	/^  def day(date) do$/;"	f
day_count_for_month	deps/tzdata/lib/tzdata/util.ex	/^  def day_count_for_month(year, month), do: :calendar.last_day_of_the_month(year, month)$/;"	f
day_name	deps/timex/lib/date/date.ex	/^    def day_name(unquote(day_num)), do: unquote(name)$/;"	f
day_name	deps/timex/lib/date/date.ex	/^  def day_name(x), do: {:error, "Invalid day num: #{x}"}$/;"	f
day_of_month	deps/timex/lib/parse/datetime/parsers.ex	/^  def day_of_month(opts \\\\ []) do$/;"	f
day_of_the_week	deps/tzdata/lib/tzdata/util.ex	/^  def day_of_the_week(year, month, day), do: :calendar.day_of_the_week(year, month, day)$/;"	f
day_of_year	deps/timex/lib/parse/datetime/parsers.ex	/^  def day_of_year(opts \\\\ []) do$/;"	f
day_shortname	deps/timex/lib/date/date.ex	/^    def day_shortname(unquote(day_num)), do: String.slice(unquote(name), 0..2)$/;"	f
day_shortname	deps/timex/lib/date/date.ex	/^  def day_shortname(x), do: {:error, "Invalid day num: #{x}"}$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^      def day_to_num(unquote(abbr_cased)), do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^      def day_to_num(unquote(abbr_lower)), do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^      def day_to_num(unquote(day_name)),   do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^      def day_to_num(unquote(lower)),      do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^      def day_to_num(unquote(symbol)),     do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/date/date.ex	/^  def day_to_num(x), do: {:error, "Invalid day name: #{x}"}$/;"	f
days_in_month	deps/timex/lib/date/date.ex	/^  def days_in_month(%DateTime{:year => year, :month => month}) when year >= 0 and month in @valid_months do$/;"	f
days_in_month	deps/timex/lib/date/date.ex	/^  def days_in_month(year, month) do$/;"	f
days_in_month	deps/timex/lib/date/date.ex	/^  def days_in_month(year, month) when year >= 0 and month in @valid_months do$/;"	f
days_since_last_remote_poll	deps/tzdata/lib/tzdata/data_loader.ex	/^  def days_since_last_remote_poll do$/;"	f
decimal?	deps/decimal/lib/decimal.ex	/^  def decimal?(%Decimal{}), do: true$/;"	f
decimal?	deps/decimal/lib/decimal.ex	/^  def decimal?(_),          do: false$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(result, :equal_to) do$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(result, :greater_than) do$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(result, :greater_than_or_equal_to) do$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(result, :less_than) do$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(result, :less_than_or_equal_to) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode(%TypeInfo{send: "date_send"}, <<n :: signed-32>>, _, _),$/;"	f
decode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode(%TypeInfo{send: "time_send"}, <<n :: signed-64>>, _, _),$/;"	f
decode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode(%TypeInfo{send: "timestamp_send"}, <<n :: signed-64>>, _, _),$/;"	f
decode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode(%TypeInfo{send: "timestamptz_send"}, <<n :: signed-64>>, _, _),$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode(other, _mapper) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode(result, %{query_time: query_time} = entry, mapper) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode(result, entry, nil) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode(result, nil, mapper) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode(result, nil, nil) do$/;"	f
decode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp decode({:ok, %{rows: rows} = res}, mapper) when is_list(rows) do$/;"	f
decode	deps/exq/lib/exq/support/json.ex	/^  def decode(json) do$/;"	f
decode	deps/plug/lib/plug/conn/cookies.ex	/^  def decode(cookie) do$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode("", initial) do$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode(query, initial \\\\ %{})$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode(query, initial) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:more, _, conn}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:ok, "", conn}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:ok, body, conn}, decoder) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode(:error, _serializer) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode({:ok, binary}, :external_term_format) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode({:ok, binary}, serializer) do$/;"	f
decode	deps/poison/lib/poison.ex	/^  def decode(iodata, options \\\\ []) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, _options) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options) when is_map(value) or is_list(value) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options)$/;"	f
decode	deps/postgrex/lib/postgrex/extension.ex	/^  defcallback decode(TypeInfo.t, binary, Types.types, opts) :: term$/;"	c
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^    def decode(%TypeInfo{send: unquote(sender)}, <<n :: uint32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "array_send"}, bin, types, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "boolsend"}, <<0 :: int8>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "boolsend"}, <<1 :: int8>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "bpcharsend"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "byteasend"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "date_send"}, <<n :: int32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "enum_send"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float4send"}, <<127, 128, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float4send"}, <<127, 192, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float4send"}, <<255, 128, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float4send"}, <<n :: float32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float8send"}, <<127, 240, 0, 0, 0, 0, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float8send"}, <<127, 248, 0, 0, 0, 0, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float8send"}, <<255, 240, 0, 0, 0, 0, 0, 0>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "float8send"}, <<n :: float64>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "int2send"}, <<n :: int16>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "int4send"}, <<n :: int32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "int8send"}, <<n :: int64>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "interval_send"}, <<s :: int64, d :: int32, m :: int32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "numeric_send"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "range_send", base_type: oid}, bin, types, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "record_send"}, bin, types, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "textsend"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "tidsend"}, <<block :: uint32, tuple :: uint16>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "time_send"}, <<n :: int64>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "timestamp_send"}, <<n :: int64>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "timestamptz_send"}, <<n :: int64>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "timetz_send"}, <<n :: int64, _tz :: int32>>, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "unknownsend"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "uuid_send"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "varcharsend"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{send: "void_send"}, "", _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{type: "citext"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode(%TypeInfo{type: "hstore"}, bin, _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def decode(%TypeInfo{type: "json"}, json, _state, library),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def decode(%TypeInfo{type: "jsonb"}, <<1, json::binary>>, _state, library),$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def decode(%TypeInfo{output: "void_out"}, "", _, _),$/;"	f
decode	deps/postgrex/lib/postgrex/types.ex	/^  def decode(extension, oid, binary, state) do$/;"	f
decode	deps/postgrex/lib/postgrex/types.ex	/^  def decode(oid, binary, state) do$/;"	f
decode!	deps/exq/lib/exq/support/json.ex	/^  def decode!(json) do$/;"	f
decode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def decode!(message, _opts), do: message$/;"	f
decode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def decode!(message, _opts) do$/;"	f
decode!	deps/phoenix/lib/phoenix/transports/serializer.ex	/^  defcallback decode!(iodata, options :: Keyword.t) :: Phoenix.Socket.Message.t$/;"	c
decode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def decode!(message, _opts) do$/;"	f
decode!	deps/poison/lib/poison.ex	/^  def decode!(iodata, options \\\\ []) do$/;"	f
decode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_array("", [], _decoder) do$/;"	f
decode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_array(<<ndims :: int32, _has_null :: int32, oid :: uint32,$/;"	f
decode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_array(rest, [len], decoder) do$/;"	f
decode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_array(rest, [len|lens], decoder) do$/;"	f
decode_auth_type	deps/postgrex/lib/postgrex/messages.ex	/^    def decode_auth_type(unquote(value)), do: unquote(type)$/;"	f
decode_date	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp decode_date(days) do$/;"	f
decode_date	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_date(days) do$/;"	f
decode_field_type	deps/postgrex/lib/postgrex/messages.ex	/^    def decode_field_type(unquote(char)), do: unquote(field)$/;"	f
decode_field_type	deps/postgrex/lib/postgrex/messages.ex	/^  def decode_field_type(_), do: :unknown$/;"	f
decode_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_fields(<<0>>), do: []$/;"	f
decode_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_fields(<<field :: int8, rest :: binary>>) do$/;"	f
decode_hstore	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def decode_hstore(<<_length::int32, pairs::binary>>) do$/;"	f
decode_hstore_payload	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_hstore_payload(<<>>, acc) do$/;"	f
decode_hstore_payload	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_hstore_payload(<<key_length::int32, key::binary(key_length),$/;"	f
decode_interval	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_interval(microsecs, days, months) do$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key("", _key),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< ?=, _ :: binary >>, ""),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< ?=, t :: binary >>, key),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< h, _ :: binary >>, _key) when h in [?\\s, ?\\t, ?\\r, ?\\n, ?\\v, ?\\f],$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< h, t :: binary >>, key),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(""),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(<< ?$, _ :: binary >>),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(<< h, t :: binary >>) when h in [?\\s, ?\\t],$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(kv),$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_numeric(0, _weight, 0xC000, _scale, "") do$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_numeric(<<ndigits :: int16, weight :: int16, sign :: uint16, scale :: int16, tail :: binary>>) do$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_numeric(_num_digits, weight, sign, scale, bin) do$/;"	f
decode_numeric_int	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_numeric_int("", weight, acc), do: {acc, weight}$/;"	f
decode_numeric_int	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_numeric_int(<<digit :: int16, tail :: binary>>, weight, acc) do$/;"	f
decode_pair	deps/plug/lib/plug/conn/query.ex	/^  def decode_pair({key, value}, acc) do$/;"	f
decode_range	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_range(<<flags, rest::binary>>, oid, types) do$/;"	f
decode_range	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_range(<<flags>>, _oid, _types) when (flags &&& @range_empty) != 0 do$/;"	f
decode_record	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_record(<<num :: int32, rest :: binary>>, types) do$/;"	f
decode_row_field	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_field(rest) do$/;"	f
decode_row_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_fields("", 0), do: []$/;"	f
decode_row_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_fields(rest, count) do$/;"	f
decode_row_values	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_values("", 0), do: []$/;"	f
decode_row_values	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_values(<<-1 :: int32, rest :: binary>>, count) do$/;"	f
decode_row_values	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_values(<<length :: int32, value :: binary(length), rest :: binary>>, count) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_rows(rows, col_oids, types) do$/;"	f
decode_string	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_string(bin) do$/;"	f
decode_string_pair	deps/plug/lib/plug/conn/query.ex	/^  defp decode_string_pair(binary, acc) do$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(tag) do$/;"	f
decode_time	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp decode_time(microsecs) do$/;"	f
decode_time	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_time(microsecs) do$/;"	f
decode_timestamp	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp decode_timestamp(microsecs) do$/;"	f
decode_timestamp	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp decode_timestamp(microsecs) do$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value("", _spaces, key, value),$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< ?\\s, t :: binary >>, spaces, key, value),$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< h, _ :: binary >>, _spaces, _key, _value) when h in [?\\t, ?\\r, ?\\n, ?\\v, ?\\f],$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< h, t :: binary >>, spaces, key, value),$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/default.ex	/^  defp deconstruct({0, 0}, components), do: components |> Enum.reverse$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/default.ex	/^  defp deconstruct({_, _, micro} = ts), do: deconstruct({ts |> Time.to_secs |> trunc, micro}, [])$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/default.ex	/^  defp deconstruct({seconds, us}, components) do$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/default.ex	/^  defp deconstruct({seconds, us}, components) when seconds > 0 do$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp deconstruct({0, 0}, components), do: components |> Enum.reverse$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp deconstruct({0, micro}, components) when micro > 0 do$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp deconstruct({_, _, micro} = ts), do: deconstruct({ts |> Time.to_secs |> trunc, micro}, [])$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp deconstruct({seconds, micro}, components) when seconds < 0, do: deconstruct({seconds * -1, micro}, components)$/;"	f
deconstruct	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp deconstruct({seconds, us}, components) when seconds > 0 do$/;"	f
decr!	deps/exq/lib/exq/redis/connection.ex	/^  def decr!(redis, key) do$/;"	f
decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp decrypt(encrypted, cipher, secret, iv) do$/;"	f
default	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  defp default(config, otp_app, port) do$/;"	f
default_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp default_actions(false), do: @actions$/;"	f
default_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp default_actions(true),  do: @actions -- [:index]$/;"	f
default_config	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defcallback default_config() :: Keyword.t$/;"	c
default_config	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def default_config() do$/;"	f
default_config	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def default_config() do$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr(:error),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, literal}) when is_binary(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, literal}) when is_number(literal) or is_boolean(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, nil}),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, {:fragment, expr}}),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr(:error, _),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, []}, type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, expr}, type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, literal}, _type) when is_binary(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, literal}, _type) when is_number(literal) or is_boolean(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, nil}, _type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, {:fragment, expr}}, _type),$/;"	f
default_for_type	deps/ecto/lib/ecto/schema.ex	/^  defp default_for_type(_, opts) do$/;"	f
default_for_type	deps/ecto/lib/ecto/schema.ex	/^  defp default_for_type({:array, _}, opts) do$/;"	f
default_format_parser	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp default_format_parser() do$/;"	f
default_index_name	deps/ecto/lib/ecto/migration.ex	/^  defp default_index_name(index) do$/;"	f
default_name	deps/exq/lib/exq/enqueuer/server.ex	/^  def default_name, do: @default_name$/;"	f
default_name	deps/exq/lib/exq/manager/server.ex	/^  def default_name, do: @default_name$/;"	f
default_name	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def default_name, do: @default_name$/;"	f
default_pool_name	deps/ecto/lib/ecto/repo/supervisor.ex	/^  defp default_pool_name(repo, config) do$/;"	f
defaults	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp defaults(attrs) do$/;"	f
defaults	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp defaults(otp_app, module) do$/;"	f
defchannel	deps/phoenix/lib/phoenix/socket.ex	/^  defp defchannel(topic_match, channel_module, nil) do$/;"	f
defchannel	deps/phoenix/lib/phoenix/socket.ex	/^  defp defchannel(topic_match, channel_module, transports) do$/;"	f
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{helper: nil}, _exprs), do: nil$/;"	f
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{kind: :forward}, _exprs), do: nil$/;"	f
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{} = route, exprs) do$/;"	f
define	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def define(env, routes) do$/;"	f
defparser	deps/combine/lib/combine/helpers.ex	/^  defmacro defparser(call, do: body) do$/;"	a
defs	deps/phoenix/lib/phoenix/router.ex	/^  defp defs() do$/;"	f
del!	deps/exq/lib/exq/redis/connection.ex	/^  def del!(redis, key) do$/;"	f
delete	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/ecto/lib/ecto/adapter.ex	/^  defcallback delete(repo, model_meta, filters, autogenerate_id, options) ::$/;"	c
delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def delete(prefix, table, filters, _returning) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def delete(prefix, table, filters, returning) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/sql.ex	/^      def delete(repo, %{source: {prefix, source}}, filter, _autogenarate, opts) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback delete(prefix :: String.t, table :: String.t,$/;"	c
delete	deps/ecto/lib/ecto/repo.ex	/^      def delete(model, opts \\\\ []) do$/;"	f
delete	deps/ecto/lib/ecto/repo.ex	/^  defcallback delete(Ecto.Model.t, Keyword.t) ::$/;"	c
delete	deps/ecto/lib/ecto/repo/model.ex	/^  def delete(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
delete	deps/ecto/lib/ecto/repo/model.ex	/^  def delete(repo, adapter, %{__struct__: _} = struct, opts) when is_list(opts) do$/;"	f
delete	deps/phoenix/lib/phoenix/controller.ex	/^      def delete(conn, %{"id" => id}, user) do$/;"	f
delete	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp delete(state, topic, channel_pid) do$/;"	f
delete	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/plug/lib/plug/router.ex	/^  defmacro delete(path, options, contents \\\\ []) do$/;"	a
delete	deps/plug/lib/plug/session/cookie.ex	/^  def delete(_conn, _sid, _opts) do$/;"	f
delete	deps/plug/lib/plug/session/ets.ex	/^  def delete(_conn, sid, table) do$/;"	f
delete	deps/plug/lib/plug/session/store.ex	/^  defcallback delete(Plug.Conn.t, sid, Plug.opts) :: :ok$/;"	c
delete!	deps/ecto/lib/ecto/repo.ex	/^      def delete!(model, opts \\\\ []) do$/;"	f
delete!	deps/ecto/lib/ecto/repo.ex	/^  defcallback delete!(Ecto.Model.t, Keyword.t) :: Ecto.Model.t | no_return$/;"	c
delete!	deps/ecto/lib/ecto/repo/model.ex	/^  def delete!(repo, adapter, model_or_changeset, opts) do$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def delete_all(query) do$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def delete_all(query) do$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback delete_all(Ecto.Query.t) :: String.t$/;"	c
delete_all	deps/ecto/lib/ecto/model/dependent.ex	/^  def delete_all(%Changeset{repo: repo, model: model} = changeset, assoc_field, _related_key) do$/;"	f
delete_all	deps/ecto/lib/ecto/repo.ex	/^      def delete_all(queryable, opts \\\\ []) do$/;"	f
delete_all	deps/ecto/lib/ecto/repo.ex	/^  defcallback delete_all(Ecto.Queryable.t, Keyword.t) :: {integer, nil} | no_return$/;"	c
delete_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def delete_all(repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
delete_all_where	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp delete_all_where([], query, sources), do: where(query, sources)$/;"	f
delete_all_where	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp delete_all_where(_joins, %Query{wheres: wheres} = query, sources) do$/;"	f
delete_change	deps/ecto/lib/ecto/changeset.ex	/^  def delete_change(%Changeset{} = changeset, key) do$/;"	f
delete_cookie	deps/plug/lib/plug/session.ex	/^  defp delete_cookie(conn, %{cookie_opts: cookie_opts, key: key}),$/;"	f
delete_csrf_token	deps/phoenix/lib/phoenix/controller.ex	/^  defdelegate delete_csrf_token(), to: Plug.CSRFProtection$/;"	d
delete_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  def delete_csrf_token do$/;"	f
delete_ets_file_for_version	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp delete_ets_file_for_version(release_version) do$/;"	f
delete_ets_table_for_version	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp delete_ets_table_for_version(release_version) do$/;"	f
delete_req_cookie	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate delete_req_cookie(conn, key), to: Plug.Test$/;"	d
delete_req_cookie	deps/plug/lib/plug/test.ex	/^  def delete_req_cookie(%Conn{req_cookies: %Plug.Conn.Unfetched{}} = conn, key)$/;"	f
delete_req_cookie	deps/plug/lib/plug/test.ex	/^  def delete_req_cookie(_conn, key) when is_binary(key) do$/;"	f
delete_req_header	deps/plug/lib/plug/conn.ex	/^  def delete_req_header(%Conn{req_headers: headers} = conn, key) when$/;"	f
delete_req_header	deps/plug/lib/plug/conn.ex	/^  def delete_req_header(%Conn{state: :sent}, _key) do$/;"	f
delete_resp_cookie	deps/plug/lib/plug/conn.ex	/^  def delete_resp_cookie(%Conn{resp_cookies: resp_cookies} = conn, key, opts \\\\ []) when$/;"	f
delete_resp_header	deps/plug/lib/plug/conn.ex	/^  def delete_resp_header(%Conn{resp_headers: headers} = conn, key) when$/;"	f
delete_resp_header	deps/plug/lib/plug/conn.ex	/^  def delete_resp_header(%Conn{state: :sent}, _key) do$/;"	f
delete_session	deps/plug/lib/plug/conn.ex	/^  def delete_session(%Conn{state: state}, _key) when not state in @unsent,$/;"	f
delete_session	deps/plug/lib/plug/conn.ex	/^  def delete_session(conn, key) do$/;"	f
delete_session	deps/plug/lib/plug/session.ex	/^  defp delete_session(sid, conn, %{store: store, store_config: store_config}),$/;"	f
demonitor	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp demonitor(%{monitor: mon} = s) do$/;"	f
demonitor	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  defp demonitor(%{transaction: nil} = s), do: s$/;"	f
demonitor	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  defp demonitor(%{transaction: {_, ref}} = s) do$/;"	f
demonitor	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp demonitor(%{monitor: mon} = s) do$/;"	f
deps	deps/combine/mix.exs	/^  defp deps do$/;"	f
deps	deps/decimal/mix.exs	/^  defp deps do$/;"	f
deps	deps/ecto/mix.exs	/^  defp deps do$/;"	f
deps	deps/exq/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_ecto/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_html/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_live_reload/mix.exs	/^  defp deps do$/;"	f
deps	deps/plug/mix.exs	/^  def deps do$/;"	f
deps	deps/poison/mix.exs	/^  defp deps do$/;"	f
deps	deps/postgrex/mix.exs	/^  defp deps do$/;"	f
deps	deps/timex/mix.exs	/^  def deps do$/;"	f
deps	deps/tzdata/mix.exs	/^  defp deps do$/;"	f
deps	deps/uuid/mix.exs	/^  defp deps do$/;"	f
deps	mix.exs	/^  defp deps do$/;"	f
dequeue	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp dequeue(%{queue: q} = s) do$/;"	f
dequeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def dequeue(redis, namespace, queue) do$/;"	f
dequeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def dequeue(redis, namespace, queues) when is_list(queues) do$/;"	f
dequeue	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def dequeue(state) do$/;"	f
dequeue_and_dispatch	deps/exq/lib/exq/manager/server.ex	/^  def dequeue_and_dispatch(state), do: dequeue_and_dispatch(state, available_queues(state))$/;"	f
dequeue_and_dispatch	deps/exq/lib/exq/manager/server.ex	/^  def dequeue_and_dispatch(state, []), do: {state, state.poll_timeout}$/;"	f
dequeue_and_dispatch	deps/exq/lib/exq/manager/server.ex	/^  def dequeue_and_dispatch(state, queues) do$/;"	f
dequeue_random	deps/exq/lib/exq/redis/job_queue.ex	/^  defp dequeue_random(_redis, _namespace, []) do$/;"	f
dequeue_random	deps/exq/lib/exq/redis/job_queue.ex	/^  defp dequeue_random(redis, namespace, queues) do$/;"	f
derive	deps/plug/lib/plug/session/cookie.ex	/^  defp derive(conn, key, key_opts) do$/;"	f
deriving	deps/phoenix/lib/phoenix/param.ex	/^  def deriving(module, struct, options) do$/;"	f
deriving	deps/poison/lib/poison/encoder.ex	/^  def deriving(module, _struct, options) do$/;"	f
description	deps/decimal/mix.exs	/^  defp description do$/;"	f
description	deps/ecto/mix.exs	/^  defp description do$/;"	f
description	deps/postgrex/mix.exs	/^  defp description do$/;"	f
description	deps/tzdata/mix.exs	/^  defp description do$/;"	f
description	deps/uuid/mix.exs	/^  defp description do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :days) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :hours) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :mins) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :months) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :secs) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :timestamp) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :weeks) do$/;"	f
diff	deps/timex/lib/date/date.ex	/^  def diff(this, other, :years) do$/;"	f
diff	deps/timex/lib/time/time.ex	/^  def diff(t1 = {_,_,_}, t2 = {_,_,_}, type) do$/;"	f
diff	deps/timex/lib/time/time.ex	/^  def diff(t1, t2, type \\\\ :timestamp)$/;"	f
diff	deps/timex/lib/time/time.ex	/^  def diff({mega1,secs1,micro1}, {mega2,secs2,micro2}, :timestamp) do$/;"	f
diff	deps/timex/lib/timezone/timezone.ex	/^  def diff(%DateTime{:timezone => origin}, %TimezoneInfo{:offset_std => dest_std, :offset_utc => dest_utc}) do$/;"	f
digest	deps/phoenix/lib/phoenix/digester.ex	/^  defp digest(file) do$/;"	f
digest	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp digest(secret, data) do$/;"	f
digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([?9|rest], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([head|rest], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment(digits),$/;"	f
dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def dir!(dir) when dir in [:asc, :desc],$/;"	f
dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def dir!(other),$/;"	f
direction	deps/ecto/lib/ecto/migration.ex	/^  def direction do$/;"	f
directives	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp directives() do$/;"	f
directives	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp directives() do$/;"	f
disconnect	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  defp disconnect(%{conn: conn, shutdown: shutdown} = s) do$/;"	f
disconnect	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp disconnect(%{conn: conn, shutdown: shutdown} = s) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/router.ex	/^      defp dispatch(conn, []) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(%Message{} = msg, channels, socket) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(%{ref: ref, topic: "phoenix", event: "heartbeat"}, _channels, _socket) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(msg, channels, socket)$/;"	f
dispatch	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def dispatch(conn, endpoint, method, path_or_action, params_or_body \\\\ nil) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{halted: true} = conn, _, _, _, _) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "GET"} = conn, endpoint, handler, transport, opts) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "OPTIONS"} = conn, _, _, _, _) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "POST"} = conn, endpoint, _, _, opts) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(conn, _, _, _, _) do$/;"	f
dispatch	deps/plug/lib/plug/router.ex	/^      defp dispatch(%Plug.Conn{assigns: assigns} = conn, _opts) do$/;"	f
dispatch_endpoint	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp dispatch_endpoint(conn, endpoint, method, action, params_or_body) when is_atom(action) do$/;"	f
dispatch_endpoint	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp dispatch_endpoint(conn, endpoint, method, path, params_or_body) when is_binary(path) do$/;"	f
dispatch_for	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp dispatch_for(plug, opts) do$/;"	f
dispatch_job	deps/exq/lib/exq/manager/server.ex	/^  def dispatch_job(state, job, queue) do$/;"	f
dispatch_work	deps/exq/lib/exq/worker/server.ex	/^  def dispatch_work(worker_module, args) do$/;"	f
dispatch_work	deps/exq/lib/exq/worker/server.ex	/^  def dispatch_work(worker_module, method, args) do$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: exprs}, _sources, query) when is_list(exprs) do$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: false}, _sources, _quety), do: ""$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: true}, _sources, _query),  do: "DISTINCT "$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(nil, _sources, _query), do: ""$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: false}, _exprs), do: ""$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: true}, _exprs),  do: "DISTINCT "$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(_query, exprs), do: "DISTINCT ON (" <> exprs <> ") "$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(nil, _sources), do: ""$/;"	f
distinct	deps/ecto/lib/ecto/query.ex	/^  defmacro distinct(query, binding \\\\ [], expr) do$/;"	a
distinct_exprs	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct_exprs(%Query{distinct: %QueryExpr{expr: exprs}} = query, sources)$/;"	f
distinct_exprs	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct_exprs(_, _), do: ""$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, coef: :inf} = num1, %Decimal{sign: sign2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1}, %Decimal{sign: sign2, coef: 0}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust) when coef1 < coef2,$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust) when coef1 >= coef2 * 10,$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust),$/;"	f
div_calc	deps/decimal/lib/decimal.ex	/^  defp div_calc(coef1, coef2, coef, adjust, prec10) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(num1, num2) do$/;"	f
div_int_calc	deps/decimal/lib/decimal.ex	/^  defp div_int_calc(coef1, coef2, coef, adjust) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, coef: :inf} = num1, %Decimal{sign: sign2}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, coef: coef1, exp: exp1} = num1, %Decimal{sign: sign2, coef: coef2, exp: exp2} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1}, %Decimal{sign: sign2, coef: 0}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
divmod	deps/timex/lib/time/time.ex	/^  defp divmod(a, b) do$/;"	f
divmod	deps/timex/lib/time/time.ex	/^  defp divmod(initial, a, b) do$/;"	f
do_call	deps/phoenix/lib/phoenix/router.ex	/^      defp do_call(unquote(conn), opts) do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<>>) do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<?\/, t :: binary>>) do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<?_, ?_, t :: binary>>) do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<?_, h, t :: binary>>) when h in ?a..?z do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<?_>>) do$/;"	f
do_camelize	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_camelize(<<h, t :: binary>>) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(%{related: model, on_cast: fun} = meta, params, nil) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(%{related: model, on_cast: fun}, params, struct) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(relation, nil, current) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(%{related: model}, struct, nil) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(_relation, %Changeset{model: current} = changeset, current) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(_relation, %Changeset{}, _current) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(_relation, struct, current) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(relation, nil, current) do$/;"	f
do_checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp do_checkout(pool, ref, fun, timeout) do$/;"	f
do_checkout	deps/ecto/lib/ecto/pools/poolboy.ex	/^  defp do_checkout(pool, fun, timeout) do$/;"	f
do_checkout	deps/ecto/lib/ecto/pools/poolboy.ex	/^  defp do_checkout(pool, worker, fun, timeout) do$/;"	f
do_compile	deps/phoenix/lib/phoenix/digester.ex	/^  defp do_compile(files, output_path) do$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([], _fun, [], _did_last_match), do: []$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([], _fun, matched, _did_last_match), do: matched$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([h|t], fun, matched, _did_last_match) do$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching(_list, _fun, matched, false) when length(matched) > 0 do$/;"	f
do_create	deps/ecto/lib/ecto/migration.ex	/^  defp do_create(object, command, block) do$/;"	f
do_create	deps/ecto/lib/ecto/migration.ex	/^  defp do_create(table, command) do$/;"	f
do_decode	deps/plug/lib/plug/conn/cookies.ex	/^  defp do_decode([], acc),$/;"	f
do_decode	deps/plug/lib/plug/conn/cookies.ex	/^  defp do_decode([h|t], acc) do$/;"	f
do_delete	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_delete(_repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_delete	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_delete(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(channel_pid, msg, _socket) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(nil, %{event: "phx_join", topic: topic} = msg, socket) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(nil, msg, socket) do$/;"	f
do_down	deps/ecto/lib/ecto/migrator.ex	/^  defp do_down(repo, version, module, opts) do$/;"	f
do_empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_empty(:many), do: []$/;"	f
do_empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_empty(:one), do: nil$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape(expr, params, vars, env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape(field, params, _vars, _env) when is_atom(field) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({:^, _, [expr]}, params, _vars, _env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, expr}, params, vars, env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, field}, params, _vars, _env) when is_atom(field) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, {:^, _, [expr]}}, params, _vars, _env) do$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :distinct), do: %{query | distinct: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :group_by), do: %{query | group_bys: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :having), do: %{query | havings: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :join), do: %{query | joins: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :limit), do: %{query | limit: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :lock), do: %{query | lock: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :offset), do: %{query | offset: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :order_by), do: %{query | order_bys: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :preload), do: %{query | preloads: [], assocs: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :select), do: %{query | select: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :where), do: %{query | wheres: []}$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(_date, [], result),             do: {:ok, result}$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(_date, _, {:error, _} = error), do: error$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(date, [%Directive{type: :literal, value: char} | dirs], result) when is_binary(char) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(date, [%Directive{type: type, modifiers: mods, flags: flags, width: width} | dirs], result) do$/;"	f
do_format	deps/timex/lib/format/time/formatters/default.ex	/^  defp do_format([], str),    do: str$/;"	f
do_format	deps/timex/lib/format/time/formatters/default.ex	/^  defp do_format([{unit,_} = component|rest], str) do$/;"	f
do_format	deps/timex/lib/format/time/formatters/default.ex	/^  defp do_format(components), do: do_format(components, <<?P>>)$/;"	f
do_format	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp do_format([], str),    do: str$/;"	f
do_format	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp do_format([{unit, value}|rest], str) do$/;"	f
do_format	deps/timex/lib/format/time/formatters/humanized.ex	/^  defp do_format(components), do: do_format(components, <<>>)$/;"	f
do_get_pk	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_get_pk(model_or_params, key), do: Map.get(model_or_params, key)$/;"	f
do_get_pk	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_get_pk(model_or_params, {key, type}) do$/;"	f
do_insert	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_insert(_repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_insert	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_insert(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
do_latest_file_size	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_file_size({tag = :error, error}), do: {tag, error}$/;"	f
do_latest_file_size	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_file_size({tag, _resp_code, headers}) do$/;"	f
do_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_remote_poll_date(_file_exists = false), do: {:unknown, nil}$/;"	f
do_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_remote_poll_date(_file_exists = true) do$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, :any, _current),$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, :any, current) when current in @always_tagged,$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, expected, _current),$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, expected, expected),$/;"	f
do_load	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_load(struct, kv, types, adapter) do$/;"	f
do_load	deps/ecto/lib/ecto/schema.ex	/^  defp do_load(struct, fields, list, loader) when is_list(list) do$/;"	f
do_load	deps/ecto/lib/ecto/schema.ex	/^  defp do_load(struct, fields, map, loader) when is_map(map) do$/;"	f
do_match	deps/plug/lib/plug/router.ex	/^      defp do_match(unquote(conn), unquote(method), unquote(match), unquote(host)) when unquote(guards) do$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:any, _right), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:binary_id, :binary), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:decimal, type) when type in [:float, :integer], do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:id, :integer), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(_, _), do: false$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(_left, :any),  do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(type, type), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?({:array, :any}, {:embed, %{cardinality: :many}}), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?({outer, left}, {outer, right}), do: match?(left, right)$/;"	f
do_measure	deps/timex/lib/time/time.ex	/^      defp do_measure(m, f \\\\ nil, a \\\\ []) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:date, {year, month, day}) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:day, {year, month, day}) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:hour, hour) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:minute, min) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:month, month) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:ms, ms) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:second, sec) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:time, {hour,min,sec,ms}) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:time, {hour,min,sec}) do$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:timezone, tz), do: tz$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:year, year) when year < 0, do: 0$/;"	f
do_normalize	deps/timex/lib/date/date.ex	/^  defp do_normalize(:year, year), do: year$/;"	f
do_parse	deps/timex/lib/parse/datetime/parser.ex	/^  defp do_parse(str, directives, tokenizer) do$/;"	f
do_parse_abbreviations	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_abbreviations(data, %Header{abbrev_length: len} = header, %Zone{transitions: transitions} = tzfile) do$/;"	f
do_parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_array(_, {acc, data}, parser) when is_function(parser) do$/;"	f
do_parse_flags	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_flags(data, %Header{utc_count: utc_count, wall_count: wall_count}, tzfile) do$/;"	f
do_parse_header	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_header(<<header :: bytes(24), rest :: binary>>) do$/;"	f
do_parse_leap_seconds	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_leap_seconds(data, %Header{leap_count: count} = header, tzfile) do$/;"	f
do_parse_transition_info	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_transition_info($/;"	f
do_parse_transition_times	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_transition_times(data, %Header{transition_count: tx_count} = header) do$/;"	f
do_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp do_periods_for_zone(zone) do$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe([], state, acc), do: {:ok, acc, state}$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe([parser|parsers], %ParserState{status: :ok, results: r} = current, acc) do$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe(_parsers, %ParserState{} = state, acc), do: {:error, acc, state}$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe(parsers, state), do: do_pipe(parsers, state, [])$/;"	f
do_precision	deps/decimal/lib/decimal.ex	/^  defp do_precision(sign, digits, exp, precision, rounding, signals) do$/;"	f
do_preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp do_preload(structs, repo, preloads, assocs) do$/;"	f
do_process_param	deps/ecto/lib/ecto/changeset.ex	/^  defp do_process_param(key, param_key, kind, params, type, current,$/;"	f
do_reduce	deps/decimal/lib/decimal.ex	/^  defp do_reduce(0, _exp) do$/;"	f
do_reduce	deps/decimal/lib/decimal.ex	/^  defp do_reduce(coef, exp) do$/;"	f
do_render	deps/phoenix/lib/phoenix/controller.ex	/^  defp do_render(conn, template, format, assigns) do$/;"	f
do_round	deps/decimal/lib/decimal.ex	/^  defp do_round(coef, exp, sign, n, rounding) do$/;"	f
do_round	deps/timex/lib/time/time.ex	/^  defp do_round(value) when is_float(value),   do: Float.round(value, 6)$/;"	f
do_round	deps/timex/lib/time/time.ex	/^  defp do_round(value) when is_integer(value), do: value$/;"	f
do_run	deps/ecto/lib/ecto/pool.ex	/^  defp do_run(pool_mod, pool, timeout, fun) do$/;"	f
do_scope	deps/phoenix/lib/phoenix/router.ex	/^  defp do_scope(options, context) do$/;"	f
do_send	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp do_send(%{owner: owner, ref: ref} = state, status, headers, body) do$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(0, _parser, state, acc), do: {:ok, acc, state}$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(_count, _parser, %ParserState{} = state, acc), do: {:error, acc, state}$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(count, parser, %ParserState{status: :ok, results: r} = current, acc) do$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(count, parser, state), do: do_times(count, parser, state, [])$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<< "..", t :: binary>>, _) do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<>>, _) do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<?-, t :: binary>>, _) do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<?., t :: binary>>, _) do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<?.>>, _), do: <<?.>>$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<h, t :: binary>>, _) do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<h, t :: binary>>, prev) when h in ?A..?Z and not prev in ?A..?Z do$/;"	f
do_underscore	deps/ecto/lib/ecto/association.ex	/^  defp do_underscore(<<h, t, rest :: binary>>, _) when h in ?A..?Z and not t in ?A..?Z do$/;"	f
do_underscore	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_underscore(<<>>, _) do$/;"	f
do_underscore	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_underscore(<<?., t :: binary>>, _) do$/;"	f
do_underscore	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_underscore(<<h, t :: binary>>, _) do$/;"	f
do_underscore	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_underscore(<<h, t :: binary>>, prev) when h in ?A..?Z and not prev in ?A..?Z do$/;"	f
do_underscore	deps/phoenix/lib/phoenix/naming.ex	/^  defp do_underscore(<<h, t, rest :: binary>>, _) when h in ?A..?Z and not (t in ?A..?Z or t == ?.) do$/;"	f
do_underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp do_underscore(<<>>, _) do$/;"	f
do_underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp do_underscore(<<h, t :: binary>>, _) do$/;"	f
do_underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp do_underscore(<<h, t :: binary>>, prev) when h in ?A..?Z and not prev in ?A..?Z do$/;"	f
do_underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp do_underscore(<<h, t, rest :: binary>>, _) when h in ?A..?Z and not t in ?A..?Z do$/;"	f
do_up	deps/ecto/lib/ecto/migrator.ex	/^  defp do_up(repo, version, module, opts) do$/;"	f
do_update	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_update(_repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_update	deps/ecto/lib/ecto/repo/model.ex	/^  defp do_update(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
doc!	deps/ecto/lib/ecto/query/api.ex	/^  defp doc!(_) do$/;"	f
done	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def done(worker, ref) do$/;"	f
down	deps/ecto/integration_test/cases/migrator.exs	/^      def down do$/;"	f
down	deps/ecto/integration_test/cases/migrator.exs	/^    def down do$/;"	f
down	deps/ecto/integration_test/sql/migration.exs	/^    def down do$/;"	f
down	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp down(_, _) do$/;"	f
down	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp down({:checkout, _, _, _, mon}, mon) do$/;"	f
down	deps/ecto/lib/ecto/migration.ex	/^        def down do$/;"	f
down	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def down(repo, version) do$/;"	f
down	deps/ecto/lib/ecto/migrator.ex	/^        def down do$/;"	f
down	deps/ecto/lib/ecto/migrator.ex	/^  def down(repo, version, module, opts \\\\ []) do$/;"	f
down	deps/ecto/lib/ecto/storage.ex	/^  def down(repo) do$/;"	f
downcase_char	deps/plug/lib/plug/conn/utils.ex	/^  defp downcase_char(char) when char in @upper, do: char + 32$/;"	f
downcase_char	deps/plug/lib/plug/conn/utils.ex	/^  defp downcase_char(char), do: char$/;"	f
download_new	deps/tzdata/lib/tzdata/data_loader.ex	/^  def download_new(url\\\\@download_url) do$/;"	f
drop	deps/ecto/lib/ecto/migration.ex	/^  def drop(%{} = object) do$/;"	f
drop_if_exists	deps/ecto/lib/ecto/migration.ex	/^  def drop_if_exists(%{} = object) do$/;"	f
drop_subscriber	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  defp drop_subscriber(state, pid, ref) do$/;"	f
drop_subscription	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  defp drop_subscription(state, pid, topic) do$/;"	f
dump	deps/ecto/integration_test/support/types.exs	/^  def dump(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
dump	deps/ecto/lib/ecto/adapter.ex	/^      def dump(:binary_id, value), do: dump(Ecto.UUID, value)$/;"	f
dump	deps/ecto/lib/ecto/adapter.ex	/^      def dump(:boolean, false), do: {:ok, 0}$/;"	f
dump	deps/ecto/lib/ecto/adapter.ex	/^      def dump(:boolean, true), do: {:ok, 1}$/;"	f
dump	deps/ecto/lib/ecto/adapter.ex	/^      def dump(type, value), do: Ecto.Type.dump(type, value, &dump\/2)$/;"	f
dump	deps/ecto/lib/ecto/adapter.ex	/^  defcallback dump(Ecto.Type.t, term) :: {:ok, term} | :error$/;"	c
dump	deps/ecto/lib/ecto/adapters/sql.ex	/^      def dump(type, value), do: Ecto.Adapters.SQL.dump(type, value, &dump\/2)$/;"	f
dump	deps/ecto/lib/ecto/adapters/sql.ex	/^  def dump(:binary_id, data, dumper),$/;"	f
dump	deps/ecto/lib/ecto/adapters/sql.ex	/^  def dump(type, data, dumper),$/;"	f
dump	deps/ecto/lib/ecto/adapters/sql.ex	/^  def dump({:embed, _} = type, data, dumper),$/;"	f
dump	deps/ecto/lib/ecto/datetime.ex	/^  def dump(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
dump	deps/ecto/lib/ecto/datetime.ex	/^  def dump(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
dump	deps/ecto/lib/ecto/datetime.ex	/^  def dump(%Ecto.Time{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
dump	deps/ecto/lib/ecto/datetime.ex	/^  def dump(_), do: :error$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^        def dump(_), do: :error$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^        def dump(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(type, nil, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(type, value, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(type, value, dumper \\\\ &dump\/2)$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:array, type}, value, dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:embed, embed}, value, dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  defcallback dump(term) :: {:ok, term} | :error$/;"	c
dump	deps/ecto/lib/ecto/uuid.ex	/^  def dump(<< u0::64, ?-, u1::32, ?-, u2::32, ?-, u3::32, ?-, u4::96 >>) do$/;"	f
dump	deps/ecto/lib/ecto/uuid.ex	/^  def dump(_), do: :error$/;"	f
dump_array	deps/ecto/lib/ecto/type.ex	/^  defp dump_array(_type, [], _dumper, acc, false) do$/;"	f
dump_array	deps/ecto/lib/ecto/type.ex	/^  defp dump_array(type, [], _dumper, acc, true) do$/;"	f
dump_array	deps/ecto/lib/ecto/type.ex	/^  defp dump_array(type, [h|t], dumper, acc, tagged) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(%{cardinality: :many, related: model, field: field} = embed,$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(%{cardinality: :one, related: model, field: field} = embed,$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(%{cardinality: :one} = embed, nil, _fun) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(_embed, _value, _fun) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(_field, _model, %Ecto.Changeset{action: :delete}, _types, _fun) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(_field, model, %Ecto.Changeset{model: %{__struct__: model}} = changeset, types, dumper) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(field, _model, value, _types, _fun) do$/;"	f
each_frame	deps/plug/lib/plug/debugger.ex	/^  defp each_frame(entry, index, root, editor) do$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:binary, _query),    do: "blob"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:binary_id, _query), do: "binary(16)"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:float, _query),     do: "double"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:id, _query),        do: "integer"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:map, _query),       do: "text"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:string, _query),    do: "varchar"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:uuid, _query),      do: "binary(16)" # MySQL does not support uuid$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(other, _query),      do: Atom.to_string(other)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(type, query \\\\ nil)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db({:array, _}, query),$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:binary),     do: "bytea"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:binary_id),  do: "uuid"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:datetime),   do: "timestamp"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:id),         do: "integer"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:map),        do: "jsonb"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:string),     do: "varchar"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(other),       do: Atom.to_string(other)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db({:array, t}), do: ecto_to_db(t) <> "[]"$/;"	f
edit	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def edit(conn, %{"id" => id}) do$/;"	f
edit	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def edit(conn, %{"id" => id}) do$/;"	f
elapsed	deps/timex/lib/time/time.ex	/^  def elapsed(timestamp = {_,_,_}, reference_time = {_,_,_}, type) do$/;"	f
elapsed	deps/timex/lib/time/time.ex	/^  def elapsed(timestamp = {_,_,_}, type) do$/;"	f
elapsed	deps/timex/lib/time/time.ex	/^  def elapsed(timestamp, type \\\\ :timestamp)$/;"	f
elixirc_paths	mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "web", "test\/support"]$/;"	f
elixirc_paths	mix.exs	/^  defp elixirc_paths(_),     do: ["lib", "web"]$/;"	f
email_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def email_input(form, field, opts \\\\ []) do$/;"	f
embed	deps/ecto/lib/ecto/schema.ex	/^  defp embed(mod, cardinality, name, model, opts) do$/;"	f
embed_id	deps/ecto/lib/ecto/adapter.ex	/^  defcallback embed_id(Ecto.Embedded.t) :: String.t$/;"	c
embed_id	deps/ecto/lib/ecto/adapters/sql.ex	/^      def embed_id(_), do: Ecto.UUID.generate$/;"	f
embedded_schema	deps/ecto/lib/ecto/schema.ex	/^  defmacro embedded_schema(opts) do$/;"	a
embeds_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_many(name, model, opts \\\\ []) do$/;"	a
embeds_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_one(name, model, opts \\\\ []) do$/;"	a
empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty(%{cardinality: cardinality}), do: do_empty(cardinality)$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: :many}, []), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: :one}, nil), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: _}, %NotLoaded{}), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{}, _), do: false$/;"	f
empty_rules_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp empty_rules_map(from_initial_pass) do$/;"	f
encode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode(%TypeInfo{send: "date_send"}, date, _, _),$/;"	f
encode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode(%TypeInfo{send: "time_send"}, time, _, _),$/;"	f
encode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode(%TypeInfo{send: "timestamp_send"}, timestamp, _, _),$/;"	f
encode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode(%TypeInfo{send: "timestamptz_send"}, timestamp, _, _),$/;"	f
encode	deps/ecto/lib/ecto/poison.ex	/^    def encode(decimal, _opts), do: <<?", Decimal.to_string(decimal)::binary, ?">>$/;"	f
encode	deps/ecto/lib/ecto/poison.ex	/^    def encode(dt, _opts), do: <<?", @for.to_iso8601(dt)::binary, ?">>$/;"	f
encode	deps/ecto/lib/ecto/uuid.ex	/^  defp encode(<<u0::32, u1::16, u2::16, u3::16, u4::48>>) do$/;"	f
encode	deps/exq/lib/exq/support/json.ex	/^  def encode(e) do$/;"	f
encode	deps/phoenix/lib/phoenix/view.ex	/^  defp encode(content, template) do$/;"	f
encode	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    def encode(%{__owner__: owner, __field__: field}, _) do$/;"	f
encode	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    def encode(changeset, opts) do$/;"	f
encode	deps/plug/lib/plug/conn/cookies.ex	/^  def encode(key, opts \\\\ %{}) when is_map(opts) do$/;"	f
encode	deps/plug/lib/plug/conn/query.ex	/^  def encode(dict, encoder \\\\ &to_string\/1) do$/;"	f
encode	deps/plug/lib/plug/session/cookie.ex	/^  defp encode(term, :external_term_format) do$/;"	f
encode	deps/plug/lib/plug/session/cookie.ex	/^  defp encode(term, serializer) do$/;"	f
encode	deps/poison/lib/poison.ex	/^  def encode(value, options \\\\ []) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^        def encode(struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode("", _), do: "\\"\\""$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(%{__struct__: _} = struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode([], _), do: "[]"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(atom, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(false, _), do: "false"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(float, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(integer, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _) when map_size(map) < 1, do: "{}"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(nil, _),   do: "null"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(string, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(true, _),  do: "true"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, options)$/;"	f
encode	deps/postgrex/lib/postgrex/extension.ex	/^  defcallback encode(TypeInfo.t, term, Types.types, opts) :: binary$/;"	c
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^    def encode(%TypeInfo{send: unquote(sender)}, n, _, _) when is_integer(n) and n in @oid_range,$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^    def encode(%TypeInfo{send: unquote(sender)}, value, _, _) when is_binary(value),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "array_send", array_elem: elem_oid}, list, types, _) when is_list(list),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "boolsend"}, false, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "boolsend"}, true, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "bpcharsend"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "byteasend"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "date_send"}, date, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "enum_send"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float4send"}, :"-inf", _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float4send"}, :NaN, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float4send"}, :inf, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float4send"}, n, _, _) when is_number(n),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float8send"}, :"-inf", _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float8send"}, :NaN, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float8send"}, :inf, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "float8send"}, n, _, _) when is_number(n),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "int2send"}, n, _, _)$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "int4send"}, n, _, _)$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "int8send"}, n, _, _)$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "interval_send"}, interval, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "numeric_send"}, %Decimal{} = n, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "numeric_send"}, n, _, _) when is_number(n),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "range_send", base_type: oid}, %Postgrex.Range{} = range, types, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "record_send", comp_elems: elem_oids}, tuple, types, _) when is_tuple(tuple),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "textsend"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "tidsend"}, {block, tuple}, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "time_send"}, time, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "timestamp_send"}, timestamp, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "timestamptz_send"}, timestamp, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "timetz_send"}, time, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "unknownsend"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "uuid_send"}, <<_ :: binary(16)>> = bin, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "varcharsend"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{send: "void_send"}, :void, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{type: "citext"}, bin, _, _) when is_binary(bin),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def encode(%TypeInfo{type: "hstore"}, map, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def encode(%TypeInfo{type: "json"}, map, _state, library),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def encode(%TypeInfo{type: "jsonb"}, map, _state, library),$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def encode(%TypeInfo{output: "void_out"}, :void, _, _),$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_bind(name_port: port, name_stat: stat, param_formats: param_formats,$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_describe(type: type, name: name)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_execute(name_port: port, max_rows: rows)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_flush()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_parse(name: name, query: query, type_oids: oids)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_password(pass: pass)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_ssl_request()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_startup(params: params)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_sync()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_terminate()) do$/;"	f
encode	deps/postgrex/lib/postgrex/types.ex	/^  def encode(extension, oid, value, state) do$/;"	f
encode	deps/postgrex/lib/postgrex/types.ex	/^  def encode(oid, value, state) do$/;"	f
encode!	deps/exq/lib/exq/support/json.ex	/^  def encode!(e) do$/;"	f
encode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def encode!(%Message{} = msg), do: msg$/;"	f
encode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def encode!(%Reply{} = reply), do: reply$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def encode!(%Message{} = msg), do: msg$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def encode!(%Reply{} = reply) do$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/serializer.ex	/^  defcallback encode!(Phoenix.Socket.Message.t | Phoenix.Socket.Reply.t) :: term$/;"	c
encode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def encode!(%Message{} = msg) do$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def encode!(%Reply{} = reply) do$/;"	f
encode!	deps/poison/lib/poison.ex	/^  def encode!(value, options \\\\ []) do$/;"	f
encode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_array([], ndims, lengths, _encoder) do$/;"	f
encode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_array([head|tail]=list, ndims, lengths, encoder)$/;"	f
encode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_array(list, elem_oid, types) do$/;"	f
encode_array	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_array(list, ndims, lengths, encoder) do$/;"	f
encode_changeset	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    defp encode_changeset(%{errors: errors, changes: changes, types: types}) do$/;"	f
encode_date	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp encode_date({year, month, day}) when year <= @date_max_year do$/;"	f
encode_date	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_date(%Postgrex.Date{year: year, month: month, day: day}) when year <= @date_max_year do$/;"	f
encode_dict	deps/plug/lib/plug/conn/query.ex	/^  defp encode_dict(dict, parent_field, encoder) do$/;"	f
encode_hstore	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_hstore(hstore_map) when is_map(hstore_map) do$/;"	f
encode_hstore_key	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_hstore_key(key) when is_binary(key) do$/;"	f
encode_hstore_key	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_hstore_key(key) when is_nil(key) do$/;"	f
encode_hstore_value	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_hstore_value(nil) do$/;"	f
encode_hstore_value	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_hstore_value(value) when is_binary(value) do$/;"	f
encode_interval	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_interval(%Postgrex.Interval{months: months, days: days, secs: secs}) do$/;"	f
encode_key	deps/plug/lib/plug/conn/query.ex	/^  defp encode_key(item) do$/;"	f
encode_msg	deps/postgrex/lib/postgrex/messages.ex	/^  def encode_msg(msg) do$/;"	f
encode_name	deps/poison/lib/poison/encoder.ex	/^      defp encode_name(value) do$/;"	f
encode_numeric	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_numeric(dec) do$/;"	f
encode_numeric_float	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_numeric_float([], [digit|acc]) do$/;"	f
encode_numeric_float	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_numeric_float(list, acc) do$/;"	f
encode_numeric_int	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_numeric_int([], weight, acc) do$/;"	f
encode_numeric_int	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_numeric_int(list, weight, acc) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, %{__struct__: struct} = map, encoder) when is_atom(struct) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, nil, _encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, value, encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, %{} = map, encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, list, encoder) when is_list(list) and is_tuple(hd(list)) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, list, encoder) when is_list(list) do$/;"	f
encode_params	deps/postgrex/lib/postgrex/protocol.ex	/^  defp encode_params(%{bootstrap: {_, _, _, _}}) do$/;"	f
encode_params	deps/postgrex/lib/postgrex/protocol.ex	/^  defp encode_params(%{queue: queue, portal: param_oids, types: types}) do$/;"	f
encode_range	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_range(%Postgrex.Range{lower: nil, upper: nil}, _oid, _types) do$/;"	f
encode_range	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_range(range, oid, types) do$/;"	f
encode_record	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_record(tuple, elem_oids, types) do$/;"	f
encode_reply	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp encode_reply(reply, state) do$/;"	f
encode_time	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp encode_time({hour, min, sec, usec})$/;"	f
encode_time	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_time(%Postgrex.Time{hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_timestamp	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp encode_timestamp({{year, month, day}, {hour, min, sec, usec}})$/;"	f
encode_timestamp	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp encode_timestamp(%Postgrex.Timestamp{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_to_iodata	deps/poison/lib/poison.ex	/^  def encode_to_iodata(value, options \\\\ []) do$/;"	f
encode_to_iodata!	deps/phoenix/lib/phoenix/template/html.ex	/^  def encode_to_iodata!(body) when is_binary(body), do: Plug.HTML.html_escape(body)$/;"	f
encode_to_iodata!	deps/phoenix/lib/phoenix/template/html.ex	/^  def encode_to_iodata!({:safe, body}), do: body$/;"	f
encode_to_iodata!	deps/poison/lib/poison.ex	/^  def encode_to_iodata!(value, options \\\\ []) do$/;"	f
encode_value	deps/plug/lib/plug/conn/query.ex	/^  defp encode_value(item, encoder) do$/;"	f
encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp encrypt(message, cipher, secret, iv) do$/;"	f
encrypt_and_sign	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def encrypt_and_sign(message, secret, sign_secret, cipher \\\\ :aes_cbc256)$/;"	f
end_command	deps/ecto/lib/ecto/migration/runner.ex	/^  def end_command do$/;"	f
endpoint_module	deps/phoenix/lib/phoenix/controller.ex	/^  def endpoint_module(conn), do: conn.private.phoenix_endpoint$/;"	f
engine_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp engine_expr(nil),$/;"	f
engine_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp engine_expr(storage_engine),$/;"	f
engine_for	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^  defp engine_for(name) do$/;"	f
engines	deps/phoenix/lib/phoenix/template.ex	/^  def engines do$/;"	f
enqueue	deps/exq/lib/exq.ex	/^  def enqueue(pid, queue, worker, args) do$/;"	f
enqueue	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue(pid, from, queue, worker, args) do$/;"	f
enqueue	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue(pid, queue, worker, args) do$/;"	f
enqueue	deps/exq/lib/exq/redis/job_queue.ex	/^  def enqueue(redis, namespace, job_json) do$/;"	f
enqueue	deps/exq/lib/exq/redis/job_queue.ex	/^  def enqueue(redis, namespace, queue, job_json) do$/;"	f
enqueue	deps/exq/lib/exq/redis/job_queue.ex	/^  def enqueue(redis, namespace, queue, worker, args) do$/;"	f
enqueue_at	deps/exq/lib/exq.ex	/^  def enqueue_at(pid, queue, time, worker, args) do$/;"	f
enqueue_at	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue_at(pid, from, queue, time, worker, args) do$/;"	f
enqueue_at	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue_at(pid, queue, time, worker, args) do$/;"	f
enqueue_at	deps/exq/lib/exq/redis/job_queue.ex	/^  def enqueue_at(redis, namespace, queue, time, worker, args) do$/;"	f
enqueue_in	deps/exq/lib/exq.ex	/^  def enqueue_in(pid, queue, offset, worker, args) do$/;"	f
enqueue_in	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue_in(pid, from, queue, offset, worker, args) do$/;"	f
enqueue_in	deps/exq/lib/exq/enqueuer.ex	/^  def enqueue_in(pid, queue, offset, worker, args) do$/;"	f
enqueue_in	deps/exq/lib/exq/redis/job_queue.ex	/^  def enqueue_in(redis, namespace, queue, offset, worker, args) do$/;"	f
ensure_accepted_mimes	deps/plug/lib/plug/parsers.ex	/^  defp ensure_accepted_mimes(conn, _type, _subtype, ["*\/*"]), do: conn$/;"	f
ensure_accepted_mimes	deps/plug/lib/plug/parsers.ex	/^  defp ensure_accepted_mimes(conn, type, subtype, pass) do$/;"	f
ensure_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp ensure_csrf_token(conn, csrf_token) do$/;"	f
ensure_implements	deps/ecto/lib/mix/ecto.ex	/^  def ensure_implements(module, behaviour, message) do$/;"	f
ensure_no_duplication	deps/ecto/lib/ecto/migrator.ex	/^  defp ensure_no_duplication([]), do: :ok$/;"	f
ensure_no_duplication	deps/ecto/lib/ecto/migrator.ex	/^  defp ensure_no_duplication([{version, name, _} | t]) do$/;"	f
ensure_recycled	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def ensure_recycled(conn) do$/;"	f
ensure_repo	deps/ecto/lib/mix/ecto.ex	/^  def ensure_repo(repo, args) do$/;"	f
ensure_resp_content_type	deps/phoenix/lib/phoenix/controller.ex	/^  defp ensure_resp_content_type(%{resp_headers: resp_headers} = conn, content_type) do$/;"	f
ensure_same_origin_and_csrf_token!	deps/plug/lib/plug/csrf_protection.ex	/^  defp ensure_same_origin_and_csrf_token!(conn, csrf_token) do$/;"	f
ensure_schema_migrations_table!	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def ensure_schema_migrations_table!(repo) do$/;"	f
ensure_started	deps/ecto/lib/mix/ecto.ex	/^  def ensure_started(repo) do$/;"	f
ensure_stopped	deps/ecto/lib/mix/ecto.ex	/^  def ensure_stopped(repo, pid) do$/;"	f
ensure_tmp_dir	deps/plug/lib/plug/upload.ex	/^  defp ensure_tmp_dir(tmps) do$/;"	f
entry	deps/plug/lib/plug/mime.ex	/^    defp entry(unquote(type)), do: unquote(exts)$/;"	f
entry	deps/plug/lib/plug/mime.ex	/^  defp entry(_type), do: nil$/;"	f
env	deps/tzdata/mix.exs	/^  defp env do$/;"	f
env_run	deps/ecto/mix.exs	/^  defp env_run(env, args) do$/;"	f
eof_impl	deps/combine/lib/combine/parsers/base.ex	/^  defp eof_impl(%ParserState{status: :ok, line: line, column: col} = state) do$/;"	f
epoch	deps/timex/lib/date/date.ex	/^  def epoch(:secs),      do: to_secs(epoch(), :zero)$/;"	f
epoch	deps/timex/lib/date/date.ex	/^  def epoch(:timestamp), do: to_timestamp(epoch())$/;"	f
epoch	deps/timex/lib/date/date.ex	/^  def epoch, do: construct({1970, 1, 1}, {0, 0, 0}, %TimezoneInfo{})$/;"	f
epoch	deps/timex/lib/time/time.ex	/^  def epoch(:timestamp) do$/;"	f
epoch	deps/timex/lib/time/time.ex	/^  def epoch(type \\\\ :timestamp)$/;"	f
epoch	deps/timex/lib/time/time.ex	/^  def epoch(type), do: convert(epoch, type)$/;"	f
equal?	deps/decimal/lib/decimal.ex	/^  def equal?(num1, num2) do$/;"	f
equal?	deps/timex/lib/date/date.ex	/^  def equal?(this, other), do: compare(this, other) == 0$/;"	f
erl_load	deps/ecto/lib/ecto/datetime.ex	/^  defp erl_load({_, {hour, min, sec}}) do$/;"	f
erl_load	deps/ecto/lib/ecto/datetime.ex	/^  defp erl_load({{year, month, day}, _time}) do$/;"	f
erl_load	deps/ecto/lib/ecto/datetime.ex	/^  defp erl_load({{year, month, day}, {hour, min, sec}}) do$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date(:max), do: :max$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date(:min), do: :min$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date({{y, m, d}, _} = date) do$/;"	f
error	deps/decimal/lib/decimal.ex	/^  defmacrop error(flags, reason, result, context \\\\ nil) do$/;"	a
error	deps/postgrex/lib/postgrex/utils.ex	/^  def error(error, s) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp error!(nil, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp error!(query, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp error!(nil, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp error!(query, message) do$/;"	f
error!	deps/ecto/lib/ecto/query/builder.ex	/^  def error!(message) when is_binary(message) do$/;"	f
error!	deps/ecto/lib/ecto/query/planner.ex	/^  defp error!(query, expr, message) do$/;"	f
error!	deps/ecto/lib/ecto/query/planner.ex	/^  defp error!(query, message) do$/;"	f
error_on_nil	deps/ecto/lib/ecto/changeset.ex	/^  defp error_on_nil(:required, key, nil, errors, _valid?),$/;"	f
error_on_nil	deps/ecto/lib/ecto/changeset.ex	/^  defp error_on_nil(_kind, _key, _value, errors, valid?),$/;"	f
errors_on	test/support/model_case.ex	/^  def errors_on(model, data) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(binary, type, params, vars, _env) when is_binary(binary),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(boolean, type, params, vars, _env) when is_boolean(boolean),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(expr, type, params, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(list, _type, params, vars, env) when is_list(list),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(list, {:array, type}, params, vars, env) when is_list(list),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(nil, _type, params, _vars, _env),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(number, type, params, vars, _env) when is_number(number),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(other, _type, _params, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:-, _, [number]}, type, params, vars, _env) when is_number(number),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:<<>>, _, _} = expr, type, params, vars, _env),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:^, _, [arg]}, type, params, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:date_add, _, [date, count, interval]} = expr, type, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:datetime_add, _, [datetime, count, interval]} = expr, type, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:field, _, [{var, _, context}, field]}, _type, params, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [query | _]}, _type, _params, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [query]}, _type, params, vars, env) when is_list(query) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [query|frags]}, _type, params, vars, env) when is_binary(query) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [{:^, _, _} = expr]}, _type, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:in, _, [left, right]} = expr, type, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:in, _, [left, right]} = expr, type, params, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:in, _, [left, {:^, _, _} = right]} = expr, type, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:type, _, [{:^, _, [arg]}, type]}, _type, params, vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({comp_op, _, [left, right]} = expr, type, params, vars, env) when comp_op in ~w(== != < > <= >=)a do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, [_, []]} = sigil, type, params, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, args} = expr, type, params, vars, env) when is_atom(name) and is_list(args) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, context} = var, _type, _params, _vars, _env) when is_atom(name) and is_atom(context) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({{:., _, [{var, _, context}, field]}, _, []}, _type, params, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def escape(expr, _vars, _env) when is_boolean(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def escape(expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  defp escape(expr, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/from.ex	/^  def escape(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/from.ex	/^  def escape({:in, _, [var, expr]}) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def escape(expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape(join, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape(string, _vars, _env) when is_binary(string) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:__aliases__, _, _} = module, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:assoc, _, [{var, _, context}, field]}, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:fragment, _, [_|_]} = expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:in, _, [{var, _, context}, expr]}, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({string, atom}, _vars, _env) when is_binary(string) and is_atom(atom) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({string, {:__aliases__, _, _} = module}, _vars, _env) when is_binary(string) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def escape(lock) when is_binary(lock), do: lock$/;"	f
escape	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def escape(other) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def escape(expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def escape({:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def escape(preloads, vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(atom, mode, preloads, assocs, _vars) when is_atom(atom) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(list, mode, preloads, assocs, vars) when is_list(list) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(other, _mode, _preloads, _assocs, _vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape({:^, _, [inner]} = expr, mode, preloads, assocs, _vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  def escape(other, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape(list, params, vars, env) when is_list(list) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape(other, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:%{}, _, pairs}, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:{}, _, list}, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({left, right}, params, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({var, _, context}, params, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape(expr, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape(expr, vars, env) when is_list(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape({:^, _, [v]}, _vars, _env) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^    defp escape(<<unquote(char)>> <> rest, mode) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape("", _), do: []$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :javascript) when char in [0x2028, 0x2029] do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char > 0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char in 0xA0..0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, mode) when char in 0x80..0x9F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char>> <> rest, mode) when char < 0x1F or char == 0x7F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(string, mode) do$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({bind, _ix}),$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({{var, _, context}, ix}) when is_atom(var) and is_atom(context),$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({{var, _} = tuple, _}) when is_atom(var),$/;"	f
escape_binding	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_binding(bind) do$/;"	f
escape_binding	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_binding(binding) when is_list(binding) do$/;"	f
escape_call	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_call({name, _, args}, type, params, vars, env) do$/;"	f
escape_char	deps/plug/lib/plug/html.ex	/^    defp escape_char(unquote(match)), do: unquote(insert)$/;"	f
escape_char	deps/plug/lib/plug/html.ex	/^  defp escape_char(char), do: char$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each(other, mode, {preloads, assocs}, vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, list}, mode, {preloads, assocs}, vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {:^, _, [inner]}} = expr, mode, {preloads, assocs}, _vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {var, _, context}}, mode, {preloads, assocs}, vars) when is_atom(context) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {{var, _, context}, list}}, mode, {preloads, assocs}, vars) when is_atom(context) do$/;"	f
escape_field	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_field(var, field, vars) do$/;"	f
escape_field	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_field(key, kw, params, vars, env) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, [{_, _}|_] = exprs}, type, params, vars, env) when is_atom(key) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, _expr}, _type, _params, _vars, _env) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, expr}, type, params, vars, env) when is_atom(key) do$/;"	f
escape_interval	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_interval(count, interval, params, vars, env) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key(atom) when is_atom(atom) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key(other) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key({:^, _, [expr]}) do$/;"	f
escape_on	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp escape_on(on, binding, env) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([], compile, runtime, params, _vars, _env) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([{k, v}|t], compile, runtime, params, vars, env) when is_atom(k) and is_list(v) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([{k, {:^, _, [v]}}|t], compile, runtime, params, vars, env) when is_atom(k) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op(expr, _compile, _runtime, _params, _vars, _env) do$/;"	f
escape_params	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_params(map) do$/;"	f
escape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_query(%Query{} = query),$/;"	f
escape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_query(other),$/;"	f
escape_string	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp escape_string(value) when is_binary(value) do$/;"	f
escape_string	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp escape_string(value) when is_binary(value) do$/;"	f
escape_var	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_var(var, vars) do$/;"	f
etag_for_path	deps/plug/lib/plug/static.ex	/^  defp etag_for_path(file_info) do$/;"	f
ets_file_name_for_release_version	deps/tzdata/lib/tzdata/data_builder.ex	/^  def ets_file_name_for_release_version(release_version) do$/;"	f
ets_table_name_for_release_version	deps/tzdata/lib/tzdata/data_builder.ex	/^  def ets_table_name_for_release_version(release_version) do$/;"	f
exception	deps/decimal/lib/decimal.ex	/^    def exception(opts) do$/;"	f
exception	deps/ecto/lib/ecto/exceptions.ex	/^  def exception(opts) do$/;"	f
exception	deps/phoenix/lib/phoenix/exceptions.ex	/^  def exception([key: value]) do$/;"	f
exception	deps/phoenix/lib/phoenix/exceptions.ex	/^  def exception(opts) do$/;"	f
exception	deps/phoenix/lib/phoenix/pubsub.ex	/^    def exception(msg) do$/;"	f
exception	deps/phoenix/lib/phoenix/router.ex	/^    def exception(opts) do$/;"	f
exception	deps/poison/lib/poison/parser.ex	/^  def exception(opts) do$/;"	f
exception	deps/postgrex/lib/postgrex/error.ex	/^  def exception([postgres: fields]) do$/;"	f
exception	deps/postgrex/lib/postgrex/error.ex	/^  def exception(arg) do$/;"	f
exception	deps/timex/lib/format/format_error.ex	/^  def exception([message: message]) do$/;"	f
exception	deps/timex/lib/parse/parse_error.ex	/^  def exception([message: message]) do$/;"	f
exclude	deps/ecto/lib/ecto/query.ex	/^  def exclude(%Ecto.Query{} = query, field), do: do_exclude(query, field)$/;"	f
exclude	deps/ecto/lib/ecto/query.ex	/^  def exclude(query, field), do: do_exclude(Ecto.Queryable.to_query(query), field)$/;"	f
execute	deps/ecto/lib/ecto/adapter.ex	/^  defcallback execute(repo, query_meta :: map, prepared, params :: list(), preprocess | nil, options) ::$/;"	c
execute	deps/ecto/lib/ecto/adapters/sql.ex	/^      def execute(repo, meta, prepared, params, preprocess, opts) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  def execute(repo, _meta, prepared, params, nil, opts) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  def execute(repo, meta, prepared, params, preprocess, opts) do$/;"	f
execute	deps/ecto/lib/ecto/migration.ex	/^  def execute(command) when is_binary(command) or is_list(command) do$/;"	f
execute	deps/ecto/lib/ecto/migration/runner.ex	/^  def execute(command) do$/;"	f
execute	deps/ecto/lib/ecto/repo/queryable.ex	/^  def execute(operation, repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapter/migration.ex	/^  defcallback execute_ddl(Ecto.Repo.t, command, Keyword.t) :: :ok | no_return$/;"	c
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl(keyword) when is_list(keyword),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl(string) when is_binary(string), do: string$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:alter, %Table{}=table, changes}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create, %Index{}=index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create_if_not_exists, %Index{}}),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:drop, %Index{}=index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:drop_if_exists, %Index{}}),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:rename, %Table{}=current_table, %Table{}=new_table}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:rename, %Table{}=table, current_column, new_column}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({command, %Table{name: name}}) when command in [:drop, :drop_if_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({command, %Table{} = table, columns}) when command in [:create, :create_if_not_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl(keyword) when is_list(keyword),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl(string) when is_binary(string), do: string$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:alter, %Table{}=table, changes}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:create, %Index{}=index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:create_if_not_exists, %Index{}=index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:rename, %Table{}=current_table, %Table{}=new_table}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:rename, %Table{}=table, current_column, new_column}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Index{}=index}) when command in @drops do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Table{name: name}}) when command in @drops do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Table{}=table, columns}) when command in [:create, :create_if_not_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/sql.ex	/^      def execute_ddl(repo, definition, opts) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback execute_ddl(Ecto.Adapter.Migration.command) :: String.t$/;"	c
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :backward, level, command) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :backward, level, {:drop, %Index{}=index}) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :backward, level, {command, %Index{}=index}) when command in @creates do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :forward, level, command) do$/;"	f
exists?	deps/timex/lib/timezone/timezone.ex	/^  def exists?(zone), do: Tzdata.zone_exists?(zone) || Enum.member?(@abbreviations, zone)$/;"	f
expand	deps/ecto/lib/ecto/repo/preloader.ex	/^  def expand(model, preloads, acc) do$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([]), do: "\/"$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([h|t], acc) when is_binary(h),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([h|t], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([{:|, _, [h, t]}], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments(segments) when is_list(segments),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments(segments),$/;"	f
expire!	deps/exq/lib/exq/redis/connection.ex	/^  def expire!(redis, key, time \\\\ 10) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Decimal{} = decimal, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: binary, type: :binary}, _sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(false, _sources, _query), do: "FALSE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(list, _sources, query) when is_list(list) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_binary(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_float(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_integer(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(nil, _sources, _query),   do: "NULL"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(true, _sources, _query),  do: "TRUE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:&, _, [idx]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:^, [], [_ix]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:date_add, _, [date, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:datetime_add, _, [datetime, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:fragment, _, [kw]}, _sources, query) when is_list(kw) or tuple_size(kw) == 3 do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:fragment, _, parts}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [_left, []]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) when is_list(right) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, {:^, _, [ix, length]}]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:is_nil, _, [arg]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:not, _, [expr]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({fun, _, args}, sources, query) when is_atom(fun) and is_list(args) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({{:., _, [{:&, _, [idx]}, field]}, _, []}, sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Decimal{} = decimal, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: binary, type: :binary}, _sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(false, _sources, _query), do: "FALSE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(list, sources, query) when is_list(list) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_binary(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_float(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_integer(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(nil, _sources, _query),   do: "NULL"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(true, _sources, _query),  do: "TRUE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:&, _, [idx]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:^, [], [ix]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:date_add, _, [date, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:datetime_add, _, [datetime, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:fragment, _, [kw]}, _sources, query) when is_list(kw) or tuple_size(kw) == 3 do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:fragment, _, parts}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [_left, []]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) when is_list(right) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, {:^, _, [ix, length]}]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:is_nil, _, [arg]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:not, _, [expr]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({fun, _, args}, sources, query) when is_atom(fun) and is_list(args) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({{:., _, [{:&, _, [idx]}, field]}, _, []}, sources, _query) when is_atom(field) do$/;"	f
expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr(%{expr: expr, params: params}, names) do$/;"	f
expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr(expr, names, params) do$/;"	f
expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp expr(expr) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(%Ecto.Query.Tagged{value: value, tag: nil}, _, _names, _params) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(%Ecto.Query.Tagged{value: value, tag: tag}, _, names, params) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(_expr, string, _, _) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:&, _, [ix]}, _, names, _) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:^, _, [_ix, _len]}, _, _, _params) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:^, _, [ix]}, _, _, params) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:fragment, _, [{_, _}|_] = parts}, _, names, params) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({{:., _, [_, _]}, _, []}, string, _, _) do$/;"	f
exprs	deps/phoenix/lib/phoenix/router/route.ex	/^  def exprs(route) do$/;"	f
extension_matchers	deps/postgrex/lib/postgrex/types.ex	/^  def extension_matchers(extensions, extension_opts) do$/;"	f
extensions	deps/plug/lib/plug/mime.ex	/^  def extensions(type) do$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([[h|_]|t2]),   do: [h|extract(t2)]$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([[nil|_]|t2]), do: extract(t2)$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([]),           do: []$/;"	f
extract	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp extract(stack, attr) do$/;"	f
extract	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp extract(filename, target_dir) do$/;"	f
extract_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp extract_actions(opts, singleton) do$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<>>, acc, extracting_fractional, _) do$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<?.::utf8,rest::binary>>, acc, false, _), do: extract_float(rest, <<acc::binary, ?.::utf8>>, true, ".")$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<c::utf8,rest::binary>>, acc, extracting_fractional, _)$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(_, acc, _, _), do: {:ok, acc}$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(_, acc, false, <<?.::utf8>>), do: {:error, {:incomplete_float, acc}}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, _acc, _size), do: {:error, :eof}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, acc, 0), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, acc, size) when size < 0, do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<c::utf8,rest::binary>>, acc, size) when c in @digits and size < 0 do$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<c::utf8,rest::binary>>, acc, size) when c in @digits and size > 0 do$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, _, size) when size > 0, do: {:error, :badmatch, size}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, acc, 0), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, acc, _), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_input, acc, 0), do: {:ok, acc}$/;"	f
extract_migration_info	deps/ecto/lib/ecto/migrator.ex	/^  defp extract_migration_info(file) do$/;"	f
extract_path	deps/plug/lib/plug/router.ex	/^  defp extract_path(path), do: path$/;"	f
extract_path	deps/plug/lib/plug/router.ex	/^  defp extract_path({:_, _, var}) when is_atom(var), do: "\/*_path"$/;"	f
extract_path_and_guards	deps/plug/lib/plug/router.ex	/^  defp extract_path_and_guards(path), do: {extract_path(path), true}$/;"	f
extract_path_and_guards	deps/plug/lib/plug/router.ex	/^  defp extract_path_and_guards({:when, _, [path, guards]}), do: {extract_path(path), guards}$/;"	f
extract_private_merger	deps/plug/lib/plug/router.ex	/^  defp extract_private_merger(options) when is_list(options) do$/;"	f
fail	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp fail(message) do$/;"	f
failed	deps/exq/lib/exq/api.ex	/^  def failed(pid) do$/;"	f
failed_count	deps/exq/test/test_helper.exs	/^  def failed_count(redis, namespace) do$/;"	f
failure_perform	deps/exq/test/exq_test.exs	/^    def failure_perform do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def fastlane!(%Broadcast{} = msg) do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def fastlane!(%Broadcast{} = msg) do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/transports/serializer.ex	/^  defcallback fastlane!(Phoenix.Socket.Broadcast.t) :: term$/;"	c
fastlane!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def fastlane!(%Broadcast{} = msg) do$/;"	f
fetch	deps/postgrex/lib/postgrex/type_server.ex	/^  def fetch(key) do$/;"	f
fetch!	deps/postgrex/lib/postgrex/types.ex	/^  defp fetch!(table, oid) do$/;"	f
fetch_and_delete	deps/ecto/lib/ecto/model/dependent.ex	/^  def fetch_and_delete(%Changeset{repo: repo, model: model} = changeset, assoc_field, _related_key) do$/;"	f
fetch_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def fetch_assign(assigns, key) do$/;"	f
fetch_change	deps/ecto/lib/ecto/changeset.ex	/^  def fetch_change(%Changeset{changes: changes} = _changeset, key) when is_atom(key) do$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(%Conn{req_cookies: %Unfetched{},$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(%Conn{} = conn, _opts) do$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(conn, opts \\\\ [])$/;"	f
fetch_field	deps/ecto/lib/ecto/changeset.ex	/^  def fetch_field(%Changeset{changes: changes, model: model, types: types}, key) do$/;"	f
fetch_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def fetch_flash(conn, _opts \\\\ []) do$/;"	f
fetch_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate fetch_flash(conn), to: Phoenix.Controller$/;"	d
fetch_format	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp fetch_format(conn, opts) do$/;"	f
fetch_opts	deps/postgrex/lib/postgrex/types.ex	/^  defp fetch_opts(table, extension) do$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(%Conn{query_params: %Unfetched{}, params: params,$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(%Conn{} = conn, _opts) do$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(conn, opts \\\\ [])$/;"	f
fetch_session	deps/plug/lib/plug/conn.ex	/^  def fetch_session(%Conn{private: private} = conn, _opts) do$/;"	f
fetch_session	deps/plug/lib/plug/conn.ex	/^  def fetch_session(conn, opts \\\\ [])$/;"	f
fetch_session	deps/plug/lib/plug/session.ex	/^  defp fetch_session(config) do$/;"	f
field	deps/ecto/lib/ecto/query/api.ex	/^  def field(source, field), do: doc! [source, field]$/;"	f
field	deps/ecto/lib/ecto/schema.ex	/^  defmacro field(name, type \\\\ :string, opts \\\\ []) do$/;"	a
field!	deps/ecto/lib/ecto/query/builder.ex	/^  def field!(atom) when is_atom(atom),$/;"	f
field!	deps/ecto/lib/ecto/query/builder.ex	/^  def field!(other),$/;"	f
field!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def field!(field) when is_atom(field),$/;"	f
field!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def field!(other),$/;"	f
fields	deps/ecto/lib/ecto/query/planner.ex	/^  def fields(model, kind, kw, adapter) do$/;"	f
file_encoding	deps/plug/lib/plug/static.ex	/^  defp file_encoding(conn, path, gzip) do$/;"	f
file_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def file_input(form, field, opts \\\\ []) do$/;"	f
filter_comment_lines	deps/tzdata/lib/tzdata/util.ex	/^  def filter_comment_lines(input) do$/;"	f
filter_empty_lines	deps/tzdata/lib/tzdata/util.ex	/^  def filter_empty_lines(input) do$/;"	f
filter_files	deps/phoenix/lib/phoenix/digester.ex	/^  defp filter_files(input_path) do$/;"	f
filter_for_record_type	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp filter_for_record_type(list, record_type), do: Enum.filter(list, fn x -> (x[:record_type] == record_type) end)$/;"	f
filter_values	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp filter_values(%{__struct__: mod} = struct, _filter_params) when is_atom(mod) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp filter_values(%{} = map, filter_params) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp filter_values([_|_] = list, filter_params) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp filter_values(other, _filter_params), do: other$/;"	f
finalize_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp finalize_cache(_query, _operation, :nocache) do$/;"	f
finalize_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp finalize_cache(query, operation, cache) do$/;"	f
find_all	deps/phoenix/lib/phoenix/template.ex	/^  def find_all(root) do$/;"	f
find_extension	deps/postgrex/lib/postgrex/types.ex	/^  defp find_extension(nil, _extensions, _extension_opts, _types) do$/;"	f
find_extension	deps/postgrex/lib/postgrex/types.ex	/^  defp find_extension(type_info, extensions, extension_opts, types) do$/;"	f
find_failed	deps/exq/lib/exq/api.ex	/^  def find_failed(pid, jid) do$/;"	f
find_failed	deps/exq/lib/exq/enqueuer.ex	/^  def find_failed(pid, jid) do$/;"	f
find_failed	deps/exq/lib/exq/stats/server.ex	/^  def find_failed(redis, namespace, jid) do$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format("*\/*", accepted), do: Enum.fetch!(accepted, 0)$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format(exts, accepted),  do: Enum.find(exts, &(&1 in accepted))$/;"	f
find_format_extension	deps/postgrex/lib/postgrex/types.ex	/^  defp find_format_extension(oid, extensions, extension_opts, types) when is_integer(oid) do$/;"	f
find_format_extension	deps/postgrex/lib/postgrex/types.ex	/^  defp find_format_extension(oids, extensions, extension_opts, types) when is_list(oids) do$/;"	f
find_host	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp find_host(stack) do$/;"	f
find_inputs_for_type!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp find_inputs_for_type!(changeset, field) do$/;"	f
find_job	deps/exq/lib/exq/api.ex	/^  def find_job(pid, queue, jid) do$/;"	f
find_job	deps/exq/lib/exq/enqueuer.ex	/^  def find_job(pid, queue, jid) do$/;"	f
find_job	deps/exq/lib/exq/redis/job_queue.ex	/^  def find_job(jobs, jid) do$/;"	f
find_job	deps/exq/lib/exq/redis/job_queue.ex	/^  def find_job(redis, namespace, jid, :scheduled) do$/;"	f
find_job	deps/exq/lib/exq/redis/job_queue.ex	/^  def find_job(redis, namespace, jid, queue) do$/;"	f
find_source_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp find_source_expr(query, 0) do$/;"	f
find_source_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp find_source_expr(query, ix) do$/;"	f
find_superextension_for_type	deps/postgrex/lib/postgrex/types.ex	/^  defp find_superextension_for_type(type_info, extensions, extension_opts, types) do$/;"	f
find_tmp_dir	deps/plug/lib/plug/upload.ex	/^  defp find_tmp_dir(pid, tmps, ets) do$/;"	f
find_var!	deps/ecto/lib/ecto/query/builder.ex	/^  def find_var!(var, vars) do$/;"	f
first_matching_weekday_in_month	deps/tzdata/lib/tzdata/util.ex	/^  defp first_matching_weekday_in_month(year, month, weekday, [head|tail]) do$/;"	f
first_period_that_ends_in_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp first_period_that_ends_in_year(zone_name, year) do$/;"	f
first_weekday_of_month_at_least	deps/tzdata/lib/tzdata/util.ex	/^  def first_weekday_of_month_at_least(year, month, weekday, minimum_date) do$/;"	f
fixed_integer_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp fixed_integer_impl(%ParserState{status: :ok, input: <<>>} = state, _size) do$/;"	f
fixed_integer_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp fixed_integer_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state, _size) do$/;"	f
flags	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp flags(),     do: map(one_of(char, ["-", "0", "_"]), &map_flag\/1)$/;"	f
flash_key	deps/phoenix/lib/phoenix/controller.ex	/^  defp flash_key(atom) when is_atom(atom), do: Atom.to_string(atom)$/;"	f
flash_key	deps/phoenix/lib/phoenix/controller.ex	/^  defp flash_key(binary) when is_binary(binary), do: binary$/;"	f
float_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp float_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
float_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp float_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
flush	deps/ecto/lib/ecto/migration.ex	/^  def flush do$/;"	f
flush	deps/ecto/lib/ecto/migration/runner.ex	/^  def flush do$/;"	f
flush_all	deps/exq/test/test_helper.exs	/^  def flush_all do$/;"	f
flushdb!	deps/exq/lib/exq/redis/connection.ex	/^  def flushdb!(redis) do$/;"	f
foo	deps/combine/lib/combine.ex	/^        def foo(str) do$/;"	f
force_change	deps/ecto/lib/ecto/changeset.ex	/^  def force_change(%Changeset{types: nil}, _key, _value) do$/;"	f
force_change	deps/ecto/lib/ecto/changeset.ex	/^  def force_change(%Changeset{types: types} = changeset, key, value) do$/;"	f
force_ssl	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def force_ssl(%Plug.Conn{halted: true} = conn, _socket, _endpoint, _opts) do$/;"	f
force_ssl	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def force_ssl(conn, socket, endpoint, opts) do$/;"	f
force_ssl_config	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp force_ssl_config(socket, endpoint, opts) do$/;"	f
force_width	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp force_width(size, type, directive, opts) do$/;"	f
force_width	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp force_width(size, type, directive, opts) do$/;"	f
foreign_key_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def foreign_key_constraint(changeset, field, opts \\\\ []) do$/;"	f
form_for	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def form_for(form_data, action, options \\\\ [], fun) when is_function(fun, 1) do$/;"	f
form_for_error	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_error(msg) when is_binary(msg), do: msg$/;"	f
form_for_error	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_error({msg, count: count}) when is_binary(msg) do$/;"	f
form_for_errors	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_errors(errors) do$/;"	f
form_for_hidden	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_hidden(model) do$/;"	f
form_for_method	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_method(%{__meta__: %{state: :loaded}}), do: "put"$/;"	f
form_for_method	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_method(_), do: "post"$/;"	f
form_for_name	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_name(%{__struct__: module}) do$/;"	f
form_options	deps/phoenix_html/lib/phoenix_html/link.ex	/^  defp form_options(opts, method, class) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, do: block) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, options, do: block) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, opts \\\\ [])$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, opts) when is_list(opts) do$/;"	f
format	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def format(_),$/;"	f
format	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  def format(router) do$/;"	f
format	deps/postgrex/lib/postgrex/extension.ex	/^  defcallback format(opts) :: :binary | :text$/;"	c
format	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def format(_library),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/messages.ex	/^  defp format(:binary), do: 1$/;"	f
format	deps/postgrex/lib/postgrex/messages.ex	/^  defp format(:text),   do: 0$/;"	f
format	deps/postgrex/lib/postgrex/types.ex	/^  def format(oid, state) do$/;"	f
format	deps/timex/lib/date/date_format.ex	/^  def format(%DateTime{} = date, format_string, formatter) when is_binary(format_string) do$/;"	f
format	deps/timex/lib/date/date_format.ex	/^  defdelegate format(%DateTime{} = date, format_string), to: Formatter$/;"	d
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(%DateTime{} = date, format_string, formatter)$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(date, format_string, formatter \\\\ Default)$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  defcallback format(date :: %DateTime{}, format_string :: String.t)  :: {:ok, String.t} | {:error, term}$/;"	c
format	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format(%DateTime{} = date, format_string) do$/;"	f
format	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format(%DateTime{} = date, format_string, tokenizer) do$/;"	f
format	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def format(%DateTime{} = date, format_string) do$/;"	f
format	deps/timex/lib/format/time/formatter.ex	/^  def format(timestamp, formatter \\\\ Default) when is_atom(formatter) do$/;"	f
format	deps/timex/lib/format/time/formatter.ex	/^  defcallback format(timestamp :: Date.timestamp) :: String.t$/;"	c
format	deps/timex/lib/format/time/formatters/default.ex	/^  def format({_,_,_} = timestamp), do: timestamp |> deconstruct |> do_format$/;"	f
format	deps/timex/lib/format/time/formatters/humanized.ex	/^  def format({_,_,_} = timestamp), do: timestamp |> deconstruct |> do_format$/;"	f
format!	deps/timex/lib/date/date_format.ex	/^  def format!(%DateTime{} = date, format_string, :default),$/;"	f
format!	deps/timex/lib/date/date_format.ex	/^  def format!(%DateTime{} = date, format_string, :strftime),$/;"	f
format!	deps/timex/lib/date/date_format.ex	/^  defdelegate format!(%DateTime{} = date, format_string), to: Formatter$/;"	d
format!	deps/timex/lib/date/date_format.ex	/^  defdelegate format!(%DateTime{} = date, format_string, formatter), to: Formatter$/;"	d
format!	deps/timex/lib/format/datetime/formatter.ex	/^  def format!(%DateTime{} = date, format_string, formatter \\\\ Default)$/;"	f
format!	deps/timex/lib/format/datetime/formatter.ex	/^  defcallback format!(date :: %DateTime{}, format_string :: String.t) :: String.t | no_return$/;"	c
format!	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format!(%DateTime{} = date, format_string) do$/;"	f
format!	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def format!(%DateTime{} = date, format_string) do$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:days, d}, str),    do: str <> "#{d}D"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:hours, h}, str),   do: str <> "#{h}H"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:minutes, m}, str), do: str <> "#{m}M"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:months, m}, str),  do: str <> "#{m}M"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:seconds, s}, str), do: str <> "#{s}S"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({:years, y}, str),   do: str <> "#{y}Y"$/;"	f
format_component	deps/timex/lib/format/time/formatters/default.ex	/^  defp format_component({_, 0}, str),        do: str$/;"	f
format_encoder	deps/phoenix/lib/phoenix/template.ex	/^  def format_encoder(template_name) when is_binary(template_name) do$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:error, reason, stack), do: {reason, stack}$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:exit, reason, _), do: reason$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:throw, reason, stack), do: {{:nocatch, reason}, stack}$/;"	f
format_reply	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp format_reply({:socket_push, encoding, encoded_payload}, state) do$/;"	f
format_route	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp format_route(route, column_widths) do$/;"	f
format_status	deps/postgrex/lib/postgrex/connection.ex	/^  def format_status(opt, [_pdict, s]) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:AM, %DateTime{} = date, modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:am, %DateTime{hour: hour}, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:ansic, %DateTime{} = date, modifiers, flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:century, %DateTime{year: year}, _modifiers, flags, width), do: "#{pad_numeric(div(year, 100), flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:day, %DateTime{day: day}, _modifiers, flags, width), do: "#{pad_numeric(day, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:hour12, %DateTime{hour: hour}, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:hour24, %DateTime{hour: hour}, _modifiers, flags, width), do: "#{pad_numeric(hour, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_date, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_ordinal, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_time, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_week, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_weekday, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_weeknum, %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_year2,  %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:iso_year4,  %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:kitchen, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:mfull, %DateTime{month: month}, _, _, _),  do: Date.month_name(month)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:min, %DateTime{minute: min}, _modifiers, flags, width), do: "#{pad_numeric(min, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:month, %DateTime{month: month}, _modifiers, flags, width), do: "#{pad_numeric(month, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:mshort, %DateTime{month: month}, _, _, _), do: Date.month_shortname(month)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:oday, %DateTime{} = date, _modifiers, flags, width), do: "#{pad_numeric(Date.day(date), flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:sec, %DateTime{second: sec}, _modifiers, flags, width), do: "#{pad_numeric(sec, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:sec_epoch, %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:sec_fractional, %DateTime{ms: 0}, _modifiers, _flags, _width), do: <<>>$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:sec_fractional, %DateTime{ms: ms}, _modifiers, _flags, _width)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:sec_fractional, %DateTime{ms: ms}, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:slashed, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:strftime_iso_shortdate, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:strftime_kitchen, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:unix, %DateTime{} = date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:us, %DateTime{ms: ms}, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:wday_mon, %DateTime{} = date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:wday_sun, %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:wdfull, %DateTime{} = date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:wdshort, %DateTime{} = date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:week_mon, %DateTime{} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:week_sun, %DateTime{year: year} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:year2, %DateTime{year: year}, _modifiers, flags, width),   do: "#{pad_numeric(rem(year, 100), flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:year4, %DateTime{year: year}, _modifiers, flags, width),   do: "#{pad_numeric(year, flags, width)}"$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:zname, %DateTime{timezone: tz}, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:zoffs, %DateTime{timezone: tz}, _modifiers, flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:zoffs_colon, %DateTime{} = date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(:zoffs_sec, %DateTime{} = date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(token, %DateTime{} = date, modifiers, _flags, _width)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(token, _, _, _, _) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(token, date, modifiers, flags, width)$/;"	f
formatted_diff	deps/plug/lib/plug/logger.ex	/^  defp formatted_diff(diff) when diff > 1000, do: [diff |> div(1000) |> Integer.to_string, "ms"]$/;"	f
formatted_diff	deps/plug/lib/plug/logger.ex	/^  defp formatted_diff(diff), do: [diff |> Integer.to_string, "µs"]$/;"	f
forward	deps/phoenix/lib/phoenix/router.ex	/^  defmacro forward(path, plug, plug_opts \\\\ [], router_opts \\\\ []) do$/;"	a
forward	deps/phoenix/lib/phoenix/router/route.ex	/^  def forward(%Plug.Conn{path_info: path, script_name: script} = conn, fwd_segments, target, opts) do$/;"	f
forward	deps/plug/lib/plug/router.ex	/^  defmacro forward(path, options) when is_binary(path) do$/;"	a
forward	deps/plug/lib/plug/router/utils.ex	/^  def forward(%Plug.Conn{path_info: path, script_name: script} = conn, new_path, target, opts) do$/;"	f
forward_path_segments	deps/phoenix/lib/phoenix/router/route.ex	/^  def forward_path_segments(path, plug, phoenix_forwards) do$/;"	f
fragment	deps/ecto/lib/ecto/migration.ex	/^  def fragment(expr) when is_binary(expr) do$/;"	f
fragment	deps/ecto/lib/ecto/query/api.ex	/^  def fragment(fragments), do: doc! [fragments]$/;"	f
frames	deps/plug/lib/plug/debugger.ex	/^  defp frames(stacktrace, opts) do$/;"	f
from	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp from(sources) do$/;"	f
from	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp from(sources) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defmacro from(expr, kw \\\\ []) do$/;"	a
from	deps/ecto/lib/ecto/query.ex	/^  defp from([], _env, _count_bind, quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{:on, _value}|_], _env, _count_bind, _quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{join, expr}|t], env, count_bind, quoted, binds) when join in @joins do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{key, _value}|_], _env, _count_bind, _quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{type, expr}|t], env, count_bind, quoted, binds) when type in @binds do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{type, expr}|t], env, count_bind, quoted, binds) when type in @no_binds do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(days, :days, :epoch) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(days, :days, :zero) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(sec, :secs, :epoch) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(sec, :secs, :zero) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(us, :us,   :epoch) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(us, :us,   :zero) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from(value, type, reference \\\\ :epoch)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({_,_,_} = date, %TimezoneInfo{} = tz),  do: from({date, {0,0,0}}, tz)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({_,_,_} = date, :local),                do: from({date, {0,0,0}}, timezone(:local, {date, {0,0,0}}))$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({_,_,_} = date, :utc),                  do: construct({date, {0,0,0}}, %TimezoneInfo{})$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({_,_,_} = date, tz) when is_binary(tz), do: from({date, {0, 0, 0}}, tz)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({mega, sec, us}, :timestamp, :epoch), do: from((mega * @million + sec) * @million + us, :us)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({mega, sec, us}, :timestamp, :zero) do$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({y,m,d} = date) when is_integer(y) and is_integer(m) and is_integer(d), do: from(date, :utc)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_,_}} = datetime),        do: from(datetime, :utc)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_,_}} = datetime, %TimezoneInfo{} = tz), do: construct(datetime, tz)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_,_}} = datetime, :utc),  do: construct(datetime, %TimezoneInfo{})$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_}} = datetime),          do: from(datetime, :utc)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_}} = datetime, %TimezoneInfo{} = tz), do: construct(datetime, tz)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_}} = datetime, :local),  do: from(datetime, timezone(:local, datetime))$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_},{_,_,_}} = datetime, :utc),    do: construct(datetime, %TimezoneInfo{})$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_}=d,{h,m,s}}, tz) when is_binary(tz), do: from({d,{h,m,s,0}},tz)$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_}=date,{h,min,sec,_}} = datetime, :local),do: from(datetime, timezone(:local, {date,{h, min, sec}}))$/;"	f
from	deps/timex/lib/date/date.ex	/^  def from({{_,_,_}=date,{h,min,sec,_}} = datetime, tz) when is_binary(tz) do$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :days),  do: from(value * @secs_in_day, :secs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :hms),   do: from(to_secs(value, :hms), :secs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :hours), do: from(value * @secs_in_hour, :secs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :mins),  do: from(value * @secs_in_min, :secs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :msecs), do: from(value * @usecs_in_msec, :usecs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :secs),  do: from(value * @usecs_in_sec, :usecs)$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :usecs) do$/;"	f
from	deps/timex/lib/time/time.ex	/^  def from(value, :weeks), do: from(value * @secs_in_week, :secs)$/;"	f
from_date	deps/ecto/lib/ecto/datetime.ex	/^  def from_date(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
from_date_and_time	deps/ecto/lib/ecto/datetime.ex	/^  def from_date_and_time(%Ecto.Date{year: year, month: month, day: day},$/;"	f
from_env	deps/phoenix/lib/phoenix/config.ex	/^  def from_env(otp_app, module, defaults) do$/;"	f
from_erl	deps/ecto/lib/ecto/datetime.ex	/^  def from_erl({hour, min, sec}) do$/;"	f
from_erl	deps/ecto/lib/ecto/datetime.ex	/^  def from_erl({year, month, day}) do$/;"	f
from_erl	deps/ecto/lib/ecto/datetime.ex	/^  def from_erl({{year, month, day}, {hour, min, sec}}) do$/;"	f
from_files_in_dir	deps/tzdata/lib/tzdata/basic_data_map.ex	/^  def from_files_in_dir(dir_name) do$/;"	f
from_iso_day	deps/timex/lib/date/date.ex	/^  def from_iso_day(day, %DateTime{year: year} = date) do$/;"	f
from_iso_day	deps/timex/lib/date/date.ex	/^  def from_iso_day(day, date \\\\ nil)$/;"	f
from_iso_day	deps/timex/lib/date/date.ex	/^  def from_iso_day(day, nil) do$/;"	f
from_iso_triplet	deps/timex/lib/date/date.ex	/^  def from_iso_triplet({year, week, weekday}) do$/;"	f
from_json	deps/exq/lib/exq/support/job.ex	/^  def from_json(json_str) do$/;"	f
from_map!	deps/phoenix/lib/phoenix/socket/message.ex	/^  def from_map!(map) when is_map(map) do$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(_, _, _), do: :error$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(_, _, _, _),$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(_, _, _, _, _, _, _), do: :error$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(hour, min, sec, usec) when is_time(hour, min, sec, usec),$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(year, month, day) when is_date(year, month, day) do$/;"	f
from_parts	deps/ecto/lib/ecto/datetime.ex	/^  defp from_parts(year, month, day, hour, min, sec, usec)$/;"	f
from_set_to_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp from_set_to_sent(%Conn{state: :set} = conn), do: Conn.send_resp(conn)$/;"	f
from_set_to_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp from_set_to_sent(conn), do: conn$/;"	f
from_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp from_sources(nil),             do: ["query"]$/;"	f
from_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp from_sources({source, model}), do: [model || source]$/;"	f
full_key	deps/exq/lib/exq/redis/job_queue.ex	/^  def full_key("", key), do: key$/;"	f
full_key	deps/exq/lib/exq/redis/job_queue.ex	/^  def full_key(namespace, key) do$/;"	f
full_key	deps/exq/lib/exq/redis/job_queue.ex	/^  def full_key(nil, key), do: key$/;"	f
generate	deps/ecto/lib/ecto/uuid.ex	/^  def generate do$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  def generate(secret, salt, opts \\\\ []) do$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp generate(_fun, _salt, _iterations, max_length, _block_index, acc, length)$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp generate(fun, salt, iterations, max_length, block_index, acc, length) do$/;"	f
generate_id	deps/ecto/lib/ecto/embedded.ex	/^  defp generate_id(changeset, :insert, model, embed, adapter) do$/;"	f
generate_id	deps/ecto/lib/ecto/embedded.ex	/^  defp generate_id(changeset, action, _model, _embed, _adapter) when action in [:update, :delete] do$/;"	f
generate_letters	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_letters(sources) do$/;"	f
generate_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp generate_manifest(files, output_path) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names([], acc, _found) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names([letter|rest], acc, found) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names(letters) do$/;"	f
generate_request_id	deps/plug/lib/plug/request_id.ex	/^  defp generate_request_id do$/;"	f
generate_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp generate_token do$/;"	f
generic_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp generic_input(type, form, field, opts) when is_atom(field) and is_list(opts) do$/;"	f
get	deps/ecto/lib/ecto/repo.ex	/^      def get(queryable, id, opts \\\\ []) do$/;"	f
get	deps/ecto/lib/ecto/repo.ex	/^  defcallback get(Ecto.Queryable.t, term, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
get	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get(repo, adapter, queryable, id, opts) do$/;"	f
get	deps/exq/lib/exq/stats/server.ex	/^  def get(redis, namespace, key) do$/;"	f
get	deps/exq/lib/exq/support/config.ex	/^  def get(key, fallback \\\\ nil) do$/;"	f
get	deps/plug/lib/plug/conn/unfetched.ex	/^  def get(%{aspect: aspect}, key, _value) do$/;"	f
get	deps/plug/lib/plug/router.ex	/^  defmacro get(path, options, contents \\\\ []) do$/;"	a
get	deps/plug/lib/plug/session/cookie.ex	/^  def get(conn, cookie, opts) do$/;"	f
get	deps/plug/lib/plug/session/ets.ex	/^  def get(_conn, sid, table) do$/;"	f
get	deps/plug/lib/plug/session/store.ex	/^  defcallback get(Plug.Conn.t, cookie, Plug.opts) :: {sid, session}$/;"	c
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:AM, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:am, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:ansic, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:century, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:day, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:hour12, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:hour24, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_8601, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_8601z, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_date, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_ordinal, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_time, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_week, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_weekday, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_weeknum, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_year2, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:iso_year4, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:kitchen, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:mfull, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:min, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:month, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:mshort, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:oday, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_1123, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_1123z, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_3339, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_3339z, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_822, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:rfc_822z, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:sec, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:sec_epoch, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:sec_fractional, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:slashed, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:strftime_iso_clock, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:strftime_iso_clock_full, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:strftime_iso_date, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:strftime_iso_shortdate, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:strftime_kitchen, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:unix, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:us, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:wday_mon, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:wday_sun, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:wdfull, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:wdshort, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:week_mon, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:week_sun, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:year2, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:year4, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:zname, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:zoffs, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:zoffs_colon, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:zoffs_sec, directive, flags, mods, width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(type, _directive, _flags, _mods, _width), do: {:error, "Unrecognized directive type: #{type}."}$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(type, directive, opts \\\\ []) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get("A", for),  do: get(+1, for)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get("M", for),  do: get(+12, for)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get("N", for),  do: get(-1, for)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get("Y", for),  do: get(-12, for)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(0, for),    do: get("UTC", for)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(:utc, _),   do: %TimezoneInfo{}$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(<<?+, offset :: binary>>, for) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(<<?-, offset :: binary>>, for) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(offset, for) when is_number(offset) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(timezone, %DateTime{} = dt) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(timezone, {{_,_,_}, {_,_,_}} = datetime) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(tz, for \\\\ Date.now)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(tz, for) when tz in ["Z", "UT", "GMT"], do: get(:utc, for)$/;"	f
get!	deps/ecto/lib/ecto/repo.ex	/^      def get!(queryable, id, opts \\\\ []) do$/;"	f
get!	deps/ecto/lib/ecto/repo.ex	/^  defcallback get!(Ecto.Queryable.t, term, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
get!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get!(repo, adapter, queryable, id, opts) do$/;"	f
get!	deps/exq/lib/exq/redis/connection.ex	/^  def get!(redis, key) do$/;"	f
get_and_update	deps/plug/lib/plug/conn/unfetched.ex	/^  def get_and_update(%{aspect: aspect}, key, _fun) do$/;"	f
get_app	deps/plug/lib/plug/debugger.ex	/^  defp get_app(module) do$/;"	f
get_assoc	deps/ecto/lib/ecto/changeset.ex	/^  defp get_assoc(%{model: %{__struct__: model}}, assoc) do$/;"	f
get_attribute	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp get_attribute(module, attr) do$/;"	f
get_autogenerate_id	deps/ecto/lib/ecto/repo/model.ex	/^  defp get_autogenerate_id(changes, model) do$/;"	f
get_backoff	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp get_backoff(%{backoff: backoff, backoff_threshold: threshold})$/;"	f
get_backoff	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp get_backoff(%{backoff: backoff}) do$/;"	f
get_backoff	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp get_backoff(%{threshold: 0, max_backoff: max}) do$/;"	f
get_by	deps/ecto/lib/ecto/repo.ex	/^      def get_by(queryable, clauses, opts \\\\ []) do$/;"	f
get_by	deps/ecto/lib/ecto/repo.ex	/^  defcallback get_by(Ecto.Queryable.t, Keyword.t, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
get_by	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get_by(repo, adapter, queryable, clauses, opts) do$/;"	f
get_by!	deps/ecto/lib/ecto/repo.ex	/^      def get_by!(queryable, clauses, opts \\\\ []) do$/;"	f
get_by!	deps/ecto/lib/ecto/repo.ex	/^  defcallback get_by!(Ecto.Queryable.t, Keyword.t, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
get_by!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get_by!(repo, adapter, queryable, clauses, opts) do$/;"	f
get_change	deps/ecto/lib/ecto/changeset.ex	/^  def get_change(%Changeset{changes: changes} = _changeset, key, default \\\\ nil) when is_atom(key) do$/;"	f
get_changed	deps/ecto/lib/ecto/changeset.ex	/^  defp get_changed(model, types, old_changes, new_changes, errors, valid?) do$/;"	f
get_context	deps/decimal/lib/decimal.ex	/^  def get_context do$/;"	f
get_context	deps/plug/lib/plug/debugger.ex	/^  defp get_context(_app1, _app2),             do: :all$/;"	f
get_context	deps/plug/lib/plug/debugger.ex	/^  defp get_context(app, app) when app != nil, do: :app$/;"	f
get_csrf_from_session	deps/plug/lib/plug/csrf_protection.ex	/^  defp get_csrf_from_session(conn) do$/;"	f
get_csrf_token	deps/phoenix/lib/phoenix/controller.ex	/^  defdelegate get_csrf_token(), to: Plug.CSRFProtection$/;"	d
get_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  def get_csrf_token do$/;"	f
get_editor	deps/plug/lib/plug/debugger.ex	/^  defp get_editor(file, line, editor) do$/;"	f
get_endpoint	deps/phoenix/lib/phoenix/token.ex	/^  defp get_endpoint(%Phoenix.Socket{} = socket), do: socket.endpoint$/;"	f
get_endpoint	deps/phoenix/lib/phoenix/token.ex	/^  defp get_endpoint(%Plug.Conn{} = conn), do: Phoenix.Controller.endpoint_module(conn)$/;"	f
get_endpoint	deps/phoenix/lib/phoenix/token.ex	/^  defp get_endpoint(endpoint) when is_atom(endpoint), do: endpoint$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({_module, :__FILE__, 1, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({_module, :__MODULE__, 1, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({fun, arity, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, :__MODULE__, 0, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, fun, args, location}) when is_list(args) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, fun, arity, location}) do$/;"	f
get_field	deps/ecto/lib/ecto/changeset.ex	/^  def get_field(%Changeset{changes: changes, model: model, types: types}, key, default \\\\ nil) do$/;"	f
get_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def get_flash(conn) do$/;"	f
get_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def get_flash(conn, key) do$/;"	f
get_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate get_flash(conn), to: Phoenix.Controller$/;"	d
get_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate get_flash(conn, key), to: Phoenix.Controller$/;"	d
get_format	deps/phoenix/lib/phoenix/controller.ex	/^  def get_format(conn) do$/;"	f
get_fractional_seconds	deps/timex/lib/format/time/formatters/default.ex	/^  defp get_fractional_seconds(seconds, 0, components), do: deconstruct({0, 0}, [{:seconds, seconds} | components])$/;"	f
get_fractional_seconds	deps/timex/lib/format/time/formatters/default.ex	/^  defp get_fractional_seconds(seconds, micro, components) when micro > 0 do$/;"	f
get_header	deps/plug/lib/plug/parsers/multipart.ex	/^  defp get_header(headers, key) do$/;"	f
get_json_encoder	deps/phoenix/lib/phoenix/controller.ex	/^  defp get_json_encoder do$/;"	f
get_otp_release	deps/timex/lib/utils/utils.ex	/^  def get_otp_release do$/;"	f
get_pks	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp get_pks(%Changeset{model: model}, pks),$/;"	f
get_pks	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp get_pks(model_or_params, pks),$/;"	f
get_plugins	deps/timex/lib/utils/utils.ex	/^  def get_plugins(plugin_type) when is_atom(plugin_type) do$/;"	f
get_real_path	deps/timex/lib/timezone/timezone_local.ex	/^  defp get_real_path(path) do$/;"	f
get_req_header	deps/plug/lib/plug/conn.ex	/^  def get_req_header(%Conn{req_headers: headers}, key) when is_binary(key) do$/;"	f
get_request_id	deps/plug/lib/plug/request_id.ex	/^  defp get_request_id(conn, header) do$/;"	f
get_resp_header	deps/plug/lib/plug/conn.ex	/^  def get_resp_header(%Conn{resp_headers: headers}, key) when is_binary(key) do$/;"	f
get_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp get_rules(btz_data, rules_name) do$/;"	f
get_secret	deps/phoenix/lib/phoenix/token.ex	/^  defp get_secret(endpoint, salt, opts) do$/;"	f
get_session	deps/plug/lib/plug/conn.ex	/^  def get_session(conn, key) do$/;"	f
get_session	deps/plug/lib/plug/conn.ex	/^  defp get_session(%Conn{private: private}) do$/;"	f
get_snippet	deps/plug/lib/plug/debugger.ex	/^  defp get_snippet(file, line) do$/;"	f
get_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_source(%{model: %{__meta__: %{source: {_prefix, source}}}}) when is_binary(source),$/;"	f
get_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_source(%{model: model}), do:$/;"	f
get_source	deps/plug/lib/plug/debugger.ex	/^  defp get_source(module, file) do$/;"	f
get_stack	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp get_stack(module) do$/;"	f
group_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp group_by(%Query{group_bys: group_bys} = query, sources) do$/;"	f
group_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp group_by(%Query{group_bys: group_bys} = query, sources) do$/;"	f
group_by	deps/ecto/lib/ecto/query.ex	/^  defmacro group_by(query, binding, expr) do$/;"	a
gzip?	deps/plug/lib/plug/static.ex	/^  defp gzip?(conn) do$/;"	f
h	deps/plug/lib/plug/debugger.ex	/^  defp h(string) do$/;"	f
h_calc_periods_no_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  def h_calc_periods_no_rules(_btz_data, period, _, zone_line_tl, _) when zone_line_tl == [] do$/;"	f
h_calc_periods_no_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  def h_calc_periods_no_rules(btz_data, period, until_utc, zone_line_tl, letter) do$/;"	f
h_process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp h_process_line(_matches_leap_line_regex = nil, line) do$/;"	f
h_process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp h_process_line(map, _line) do$/;"	f
halt	deps/plug/lib/plug/conn.ex	/^  def halt(%Conn{} = conn) do$/;"	f
handle_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp handle_assign(arg), do: arg$/;"	f
handle_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp handle_assign({:@, meta, [{name, _, atom}]}) when is_atom(name) and is_atom(atom) do$/;"	f
handle_body	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_body(body), do: body$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^      defp handle_call(unquote(op), 2), do: {:binary_op, unquote(str)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp handle_call(fun, _arity), do: {:fun, Atom.to_string(fun)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^      defp handle_call(unquote(op), 2), do: {:binary_op, unquote(str)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp handle_call(fun, _arity), do: {:fun, Atom.to_string(fun)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call(:mode, _, %{mode: mode} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call(req, from, %{conn: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:break, ref}, from, %{mode: :raw, ref: ref} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:break, ref}, from, %{mode: :sandbox, ref: ref} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:checkout, ref, fun}, {pid, _} = from, %{queue: q} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:checkout, ref, fun}, {pid, _}, %{ref: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:query, query, log, opts}, _, %{ref: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_call({:query, query, log, opts}, from, %{queue: q} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_call(:break, _from, s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_call(request, from, %{conn: nil, params: params, module: module} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_call({:checkout, :run}, _, %{transaction: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_call({:checkout, :transaction}, from, %{transaction: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_call({:checkout, _} = checkout, from, %{transaction: {client, _}} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_call({:mod_conn, ref}, _, %{ref: ref, conn: nil} = s) do$/;"	f
handle_call	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_call({:mod_conn, ref}, _, %{ref: ref} = s) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:busy}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:clear_failed}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:clear_processes}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:enqueue, queue, worker, args}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:enqueue_at, queue, time, worker, args}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:enqueue_in, queue, offset, worker, args}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:failed}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:find_failed, jid}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:find_job, queue, jid}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:find_scheduled_job, jid}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:jobs, :scheduled}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:jobs, queue}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:jobs}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:processes}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:queue_size, :scheduled}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:queue_size, queue}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:queue_size}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:queues}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:realtime_stats}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:remove_failed, jid}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:remove_queue, queue}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:stats, key, date}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:stats, key}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_call({:stop}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call(_request, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:enqueue, queue, worker, args}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:enqueue_at, queue, time, worker, args}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:enqueue_in, queue, offset, worker, args}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:stop}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:subscribe, queue, concurrency}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:subscribe, queue}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/manager/server.ex	/^  def handle_call({:unsubscribe, queue}, from, state) do$/;"	f
handle_call	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def handle_call(_request, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def handle_call({:stop}, _from, state) do$/;"	f
handle_call	deps/exq/lib/exq/stats/server.ex	/^  def handle_call({:stop}, _from, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_call(:socket, _from, socket) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def handle_call(:stop, _from, output) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def handle_call(:reload!, from, {app, root, paths, compilers} = state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/config.ex	/^  def handle_call(:stop, _from, {module, defaults}) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/config.ex	/^  def handle_call({:config_change, changed, removed}, _from, {module, defaults}) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def handle_call({:subscribe, pid, topic, opts}, _from, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def handle_call({:subscription, pid}, _from, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def handle_call({:unsubscribe, pid, topic}, _from, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_call(:stop, _from, state), do: {:stop, :shutdown, :ok, state}$/;"	f
handle_call	deps/plug/lib/plug/upload.ex	/^  def handle_call(msg, from, state) do$/;"	f
handle_call	deps/plug/lib/plug/upload.ex	/^  def handle_call({:random, prefix}, {pid, _ref}, {tmps, ets} = state) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_call(:connect, from, s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_call(:parameters, _from, %{parameters: params} = s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_call(:stop, from, s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_call(command, from, %{state: state} = s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_call({:fetch, key}, {pid, _} = from, {tables, conns}) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_call({:unlock, ref}, _from, {tables, conns}) do$/;"	f
handle_cast	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_cast({:cancel, ref}, %{queue: q} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_cast({:cancel, ref}, %{ref: ref} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_cast({:checkin, ref}, %{ref: ref} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_cast(:checkin, %{transaction: nil} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_cast(:checkin, s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_cast({:break, ref}, %{ref: ref, conn: nil} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_cast({:break, ref}, %{ref: ref} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_cast({:done, ref}, %{ref: ref, conn: nil} = s) do$/;"	f
handle_cast	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_cast({:done, ref}, %{ref: ref} = s) do$/;"	f
handle_cast	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_cast({:enqueue, from, queue, worker, args}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_cast({:enqueue_at, from, queue, time, worker, args}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/enqueuer/server.ex	/^  def handle_cast({:enqueue_in, from, queue, offset, worker, args}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/manager/server.ex	/^  def handle_cast(_request, state) do$/;"	f
handle_cast	deps/exq/lib/exq/manager/server.ex	/^  def handle_cast({:failure, error, job}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/manager/server.ex	/^  def handle_cast({:success, job}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/manager/server.ex	/^  def handle_cast({:worker_terminated, pid}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def handle_cast(_request, state) do$/;"	f
handle_cast	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def handle_cast({:start_timeout}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/stats/server.ex	/^  def handle_cast(data, state) do$/;"	f
handle_cast	deps/exq/lib/exq/stats/server.ex	/^  def handle_cast({:add_process, namespace, process}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/stats/server.ex	/^  def handle_cast({:process_terminated, namespace, hostname, pid}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/stats/server.ex	/^  def handle_cast({:record_failure, namespace, error, job}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/stats/server.ex	/^  def handle_cast({:record_processed, namespace, job}, state) do$/;"	f
handle_cast	deps/exq/lib/exq/worker/server.ex	/^  def handle_cast(:work, state) do$/;"	f
handle_cast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_cast(:close, socket) do$/;"	f
handle_cast	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_cast(:connect, s) do$/;"	f
handle_cast	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def handle_cast(:new_release_has_been_downloaded, state) do$/;"	f
handle_disposition	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_disposition(disposition, headers) do$/;"	f
handle_disposition_params	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_disposition_params(name, params, headers) do$/;"	f
handle_error	deps/decimal/lib/decimal.ex	/^  defp handle_error(signals, reason, result, context) do$/;"	f
handle_errors	deps/plug/lib/plug/error_handler.ex	/^        defp handle_errors(conn, %{kind: _kind, reason: _reason, stack: _stack}) do$/;"	f
handle_errors	deps/plug/lib/plug/error_handler.ex	/^      defp handle_errors(conn, assigns) do$/;"	f
handle_errors	deps/plug/lib/plug/router.ex	/^        defp handle_errors(conn, %{kind: _kind, reason: _reason, stack: _stack}) do$/;"	f
handle_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_expr(buffer, "", expr) do$/;"	f
handle_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_expr(buffer, "=", expr) do$/;"	f
handle_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_header_accept(conn, [header|_], accepted) do$/;"	f
handle_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_header_accept(conn, header, [first|_]) when header == [] or header == ["*\/*"] do$/;"	f
handle_headers	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_headers(headers) do$/;"	f
handle_in	_build/dev/lib/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("ping", payload, socket) do$/;"	f
handle_in	_build/dev/lib/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("shout", payload, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("create:post", attrs, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("current_rank", socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("new_msg", %{"uid" => uid, "body" => body}, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in(_event, _message, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^  defcallback handle_in(event :: String.t, msg :: map, Socket.t) ::$/;"	c
handle_in	deps/phoenix/lib/phoenix/test/channel_test.ex	/^      def handle_in("publish", %{"id" => id}, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("ping", payload, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("shout", payload, socket) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info(_, s) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon, fun: :run} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon, mode: :raw} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon, mode: :sandbox} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{queue: q} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_info({:EXIT, conn, reason}, %{conn: conn} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_info(_info, s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_info({:DOWN, ref, _, _, _}, %{transaction: {_, ref}} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def handle_info({:EXIT, conn, _reason}, %{conn: conn} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info(_info, s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon, conn: nil} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon, fun: :run} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({:DOWN, mon, _, _, _}, %{monitor: mon} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({:EXIT, conn, _}, %{conn: conn} = s) when is_pid(conn) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({tag, :connect}, %{tag: tag, ref: nil} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({tag, {:drop, _}}, %{tag: tag, lazy: true} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({tag, {:drop, _}}, %{tag: tag, ref: nil} = s) do$/;"	f
handle_info	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def handle_info({tag, {:go, ref, info, _, _}},%{tag: tag, ref: nil} = s) do$/;"	f
handle_info	deps/exq/lib/exq/manager/server.ex	/^  def handle_info(:timeout, state) do$/;"	f
handle_info	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def handle_info(:timeout, state) do$/;"	f
handle_info	deps/exq/lib/exq/stats/server.ex	/^  def handle_info(info, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^        def handle_info(:after_join, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_info(_message, socket), do: {:noreply, socket}$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^  defcallback handle_info(term, Socket.t) ::$/;"	c
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Broadcast{topic: topic, event: event, payload: payload},$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Message{topic: topic, event: "phx_join"}, %{topic: topic} = socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Message{topic: topic, event: "phx_leave", ref: ref}, %{topic: topic} = socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Message{topic: topic, event: event, payload: payload, ref: ref},$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(msg, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def handle_info(msg, output) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def handle_info({:DOWN, ref, _type, pid, _info}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def handle_info({:EXIT, _linked_pid, _reason}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^  def handle_info({:forward_to_local, from_pid, topic, msg}, local_name) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(%Broadcast{event: "disconnect"}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(%Message{} = msg, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(:shutdown_if_inactive, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:EXIT, channel_pid, reason}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:dispatch, client_ref, msg, ref}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:flush, client_ref, ref}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:subscribe, client_ref, ref}, state) do$/;"	f
handle_info	deps/phoenix_live_reload/lib/phoenix_live_reload/channel.ex	/^  def handle_info({_pid, {:fs, :file_event}, {path, _event}}, socket) do$/;"	f
handle_info	deps/plug/lib/plug/upload.ex	/^  def handle_info(msg, state) do$/;"	f
handle_info	deps/plug/lib/plug/upload.ex	/^  def handle_info({:DOWN, _ref, :process, pid, _reason}, {_, ets} = state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_info({:DOWN, ref, :process, _, _}, s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_info({:tcp, _, data}, %{sock: {:gen_tcp, sock}, opts: opts, state: :ssl} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_info({tag, _, data}, %{sock: {mod, sock}, tail: tail} = s)$/;"	f
handle_info	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_info({tag, _, reason}, s) when tag in [:tcp_error, :ssl_error] do$/;"	f
handle_info	deps/postgrex/lib/postgrex/connection.ex	/^  def handle_info({tag, _}, s) when tag in [:tcp_closed, :ssl_closed] do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info(_other, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:DOWN, ref, _, _, _}, {tables, conns}) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:drop, ref, key}, {tables, conns}) do$/;"	f
handle_out	_build/dev/lib/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_out(event, payload, socket) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("new_msg", msg, socket) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("new_msg", payload, socket) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("user_joined", msg, socket) do$/;"	f
handle_out	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_out(event, payload, socket) do$/;"	f
handle_params_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_params_accept(conn, format, accepted) do$/;"	f
handle_query	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def handle_query(query, log, opts, s) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(_socket, _reply, _other) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(_socket, reply, :handle_in) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(socket, status, :handle_in) when is_atom(status) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(socket, {status, payload}, :handle_in)$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:ok, new_state}) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:reply, {opcode, payload}, new_state}) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:shutdown, new_state}) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result(result, :handle_in) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result(result, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:noreply, socket}, _callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:reply, reply, %Socket{} = socket}, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:stop, reason, reply, socket}, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:stop, reason, socket}, _callback) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, _identifier, _expr}, t, _context, _vars, _acc) when t != [] do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, identifier, expr}, _t, context, vars, [hs|ts]) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, identifier, expr}, _t, context, vars, _) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:identifier, identifier, expr}, t, context, vars, acc) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:literal, literal}, t, context, vars, acc) do$/;"	f
handle_sigil	deps/phoenix_html/lib/phoenix_html.ex	/^  defp handle_sigil(_, _, _) do$/;"	f
handle_sigil	deps/phoenix_html/lib/phoenix_html.ex	/^  defp handle_sigil({:<<>>, _, [expr]}, [], line) do$/;"	f
handle_text	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_text(buffer, text) do$/;"	f
handlers	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defcallback handlers() :: map$/;"	c
handlers	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def handlers() do$/;"	f
handlers	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def handlers() do$/;"	f
has_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro has_many(name, queryable, opts \\\\ []) do$/;"	a
has_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro has_one(name, queryable, opts \\\\ []) do$/;"	a
hash	deps/phoenix/lib/phoenix/template.ex	/^  def hash(root) do$/;"	f
having	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp having(%Query{havings: havings} = query, sources) do$/;"	f
having	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp having(%Query{havings: havings} = query, sources) do$/;"	f
having	deps/ecto/lib/ecto/query.ex	/^  defmacro having(query, binding, expr) do$/;"	a
heartbeat_message	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def heartbeat_message() do$/;"	f
hello	deps/plug/lib/plug/builder.ex	/^        def hello(conn, opts) do$/;"	f
hex_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp hex_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
hex_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp hex_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
hex_pad	deps/ecto/lib/ecto/uuid.ex	/^  defp hex_pad(hex, count) do$/;"	f
hex_str_to_list	deps/uuid/lib/uuid.ex	/^  defp hex_str_to_list([]) do$/;"	f
hex_str_to_list	deps/uuid/lib/uuid.ex	/^  defp hex_str_to_list([x, y | tail]) do$/;"	f
hidden_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def hidden_input(form, field, opts \\\\ []) do$/;"	f
hour12	deps/timex/lib/parse/datetime/parsers.ex	/^  def hour12(opts \\\\ []) do$/;"	f
hour24	deps/timex/lib/parse/datetime/parsers.ex	/^  def hour24(opts \\\\ []) do$/;"	f
hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp hsts_header(opts) do$/;"	f
html	deps/phoenix/lib/phoenix/controller.ex	/^  def html(conn, data) do$/;"	f
html_content_type?	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  defp html_content_type?([]), do: false$/;"	f
html_content_type?	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  defp html_content_type?([type | _]), do: String.starts_with?(type, "text\/html")$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(bin) when is_binary(bin),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(list) when is_list(list),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(nil),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(other),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape({:safe, _} = safe),$/;"	f
html_escape	deps/plug/lib/plug/html.ex	/^  def html_escape(data) when is_binary(data) do$/;"	f
html_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def html_response(conn, status) do$/;"	f
http	deps/plug/lib/plug/adapters/cowboy.ex	/^  def http(plug, opts, cowboy_options \\\\ []) do$/;"	f
https	deps/plug/lib/plug/adapters/cowboy.ex	/^  def https(plug, opts, cowboy_options \\\\ []) do$/;"	f
humanize	deps/phoenix/lib/phoenix/naming.ex	/^  def humanize(atom) when is_atom(atom),$/;"	f
humanize	deps/phoenix/lib/phoenix/naming.ex	/^  def humanize(bin) when is_binary(bin) do$/;"	f
humanize	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def humanize(atom) when is_atom(atom),$/;"	f
humanize	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def humanize(bin) when is_binary(bin) do$/;"	f
i	deps/plug/lib/plug/upload.ex	/^  defp i(integer), do: Integer.to_string(integer)$/;"	f
id	deps/phoenix/lib/phoenix/socket.ex	/^        def id(socket), do: "users_socket:#{socket.assigns.user_id}"$/;"	f
id	deps/phoenix/lib/phoenix/socket.ex	/^  defcallback id(Socket.t) :: String.t | nil$/;"	c
id	deps/phoenix_live_reload/lib/phoenix_live_reload/socket.ex	/^  def id(_socket), do: nil$/;"	f
id	web/channels/user_socket.ex	/^  def id(_socket), do: nil$/;"	f
id_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp id_from(%{id: id}, field),$/;"	f
id_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp id_from(name, field) when is_atom(name),$/;"	f
iex_running?	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^  defp iex_running? do$/;"	f
if_do	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp if_do(condition, value) do$/;"	f
if_do	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp if_do(condition, value) do$/;"	f
ilike	deps/ecto/lib/ecto/query/api.ex	/^  def ilike(string, search), do: doc! [string, search]$/;"	f
in_tmp	deps/ecto/integration_test/support/file_helpers.exs	/^  defmacro in_tmp(fun) do$/;"	a
incr!	deps/exq/lib/exq/redis/connection.ex	/^  def incr!(redis, key) do$/;"	f
increase_user_count	deps/ecto/lib/ecto/model/callbacks.ex	/^        def increase_user_count(changeset) do$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:ceiling, sign, _, remain),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:down, _, _, _),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:floor, sign, _, remain),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_down, _, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_even, _, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_even, _, signif, [?5|rest]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_up, sign, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:up, _, _, _),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(_, _, _, []),$/;"	f
indent	deps/poison/lib/poison/encoder.ex	/^      defp indent(options) do$/;"	f
index	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def index(conn, _params) do$/;"	f
index	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/ecto/lib/ecto/migration.ex	/^  def index(table, columns, opts \\\\ []) when is_atom(table) and is_list(columns) do$/;"	f
index	deps/phoenix/lib/phoenix/controller.ex	/^      def index(conn, _params, user) do$/;"	f
index	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def index(conn, _params) do$/;"	f
index	web/controllers/page_controller.ex	/^  def index(conn, _params) do$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp index_expr(literal), do: quote_name(literal)$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp index_expr(literal) when is_binary(literal),$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp index_expr(literal),$/;"	f
indexes	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp indexes(plural, assocs) do$/;"	f
inf?	deps/decimal/lib/decimal.ex	/^  def inf?(%Decimal{coef: :inf}), do: true$/;"	f
inf?	deps/decimal/lib/decimal.ex	/^  def inf?(%Decimal{}),           do: false$/;"	f
inflect	deps/phoenix/lib/mix/phoenix.ex	/^  def inflect(singular) do$/;"	f
info	deps/exq/lib/exq/redis/connection.ex	/^  def info(opts \\\\ []) do$/;"	f
info	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  defp info(scheme, endpoint, config) do$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:error, error) do$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:exit, reason) do$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:throw, thrown) do$/;"	f
info!	deps/uuid/lib/uuid.ex	/^  def info!(<<uuid::binary>> = uuid_string) do$/;"	f
info!	deps/uuid/lib/uuid.ex	/^  def info!(_) do$/;"	f
init	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def init(_parameters, _opts),$/;"	f
init	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def init({module, opts}) do$/;"	f
init	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def init({module, opts}) do$/;"	f
init	deps/ecto/lib/ecto/pools/sojourn_broker/codel.ex	/^  def init(opts) do$/;"	f
init	deps/ecto/lib/ecto/pools/sojourn_broker/timeout.ex	/^  def init(opts) do$/;"	f
init	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def init({module, broker, opts}) do$/;"	f
init	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def init({name, repo, otp_app, adapter, opts}) do$/;"	f
init	deps/exq/lib/exq/enqueuer/server.ex	/^  def init([opts]) do$/;"	f
init	deps/exq/lib/exq/enqueuer/supervisor.ex	/^  def init([opts]) do$/;"	f
init	deps/exq/lib/exq/manager/server.ex	/^  def init([opts]) do$/;"	f
init	deps/exq/lib/exq/manager/supervisor.ex	/^  def init({opts}) do$/;"	f
init	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def init([opts]) do$/;"	f
init	deps/exq/lib/exq/scheduler/supervisor.ex	/^  def init([opts]) do$/;"	f
init	deps/exq/lib/exq/stats/server.ex	/^  def init({redis}) do$/;"	f
init	deps/exq/lib/exq/worker/server.ex	/^  def init({job, manager, queue, work_table}) do$/;"	f
init	deps/exq/web/json_api.ex	/^  def init(opts), do: opts$/;"	f
init	deps/exq/web/router.ex	/^  def init(options) do$/;"	f
init	deps/exq/web/static_root.ex	/^  def init(opts), do: opts$/;"	f
init	deps/phoenix/lib/phoenix/channel/server.ex	/^  def init({socket, auth_payload, parent, ref}) do$/;"	f
init	deps/phoenix/lib/phoenix/code_reloader.ex	/^  def init(opts), do: Keyword.put_new(opts, :reloader, &Phoenix.CodeReloader.reload!\/1)$/;"	f
init	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def init({app, root, paths, compilers}) do$/;"	f
init	deps/phoenix/lib/phoenix/config.ex	/^  def init({otp_app, module, defaults}) do$/;"	f
init	deps/phoenix/lib/phoenix/controller/logger.ex	/^  def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def init(action) when is_atom(action) do$/;"	f
init	deps/phoenix/lib/phoenix/endpoint.ex	/^      def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def init({transport, :http}, req, {module, opts}) when transport in [:tcp, :ssl] do$/;"	f
init	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  def init({otp_app, endpoint}) do$/;"	f
init	deps/phoenix/lib/phoenix/pubsub.ex	/^        def init({name, options}) do$/;"	f
init	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def init(name) do$/;"	f
init	deps/phoenix/lib/phoenix/pubsub/pg2.ex	/^  def init(server_name) do$/;"	f
init	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^  def init({name, local_name}) do$/;"	f
init	deps/phoenix/lib/phoenix/router.ex	/^      def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/router/scope.ex	/^  def init(module) do$/;"	f
init	deps/phoenix/lib/phoenix/supervisor.ex	/^  def init([]) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def init([]) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def init([endpoint, handler, transport_name, transport,$/;"	f
init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def init(%Plug.Conn{method: "GET"} = conn, {endpoint, handler, transport}) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def init(conn, _) do$/;"	f
init	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug.ex	/^        def init(opts) do$/;"	f
init	deps/plug/lib/plug.ex	/^  defcallback init(opts) :: opts$/;"	c
init	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  def init({transport, :http}, req, {plug, opts}) when transport in [:tcp, :ssl] do$/;"	f
init	deps/plug/lib/plug/builder.ex	/^        def init(opts) do$/;"	f
init	deps/plug/lib/plug/builder.ex	/^      def init(opts) do$/;"	f
init	deps/plug/lib/plug/csrf_protection.ex	/^  def init(opts), do: opts$/;"	f
init	deps/plug/lib/plug/head.ex	/^  def init([]), do: []$/;"	f
init	deps/plug/lib/plug/logger.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/method_override.ex	/^  def init([]), do: []$/;"	f
init	deps/plug/lib/plug/parsers.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/request_id.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session/cookie.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session/ets.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session/store.ex	/^  defcallback init(Plug.opts) :: Plug.opts$/;"	c
init	deps/plug/lib/plug/ssl.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/static.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/supervisor.ex	/^  def init(:ok) do$/;"	f
init	deps/plug/lib/plug/upload.ex	/^  def init(:ok) do$/;"	f
init	deps/postgrex/lib/postgrex/connection.ex	/^  def init(opts) do$/;"	f
init	deps/postgrex/lib/postgrex/extension.ex	/^  defcallback init(Map.t, term) :: opts$/;"	c
init	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def init(parameters, _opts),$/;"	f
init	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def init(_parameters, opts),$/;"	f
init	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def init(parameters, _opts),$/;"	f
init	deps/postgrex/lib/postgrex/type_server.ex	/^  def init([]) do$/;"	f
init	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def init([]) do$/;"	f
init	deps/tzdata/lib/tzdata/release_updater.ex	/^  def init([]) do$/;"	f
init_fun_plug	deps/plug/lib/plug/builder.ex	/^  defp init_fun_plug(plug, opts, guards) do$/;"	f
init_module_plug	deps/plug/lib/plug/builder.ex	/^  defp init_module_plug(plug, opts, guards) do$/;"	f
init_plug	deps/plug/lib/plug/builder.ex	/^  defp init_plug({plug, opts, guards}) do$/;"	f
inject?	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  defp inject?(conn, resp_body) do$/;"	f
inner_transaction	deps/ecto/lib/ecto/pool.ex	/^  defp inner_transaction(ref, conn, fun) do$/;"	f
input_type	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def input_type(changeset, field) do$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_type(form, field, mapping \\\\ @mapping) do$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_type(_data, _field), do: :text_input$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_type(data, field)$/;"	f
input_validations	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def input_validations(changeset, field) do$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_validations(form, field) do$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_validations(_data, _field), do: []$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_validations(data, field)$/;"	f
inputs	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp inputs(attrs) do$/;"	f
inputs_for	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def inputs_for(form, field, options \\\\ [], fun) do$/;"	f
insert	deps/ecto/lib/ecto/adapter.ex	/^  defcallback insert(repo, model_meta, fields, autogenerate_id, returning, options) ::$/;"	c
insert	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def insert(_repo, %{model: model}, _params, _autogen, [_|_] = returning, _opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def insert(repo, %{source: {prefix, source}}, params, {pk, :id, nil}, [], opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def insert(repo, model_meta, params, autogen, [], opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def insert(prefix, table, [], _returning),$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def insert(prefix, table, fields, _returning) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def insert(prefix, table, fields, returning) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/sql.ex	/^      def insert(repo, %{source: {prefix, source}}, params, _autogenerate, returning, opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/sql.ex	/^      def insert(repo, model_meta, params, {key, :binary_id, nil}, returning, opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/sql.ex	/^      def insert(repo, model_meta, params, {key, :id, nil}, returning, opts) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback insert(prefix ::String.t, table :: String.t,$/;"	c
insert	deps/ecto/lib/ecto/repo.ex	/^      def insert(model, opts \\\\ []) do$/;"	f
insert	deps/ecto/lib/ecto/repo.ex	/^  defcallback insert(Ecto.Model.t | Ecto.Changeset.t, Keyword.t) ::$/;"	c
insert	deps/ecto/lib/ecto/repo/model.ex	/^  def insert(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
insert	deps/ecto/lib/ecto/repo/model.ex	/^  def insert(repo, adapter, %{__struct__: _} = struct, opts) when is_list(opts) do$/;"	f
insert!	deps/ecto/lib/ecto/repo.ex	/^      def insert!(model, opts \\\\ []) do$/;"	f
insert!	deps/ecto/lib/ecto/repo.ex	/^  defcallback insert!(Ecto.Model.t, Keyword.t) :: Ecto.Model.t | no_return$/;"	c
insert!	deps/ecto/lib/ecto/repo/model.ex	/^  def insert!(repo, adapter, model_or_changeset, opts) do$/;"	f
insert_changes	deps/ecto/lib/ecto/repo/model.ex	/^  defp insert_changes(struct, fields, embeds, assocs, changeset) do$/;"	f
insert_periods_for_zone	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp insert_periods_for_zone(table, map, zone_name) do$/;"	f
inside_scope?	deps/phoenix/lib/phoenix/router/scope.ex	/^  def inside_scope?(module), do: length(get_stack(module)) > 1$/;"	f
inspect	deps/decimal/lib/decimal.ex	/^  def inspect(dec, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/association.ex	/^    def inspect(not_loaded, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/datetime.ex	/^  def inspect(dt, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  def inspect(query, opts) do$/;"	f
inspect	deps/ecto/lib/ecto/schema.ex	/^      def inspect(metadata, opts) do$/;"	f
inspect	deps/plug/lib/plug/conn.ex	/^  def inspect(conn, opts) do$/;"	f
inspect_error	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp inspect_error(reason) do$/;"	f
inspect_error	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp inspect_error({'EXIT', reason}) do$/;"	f
int_pow10	deps/decimal/lib/decimal.ex	/^  defp int_pow10(num, 0),$/;"	f
int_pow10	deps/decimal/lib/decimal.ex	/^  defp int_pow10(num, pow) when pow > 0,$/;"	f
integer	deps/timex/lib/parse/datetime/helpers.ex	/^  def integer(opts \\\\ []) do$/;"	f
intercept	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro intercept(events) when is_list(events) do$/;"	a
interval	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp interval(count, "millisecond", sources, query) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp interval(count, interval, sources, query) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, _sources, _query) when is_float(count) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, _sources, _query) when is_integer(count) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, sources, query) do$/;"	f
interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def interval!(interval) when interval in @interval,$/;"	f
interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def interval!(other),$/;"	f
into	deps/plug/lib/plug/conn.ex	/^  def into(conn) do$/;"	f
invalid_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  defp invalid_args! do$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([]), do: false$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([h|_]) when h in [".", "..", ""], do: true$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([h|t]), do: String.contains?(h, ["\/", "\\\\", ":"]) or invalid_path?(t)$/;"	f
invert	deps/timex/lib/time/time.ex	/^  def invert({mega, sec, micro}) do$/;"	f
is_date	deps/ecto/lib/ecto/datetime.ex	/^  defmacro is_date(_year, month, day) do$/;"	a
is_iso_8601	deps/ecto/lib/ecto/datetime.ex	/^  defmacro is_iso_8601(x) do$/;"	a
is_leap?	deps/timex/lib/date/date.ex	/^  def is_leap?(%DateTime{:year => year}),   do: is_leap?(year)$/;"	f
is_leap?	deps/timex/lib/date/date.ex	/^  def is_leap?(year) when is_integer(year), do: :calendar.is_leap_year(year)$/;"	f
is_nil	deps/ecto/lib/ecto/query/api.ex	/^  def is_nil(value), do: doc! [value]$/;"	f
is_time	deps/ecto/lib/ecto/datetime.ex	/^  defmacro is_time(hour, min, sec, usec \\\\ 0) do$/;"	a
is_valid?	deps/timex/lib/date/date.ex	/^  def is_valid?(%DateTime{:year => y, :month => m, :day => d, :hour => h, :minute => min, :second => sec, :timezone => tz}) do$/;"	f
is_valid?	deps/timex/lib/date/date.ex	/^  def is_valid?({date, time, tz}) do$/;"	f
is_valid_time?	deps/timex/lib/date/date.ex	/^  defp is_valid_time?({hour,min,sec}) do$/;"	f
is_valid_tz?	deps/timex/lib/date/date.ex	/^  defp is_valid_tz?(%TimezoneInfo{:full_name => tzname}), do: Timezone.exists?(tzname)$/;"	f
is_valid_tz?	deps/timex/lib/date/date.ex	/^  defp is_valid_tz?(_), do: false$/;"	f
is_weekday	deps/timex/lib/parse/datetime/helpers.ex	/^  def is_weekday(name) do$/;"	f
iso8601	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso8601(opts \\\\ []) do$/;"	f
iso_date	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_date(_) do$/;"	f
iso_day_to_date_tuple	deps/timex/lib/date/date.ex	/^  defp iso_day_to_date_tuple(year, day) do$/;"	f
iso_ordinal	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_ordinal(_) do$/;"	f
iso_time	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_time(_) do$/;"	f
iso_triplet	deps/timex/lib/date/date.ex	/^  def iso_triplet(%DateTime{} = datetime) do$/;"	f
iso_week	deps/timex/lib/date/date.ex	/^  def iso_week(%DateTime{:year => y, :month => m, :day => d}) do$/;"	f
iso_week	deps/timex/lib/date/date.ex	/^  def iso_week(date), do: iso_week(from(date, :utc))$/;"	f
iso_week	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_week(_) do$/;"	f
iso_weekday	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_weekday(opts \\\\ []) do$/;"	f
iterate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp iterate(_fun, 0, _prev, acc), do: acc$/;"	f
iterate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp iterate(fun, iteration, prev, acc) do$/;"	f
jobs	deps/exq/lib/exq/api.ex	/^  def jobs(pid) do$/;"	f
jobs	deps/exq/lib/exq/api.ex	/^  def jobs(pid, queue) do$/;"	f
jobs	deps/exq/lib/exq/enqueuer.ex	/^  def jobs(pid) do$/;"	f
jobs	deps/exq/lib/exq/enqueuer.ex	/^  def jobs(pid, :scheduled) do$/;"	f
jobs	deps/exq/lib/exq/enqueuer.ex	/^  def jobs(pid, queue) do$/;"	f
join	_build/dev/lib/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def join("<%= plural %>:lobby", payload, socket) do$/;"	f
join	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join(%Query{joins: []}, _sources), do: []$/;"	f
join	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join(%Query{joins: joins} = query, sources) do$/;"	f
join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join(%Query{joins: []}, _sources), do: []$/;"	f
join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join(%Query{joins: joins} = query, sources) do$/;"	f
join	deps/ecto/lib/ecto/query.ex	/^  defmacro join(query, qual, binding, expr, on \\\\ nil) do$/;"	a
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, assoc: {ix, right}}, name, names) do$/;"	f
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, source: source, params: params, on: on}, name, names) do$/;"	f
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, source: {source, model}, on: on}, name, names) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^        def join(topic, auth_msg, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^      def join("rooms:" <> room_id, auth_message, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^      def join("rooms:lobby", _auth_message, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^  defcallback join(topic :: binary, auth_msg :: map, Socket.t) ::$/;"	c
join	deps/phoenix/lib/phoenix/channel/server.ex	/^  def join(socket, auth_payload) do$/;"	f
join	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp join(socket, reply, parent, ref) do$/;"	f
join	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join(module, path, alias, as, private, assigns) do$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, topic, payload)$/;"	f
join	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def join("<%= plural %>:lobby", payload, socket) do$/;"	f
join	deps/phoenix_live_reload/lib/phoenix_live_reload/channel.ex	/^  def join("phoenix:live_reload", _msg, socket) do$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr) when is_atom(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr) when is_binary(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!({source, module}) when is_binary(source) and is_atom(module),$/;"	f
join_alias	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_alias(stack, alias) when is_atom(alias) do$/;"	f
join_as	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_as(_stack, nil), do: nil$/;"	f
join_as	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_as(stack, as) when is_atom(as) or is_binary(as) do$/;"	f
join_assigns	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_assigns(stack, assigns) do$/;"	f
join_guards	deps/plug/lib/plug/router.ex	/^  defp join_guards(fst, snd),  do: (quote do: unquote(fst) and unquote(snd))$/;"	f
join_guards	deps/plug/lib/plug/router.ex	/^  defp join_guards(fst, true), do: fst$/;"	f
join_path	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_path(stack, path) do$/;"	f
join_paths	deps/phoenix/lib/phoenix/template.ex	/^  defp join_paths([]),    do: ""$/;"	f
join_paths	deps/phoenix/lib/phoenix/template.ex	/^  defp join_paths(paths), do: Path.join(paths)$/;"	f
join_pipe_through	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_pipe_through(stack) do$/;"	f
join_private	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_private(stack, private) do$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:full),  do: "FULL OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:inner), do: "INNER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:left),  do: "LEFT OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:right), do: "RIGHT OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:full),  do: "FULL OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:inner), do: "INNER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:left),  do: "LEFT OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:right), do: "RIGHT OUTER"$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:full),  do: :full_join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:inner), do: :join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:left),  do: :left_join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:right), do: :right_join$/;"	f
join_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_sources(joins) do$/;"	f
joins	deps/ecto/lib/ecto/query/inspect.ex	/^  defp joins(joins, names) do$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(%{owner: owner, through: through}) do$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(refl) do$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  defcallback joins_query(t) :: Ecto.Query.t$/;"	c
joins_query	deps/ecto/lib/ecto/association.ex	/^  defp joins_query(query, through, counter) do$/;"	f
js_content_type?	deps/plug/lib/plug/csrf_protection.ex	/^  defp js_content_type?(conn) do$/;"	f
json	deps/phoenix/lib/phoenix/controller.ex	/^  def json(conn, data) do$/;"	f
json_error	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    defp json_error(msg) when is_binary(msg), do: msg$/;"	f
json_error	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    defp json_error({msg, count: count}) when is_binary(msg) do$/;"	f
json_header_plug	deps/plug/lib/plug.ex	/^      def json_header_plug(conn, opts) do$/;"	f
json_library	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp json_library, do: Application.get_env(:ecto, :json_library)$/;"	f
json_library	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp json_library do$/;"	f
json_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def json_response(conn, status) do$/;"	f
json_response?	deps/phoenix/lib/phoenix/controller.ex	/^  defp json_response?(conn) do$/;"	f
jsonify	deps/exq/web/json_api.ex	/^  def jsonify(%Plug.Conn{path_info: [on | path]} = conn, opts, on) do$/;"	f
jsonify	deps/exq/web/json_api.ex	/^  def jsonify(conn, _opts, _on), do: conn$/;"	f
jsonp_body	deps/phoenix/lib/phoenix/controller.ex	/^  defp jsonp_body(data, callback) do$/;"	f
key!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def key!(key) when is_atom(key),$/;"	f
key!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def key!(key),$/;"	f
keys	deps/phoenix/lib/phoenix/config.ex	/^  defp keys(data) do$/;"	f
keys!	deps/exq/lib/exq/redis/connection.ex	/^  def keys!(redis, search \\\\ "*") do$/;"	f
kill_and_wait	deps/phoenix/test/shared/pubsub_test.exs	/^  defp kill_and_wait(pid) do$/;"	f
kitchen	deps/timex/lib/parse/datetime/parsers.ex	/^  def kitchen(opts) do$/;"	f
kw_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_expr(_key, nil, _names), do: []$/;"	f
kw_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_expr(key, expr, names),  do: [{key, expr(expr, names)}]$/;"	f
kw_exprs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_exprs(key, exprs, names) do$/;"	f
kw_inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_inspect(_key, nil), do: []$/;"	f
kw_inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_inspect(key, val),  do: [{key, inspect(val)}]$/;"	f
label	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp label(key) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, [do: block]) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, opts) when is_list(opts) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, opts, [do: block]) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, text) when is_binary(text) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, text, opts) when is_binary(text) and is_list(opts) do$/;"	f
last_line_for_zone	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp last_line_for_zone(zone_name) do$/;"	f
last_weekday_of_month	deps/tzdata/lib/tzdata/util.ex	/^  def last_weekday_of_month(year, month, weekday) do$/;"	f
latest_file_size	deps/tzdata/lib/tzdata/data_loader.ex	/^  def latest_file_size(url\\\\@download_url) do$/;"	f
latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  def latest_remote_poll_date do$/;"	f
latest_remote_poll_file_exists?	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp latest_remote_poll_file_exists?, do: File.exists? remote_poll_file_name$/;"	f
layout	deps/phoenix/lib/phoenix/controller.ex	/^  def layout(conn), do: conn.private |> Map.get(:phoenix_layout, false)$/;"	f
layout	deps/phoenix/lib/phoenix/controller.ex	/^  defp layout(conn, assigns, format) do$/;"	f
layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def layout_formats(conn) do$/;"	f
lazy_ask	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp lazy_ask(%{lazy: true, conn: nil, broker: broker, tag: tag} = s) do$/;"	f
lazy_connect	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  defp lazy_connect(worker, ref, queue_time, timeout) do$/;"	f
lazy_connect	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp lazy_connect(%{lazy: true, conn: nil} = s) do$/;"	f
leap_sec_data	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp leap_sec_data(tzdata_dir), do: LeapSecParser.read_file(tzdata_dir)$/;"	f
leap_sec_data	deps/tzdata/lib/tzdata/release_reader.ex	/^  def leap_sec_data,          do: simple_lookup(:leap_sec_data) |> hd |> elem(1)$/;"	f
leap_second_data_valid_until	deps/tzdata/lib/tzdata.ex	/^  def leap_second_data_valid_until do$/;"	f
leap_seconds	deps/tzdata/lib/tzdata.ex	/^  def leap_seconds do$/;"	f
leap_seconds_with_tai_diff	deps/tzdata/lib/tzdata.ex	/^  def leap_seconds_with_tai_diff do$/;"	f
leave	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def leave(socket) do$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left != right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left < right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left <= right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left == right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left > right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left >= right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left and right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left in right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left or right, do: doc! [left, right]$/;"	f
letter_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp letter_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
letter_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp letter_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
like	deps/ecto/lib/ecto/query/api.ex	/^  def like(string, search), do: doc! [string, search]$/;"	f
limit	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp limit(%Query{limit: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
limit	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp limit(%Query{limit: nil}, _sources), do: []$/;"	f
limit	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp limit(%Query{limit: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
limit	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp limit(%Query{limit: nil}, _sources), do: []$/;"	f
limit	deps/ecto/lib/ecto/query.ex	/^  defmacro limit(query, binding, expr) do$/;"	a
line_from_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp line_from_expr(_), do: nil$/;"	f
line_from_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp line_from_expr({_, meta, _}) when is_list(meta), do: Keyword.get(meta, :line)$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(_text, opts) when not is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(opts) when is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(opts, do: contents) when is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(text, opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(text, opts)$/;"	f
link_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def link_list(from_initial_pass) do$/;"	f
link_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def link_list,              do: simple_lookup(:link_list) |> hd |> elem(1)$/;"	f
links	deps/tzdata/lib/tzdata.ex	/^  def links, do: Tzdata.ReleaseReader.links$/;"	f
links	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def links(from_initial_pass) do$/;"	f
links	deps/tzdata/lib/tzdata/release_reader.ex	/^  def links,                  do: simple_lookup(:links) |> hd |> elem(1)$/;"	f
list	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def list(local_server) when is_atom(local_server) do$/;"	f
list	deps/plug/lib/plug/conn/utils.ex	/^  def list(binary) do$/;"	f
list_failed	deps/exq/lib/exq/enqueuer/server.ex	/^  def list_failed(redis, namespace) do$/;"	f
list_jobs	deps/exq/lib/exq/enqueuer/server.ex	/^  def list_jobs(redis, namespace, :scheduled) do$/;"	f
list_jobs	deps/exq/lib/exq/enqueuer/server.ex	/^  def list_jobs(redis, namespace, queue) do$/;"	f
list_of_single_value_from_map_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp list_of_single_value_from_map_list(list, key), do: Enum.map(list, fn elem -> elem[key] end)$/;"	f
list_queues	deps/exq/lib/exq/enqueuer/server.ex	/^  def list_queues(redis, namespace) do$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix.ex	/^  defp list_to_attr([key, comp, value]) do$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix.ex	/^  defp list_to_attr([key, value]), do: {String.to_atom(key), String.to_atom(value)}$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix.ex	/^  defp list_to_attr([key]), do: {String.to_atom(key), :string}$/;"	f
list_to_hex_str	deps/uuid/lib/uuid.ex	/^  defp list_to_hex_str([]) do$/;"	f
list_to_hex_str	deps/uuid/lib/uuid.ex	/^  defp list_to_hex_str([head | tail]) do$/;"	f
listen	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp listen(conn, server_ref, endpoint, opts) do$/;"	f
listen	deps/postgrex/lib/postgrex/connection.ex	/^  def listen(pid, channel, opts \\\\ []) do$/;"	f
listen!	deps/postgrex/lib/postgrex/connection.ex	/^  def listen!(pid, channel, opts \\\\ []) do$/;"	f
literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp literal(value, expected, vars),$/;"	f
literal	deps/timex/lib/parse/datetime/parsers.ex	/^  defp literal(parser), do: map(parser, fn x -> [literal: x] end)$/;"	f
llen!	deps/exq/lib/exq/redis/connection.ex	/^  def llen!(redis, list) do$/;"	f
load	deps/ecto/integration_test/support/types.exs	/^  def load(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
load	deps/ecto/lib/ecto/adapter.ex	/^      def load(:binary_id, value), do: load(Ecto.UUID, value)$/;"	f
load	deps/ecto/lib/ecto/adapter.ex	/^      def load(:boolean, 0), do: {:ok, false}$/;"	f
load	deps/ecto/lib/ecto/adapter.ex	/^      def load(:boolean, 1), do: {:ok, true}$/;"	f
load	deps/ecto/lib/ecto/adapter.ex	/^      def load(type, value), do: Ecto.Type.load(type, value, &load\/2)$/;"	f
load	deps/ecto/lib/ecto/adapter.ex	/^  defcallback load(Ecto.Type.t, term) :: {:ok, term} | :error$/;"	c
load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def load(:boolean, 0), do: {:ok, false}$/;"	f
load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def load(:boolean, 1), do: {:ok, true}$/;"	f
load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def load(:map, binary) when is_binary(binary),$/;"	f
load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def load(type, value), do: super(type, value)$/;"	f
load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def load({:embed, _} = type, binary) when is_binary(binary),$/;"	f
load	deps/ecto/lib/ecto/adapters/sql.ex	/^      def load(type, value), do: Ecto.Adapters.SQL.load(type, value, &load\/2)$/;"	f
load	deps/ecto/lib/ecto/adapters/sql.ex	/^  def load(:binary_id, data, loader),$/;"	f
load	deps/ecto/lib/ecto/adapters/sql.ex	/^  def load(type, data, loader),$/;"	f
load	deps/ecto/lib/ecto/adapters/sql.ex	/^  def load({:embed, _} = type, data, loader),$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load(_), do: :error$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load({_, _, _} = time) do$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load({hour, min, sec, usec}) do$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load({year, month, day}) do$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load({{_, _, _}, {_, _, _}} = datetime) do$/;"	f
load	deps/ecto/lib/ecto/datetime.ex	/^  def load({{year, month, day}, {hour, min, sec, usec}}) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^        def load(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(_type, nil, _loader), do: {:ok, nil}$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(type, value, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(type, value, loader \\\\ &load\/2)$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load({:array, type}, value, loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load({:embed, embed}, value, loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  defcallback load(term) :: {:ok, term} | :error$/;"	c
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(<< _::128 >> = uuid) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(<<_::64, ?-, _::32, ?-, _::32, ?-, _::32, ?-, _::96>> = string) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(_), do: :error$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(%{__meta__: %{state: :built}}, %NotLoaded{__cardinality__: cardinality}) do$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(_model, loaded), do: loaded$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(model, %NotLoaded{__field__: field}) do$/;"	f
load!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp load!(type, value, adapter) do$/;"	f
load!	deps/ecto/lib/ecto/schema.ex	/^  defp load!(type, value, loader) do$/;"	f
load_and_save_table	deps/tzdata/lib/tzdata/data_builder.ex	/^  def load_and_save_table do$/;"	f
load_assoc	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp load_assoc(struct, assoc, dict) do$/;"	f
load_assocs	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp load_assocs({child_key, struct}, sub_dicts, refls) do$/;"	f
load_changes	deps/ecto/lib/ecto/repo/model.ex	/^  defp load_changes(%{types: types} = changeset, action, values, adapter) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :many, related: model, field: field} = embed,$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :many}, nil, _fun), do: {:ok, []}$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :one, related: model, field: field} = embed,$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :one}, nil, _fun), do: {:ok, nil}$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(_embed, _value, _fun) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(_field, model, value, loader) when is_map(value) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(field, _model, value, _fun) do$/;"	f
load_ets_table	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp load_ets_table(release_name) do$/;"	f
load_plugin	deps/timex/lib/utils/utils.ex	/^  defp load_plugin(module, modules) do$/;"	f
load_release	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp load_release do$/;"	f
load_through	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp load_through(struct, assoc, [h|t]) do$/;"	f
loaded?	deps/ecto/lib/ecto/association.ex	/^  def loaded?(association) do$/;"	f
loaded?	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp loaded?(struct, field) do$/;"	f
loaded_tzdata_matches_iana_file_size?	deps/tzdata/lib/tzdata/release_updater.ex	/^  defp loaded_tzdata_matches_iana_file_size? do$/;"	f
local	deps/ecto/lib/ecto/datetime.ex	/^  def local do$/;"	f
local	deps/timex/lib/date/date.ex	/^  def local do$/;"	f
local	deps/timex/lib/date/date.ex	/^  def local(%DateTime{:timezone => tz} = date) do$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local(%DateTime{} = for),    do: get(Local.lookup(for), for)$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local(), do: local(Date.now)$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local(date)$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local({{y,m,d}, {h,min,s}}), do: %DateTime{year: y, month: m, day: d, hour: h, minute: min, second: s, timezone: %TimezoneInfo{}} |> local$/;"	f
local_on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp local_on_replace(%{on_replace: :mark_as_invalid}, _changeset_or_model) do$/;"	f
local_on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp local_on_replace(%{on_replace: :raise, field: name, owner: owner}, _) do$/;"	f
local_on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp local_on_replace(_relation, _changeset_or_model) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:osx, date) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:unix, date) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:win, _date) do$/;"	f
lock	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp lock(lock_clause), do: lock_clause$/;"	f
lock	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp lock(nil), do: []$/;"	f
lock	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp lock(lock_clause), do: lock_clause$/;"	f
lock	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp lock(nil), do: []$/;"	f
lock	deps/ecto/lib/ecto/query.ex	/^  defmacro lock(query, expr) do$/;"	a
log	deps/ecto/integration_test/support/repo.exs	/^      def log(cmd) do$/;"	f
log	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp log(_repo, nil), do: :ok$/;"	f
log	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp log(repo, entry), do: repo.log(entry)$/;"	f
log	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log(false, _msg), do: :ok$/;"	f
log	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log(level, msg),  do: Logger.log(level, msg)$/;"	f
log	deps/ecto/lib/ecto/migrator.ex	/^  defp log(false, _msg), do: :ok$/;"	f
log	deps/ecto/lib/ecto/migrator.ex	/^  defp log(level, msg),  do: Logger.log(level, msg)$/;"	f
log	deps/ecto/lib/ecto/repo.ex	/^      def log(entry) do$/;"	f
log	deps/ecto/lib/ecto/repo.ex	/^  defcallback log(Ecto.LogEntry.t) :: any$/;"	c
log_and_execute_ddl	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log_and_execute_ddl(repo, level, command) do$/;"	f
log_connect_error	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp log_connect_error(error, %{module: module, params: params}) do$/;"	f
log_halt	deps/plug/lib/plug/builder.ex	/^  defp log_halt(plug_type, plug, env, builder_opts) do$/;"	f
log_info	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp log_info("phoenix" <> _, _func), do: :noop$/;"	f
log_info	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp log_info(_topic, func), do: Logger.info(func)$/;"	f
log_message	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^        defp log_message(conn, msg) do$/;"	f
log_message	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def log_message(conn, msg) do$/;"	f
lookup	deps/timex/lib/timezone/timezone_local.ex	/^  def lookup(%DateTime{} = date) do$/;"	f
lookup	deps/timex/lib/timezone/timezone_local.ex	/^  def lookup(), do: Date.now |> lookup$/;"	f
lookup_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp lookup_periods_for_zone(_), do: []$/;"	f
lookup_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp lookup_periods_for_zone(zone) when is_binary(zone), do: simple_lookup(String.to_atom zone)$/;"	f
lookup_timezone_by_abbreviation	deps/timex/lib/timezone/timezone.ex	/^  defp lookup_timezone_by_abbreviation(abbr, secs) do$/;"	f
lower	deps/ecto/lib/ecto/uuid.ex	/^  defp lower(<<>>, acc),$/;"	f
lower	deps/ecto/lib/ecto/uuid.ex	/^  defp lower(<<h, t::binary>>, acc) when h in ?A..?F,$/;"	f
lower	deps/ecto/lib/ecto/uuid.ex	/^  defp lower(<<h, t::binary>>, acc),$/;"	f
lower_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp lower_impl(%ParserState{status: :ok} = state) do$/;"	f
lpop!	deps/exq/lib/exq/redis/connection.ex	/^  def lpop!(redis, key) do$/;"	f
lrange!	deps/exq/lib/exq/redis/connection.ex	/^  def lrange!(redis, list, range_start \\\\ "0", range_end \\\\ "-1") do$/;"	f
lrem!	deps/exq/lib/exq/redis/connection.ex	/^  def lrem!(redis, list, value, count \\\\ 1) do$/;"	f
mac_fun	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp mac_fun(digest, secret) do$/;"	f
make_map	deps/tzdata/lib/tzdata/basic_data_map.ex	/^  def make_map(all_files_read) do$/;"	f
make_sure_a_release_is_on_file	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp make_sure_a_release_is_on_file do$/;"	f
manager_name	deps/exq/lib/exq/manager/supervisor.ex	/^  defp manager_name(opts) do$/;"	f
manifest_join	deps/phoenix/lib/phoenix/digester.ex	/^  defp manifest_join(".", filename),  do: filename$/;"	f
manifest_join	deps/phoenix/lib/phoenix/digester.ex	/^  defp manifest_join(path, filename), do: Path.join(path, filename)$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(0, _, _, %ParserState{status: :error} = err, _parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(_, acc, %ParserState{} = s, %ParserState{status: :error}, _parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, %ParserState{status: :ok, results: rs}, %ParserState{status: :ok, results: rs} = s, parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, _last, %ParserState{status: :ok, results: []} = s, parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, _last, %ParserState{status: :ok, results: [h|rs]} = s, parser),$/;"	f
many_assoc_dict	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp many_assoc_dict([], _key, dict) do$/;"	f
many_assoc_dict	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp many_assoc_dict([h|t], key, dict) do$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes([], _pks, fun, current, acc, valid?, skip?) do$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes([map | rest], pks, fun, current, acc, valid?, skip?) when is_map(map) do$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes(_params, _pkd, _fun, _current, _acc, _valid?, _skip?) do$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes(list, pks, param_pks, fun, current) do$/;"	f
map_directive	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_directive(directive, opts) do$/;"	f
map_directive	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_directive(directive, opts) do$/;"	f
map_file	deps/phoenix/lib/phoenix/digester.ex	/^  defp map_file(file_path, input_path) do$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag("0"), do: [padding: :zeroes]$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag("_"), do: [padding: :spaces]$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag(_),   do: []$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_flag(flag) do$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal([]),        do: nil$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal(literal),   do: %Directive{type: :literal, value: literal, parser: char(literal)}$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal(literals)$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal([]),        do: nil$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal(literal),   do: %Directive{type: :literal, value: literal, parser: char(literal)}$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal(literals)$/;"	f
map_modifier	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_modifier(modifier) do$/;"	f
map_with_name_key	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def map_with_name_key(from_initial_pass, record_type) do$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  def mask(left, right) do$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  defp mask(<<>>, <<>>, acc) do$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  defp mask(<<x, left::binary>>, <<y, right::binary>>, acc) do$/;"	f
mask	deps/plug/lib/plug/csrf_protection.ex	/^  defp mask(token) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  def masked_compare(left, right, mask) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  defp masked_compare(<<>>, <<>>, <<>>, acc) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  defp masked_compare(<<x, left::binary>>, <<y, right::binary>>, <<z, mask::binary>>, acc) do$/;"	f
match	deps/phoenix/lib/phoenix/router.ex	/^        defp match(conn, _method, _path_info, _host) do$/;"	f
match	deps/phoenix/lib/phoenix/router.ex	/^      defp match(conn, []) do$/;"	f
match	deps/phoenix/lib/phoenix/router.ex	/^      defp match(var!(conn), unquote(exprs.verb_match), unquote(exprs.path),$/;"	f
match	deps/plug/lib/plug/router.ex	/^      defp match("GET", ["foo", "bar"], conn) do$/;"	f
match	deps/plug/lib/plug/router.ex	/^      defp match(conn, _opts) do$/;"	f
match	deps/plug/lib/plug/router.ex	/^  defmacro match(path, options, contents \\\\ []) do$/;"	a
match?	deps/ecto/lib/ecto/type.ex	/^  def match?(schema_type, query_type) do$/;"	f
match_dispatch	deps/phoenix/lib/phoenix/router.ex	/^  defp match_dispatch() do$/;"	f
match_extension_against_type	deps/postgrex/lib/postgrex/types.ex	/^  defp match_extension_against_type(extension, opts, type_info) do$/;"	f
match_topic_to_channel!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defp match_topic_to_channel!(socket, topic) do$/;"	f
match_type	deps/postgrex/lib/postgrex/types.ex	/^  defp match_type({field, value}, type_info) do$/;"	f
matches_any_pattern?	deps/phoenix_live_reload/lib/phoenix_live_reload/channel.ex	/^  defp matches_any_pattern?(path, patterns) do$/;"	f
matching	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extension.ex	/^  defcallback matching(opts) :: [type: String.t,$/;"	c
matching	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  def matching(version) when version >= {9, 1, 0},$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def matching(_library),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/text.ex	/^  def matching(version) when version < {9, 1, 0},$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{coef: :qNaN}, %Decimal{} = num2) do$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{sign: sign1, exp: exp1} = num1, %Decimal{sign: sign2, exp: exp2} = num2) do$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{} = num1, %Decimal{coef: :qNaN}) do$/;"	f
max	deps/ecto/lib/ecto/query/api.ex	/^  def max(value), do: doc! [value]$/;"	f
max_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp max_for(type, opts) do$/;"	f
maybe_add_vary	deps/plug/lib/plug/static.ex	/^  defp maybe_add_vary(conn, false) do$/;"	f
maybe_add_vary	deps/plug/lib/plug/static.ex	/^  defp maybe_add_vary(conn, true) do$/;"	f
maybe_binding	deps/phoenix/lib/phoenix/router/route.ex	/^  defp maybe_binding([]), do: nil$/;"	f
maybe_binding	deps/phoenix/lib/phoenix/router/route.ex	/^  defp maybe_binding(binding) do$/;"	f
maybe_fetch_query_params	deps/plug/lib/plug/debugger.ex	/^  defp maybe_fetch_query_params(conn) do$/;"	f
maybe_fetch_session	deps/plug/lib/plug/debugger.ex	/^  defp maybe_fetch_session(conn) do$/;"	f
maybe_flush	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp maybe_flush() do$/;"	f
maybe_mark_for_deletion	deps/ecto/lib/ecto/changeset.ex	/^                  defp maybe_mark_for_deletion(changeset) do$/;"	f
maybe_merge	deps/phoenix/lib/phoenix/router/route.ex	/^  defp maybe_merge(key, data) do$/;"	f
maybe_process_after	deps/ecto/lib/ecto/repo/model.ex	/^  defp maybe_process_after({:error, %{changes: changes}}, user_changeset, _model, _callback) do$/;"	f
maybe_process_after	deps/ecto/lib/ecto/repo/model.ex	/^  defp maybe_process_after({:ok, changeset}, _user_changeset, model, callback) do$/;"	f
maybe_render	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp maybe_render(conn, kind, reason, stack, opts) do$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/association.ex	/^  defp maybe_replace_one!(%{cardinality: :one, field: field} = assoc,$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/association.ex	/^  defp maybe_replace_one!(_, _, _, _, _), do: :ok$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/embedded.ex	/^  defp maybe_replace_one!(%{cardinality: :one, related: model}, :insert, current) when current != nil do$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/embedded.ex	/^  defp maybe_replace_one!(_embed, _action, _current), do: :ok$/;"	f
maybe_secure_cookie	deps/plug/lib/plug/conn.ex	/^  defp maybe_secure_cookie(cookie, :https), do: Map.put_new(cookie, :secure, true)$/;"	f
maybe_secure_cookie	deps/plug/lib/plug/conn.ex	/^  defp maybe_secure_cookie(cookie, _),      do: cookie$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{state: :set} = conn, _plug), do: Plug.Conn.send_resp(conn)$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{state: :unset}, _plug),      do: raise Plug.Conn.NotSentError$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{} = conn, _plug),            do: conn$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(other, plug) do$/;"	f
mdivmod	deps/timex/lib/time/time.ex	/^  defp mdivmod(a) do$/;"	f
mdivmod	deps/timex/lib/time/time.ex	/^  defp mdivmod(initial, a) do$/;"	f
measure	deps/timex/lib/time/time.ex	/^  def measure(fun), do: do_measure(fun)$/;"	f
measure	deps/timex/lib/time/time.ex	/^  def measure(fun, args), do: do_measure(fun, args)$/;"	f
measure	deps/timex/lib/time/time.ex	/^  def measure(module, fun, args), do: do_measure(module, fun, args)$/;"	f
media_type	deps/plug/lib/plug/conn/utils.ex	/^  def media_type(binary) do$/;"	f
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(%Changeset{model: model} = cs1, %Changeset{model: model} = cs2) do$/;"	f
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(%Changeset{}, %Changeset{}) do$/;"	f
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(changeset1, changeset2)$/;"	f
merge	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp merge([struct|sub_structs], {keys, dict, sub_dicts}, parent_key) do$/;"	f
merge	deps/phoenix/lib/phoenix/config.ex	/^  def merge(config1, config2) do$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(:join, query, exprs, {cache, params}, adapter) do$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(_left, :nocache, true), do: :nocache$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(_left, _right, false),  do: :nocache$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(kind, query, expr, {cache, params}, adapter)$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(kind, query, exprs, {cache, params}, adapter)$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(left, right, true),     do: [left|right]$/;"	f
merge_delete_changes	deps/ecto/lib/ecto/embedded.ex	/^  defp merge_delete_changes(changeset, _, _, _), do: changeset$/;"	f
merge_delete_changes	deps/ecto/lib/ecto/embedded.ex	/^  defp merge_delete_changes(changeset, embeds, types, :delete) do$/;"	f
merge_error_keys	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    defp merge_error_keys(errors) do$/;"	f
merge_fragments	deps/ecto/lib/ecto/query/builder.ex	/^  defp merge_fragments([h1], []),$/;"	f
merge_fragments	deps/ecto/lib/ecto/query/builder.ex	/^  defp merge_fragments([h1|t1], [h2|t2]),$/;"	f
merge_from	deps/ecto/lib/ecto/association.ex	/^  defp merge_from(from, _assoc_source), do: from$/;"	f
merge_from	deps/ecto/lib/ecto/association.ex	/^  defp merge_from({"join expression", _}, assoc_source), do: assoc_source$/;"	f
merge_headers	deps/plug/lib/plug/conn.ex	/^  defp merge_headers(headers, cookies) do$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(lhs, rhs, thing) do$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(nil, object, _thing), do: object$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(object, nil, _thing), do: object$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(object, object, _thing), do: object$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def merge_maps_in_list(list), do: merge_maps_in_list(list, %{})$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp merge_maps_in_list([], map), do: map$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp merge_maps_in_list([head|tail], map) do$/;"	f
merge_preloads	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp merge_preloads(_preload, left, right) when is_list(left) and is_list(right) do$/;"	f
merge_preloads	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp merge_preloads(preload, left, right) do$/;"	f
merge_related_keys	deps/phoenix_ecto/lib/phoenix_ecto/json.ex	/^    defp merge_related_keys(map, changes, types) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(%Conn{resp_headers: current} = conn, headers) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(%Conn{state: :sent}, _headers) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(conn, headers) when headers == %{} do$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(model, query)$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(struct, _query) do$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(struct, {source, _}) do$/;"	f
merger	deps/phoenix/lib/phoenix/config.ex	/^  defp merger(_k, v1, v2) do$/;"	f
message	deps/ecto/lib/ecto/changeset.ex	/^  defp message(opts, default) do$/;"	f
message	deps/ecto/lib/ecto/exceptions.ex	/^  def message(%{action: action, changeset: changeset}) do$/;"	f
message	deps/phoenix/lib/phoenix/template.ex	/^    def message(exception) do$/;"	f
message	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def message(%{kind: kind, reason: reason, stack: stack}) do$/;"	f
message	deps/plug/lib/plug/parsers.ex	/^    def message(exception) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{message: message}) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{value: value, message: nil}) do$/;"	f
message	deps/postgrex/lib/postgrex/error.ex	/^  def message(e) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:auth, msg_auth(type: :cleartext), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:auth, msg_auth(type: :md5, data: salt), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:auth, msg_auth(type: :ok), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:auth, msg_error(fields: fields), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:binding, msg_bind_complete(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:describing, msg_no_data(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:describing, msg_parameter_desc(type_oids: oids), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:describing, msg_row_desc(), %{bootstrap: {_, _, _, _}} = s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:describing, msg_row_desc(fields: fields), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:executing, msg_command_complete(),$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:executing, msg_command_complete(tag: tag), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:executing, msg_data_row(values: values), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:executing, msg_empty_query(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:init, msg_backend_key(pid: pid, key: key), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:init, msg_error(fields: fields), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:init, msg_ready(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(:parsing, msg_parse_complete(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(_, msg_notice(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(_, msg_notify(channel: channel, payload: payload), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(_, msg_parameter(name: name, value: value), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(_, msg_ready(), s) do$/;"	f
message	deps/postgrex/lib/postgrex/protocol.ex	/^  def message(state, msg_error(fields: fields), s) do$/;"	f
metadata	deps/ecto/lib/ecto/repo/model.ex	/^  defp metadata(%{__struct__: model, __meta__: meta}) do$/;"	f
method	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defp method(%Plug.Conn{method: method}), do: method$/;"	f
method	deps/plug/lib/plug/debugger.ex	/^  defp method(%Plug.Conn{method: method}), do:$/;"	f
microseconds	deps/timex/lib/parse/datetime/parsers.ex	/^  def microseconds(_) do$/;"	f
migrate	deps/ecto/lib/ecto/migrator.ex	/^  defp migrate(migrations, direction, repo, opts) do$/;"	f
migrated_versions	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def migrated_versions(repo) do$/;"	f
migrated_versions	deps/ecto/lib/ecto/migrator.ex	/^  def migrated_versions(repo) do$/;"	f
migrations_for	deps/ecto/lib/ecto/migrator.ex	/^  defp migrations_for(directory) do$/;"	f
migrations_path	deps/ecto/lib/mix/ecto.ex	/^  def migrations_path(repo) do$/;"	f
migrator_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  def migrator_direction do$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{coef: :qNaN}, %Decimal{} = num2) do$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{sign: sign1, exp: exp1} = num1, %Decimal{sign: sign2, exp: exp2} = num2) do$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{} = num1, %Decimal{coef: :qNaN}) do$/;"	f
min	deps/ecto/lib/ecto/query/api.ex	/^  def min(value), do: doc! [value]$/;"	f
min_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp min_for(type, opts) do$/;"	f
min_prcp	deps/ecto/lib/ecto.ex	/^      def min_prcp(min) do$/;"	f
min_width	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp min_width(), do: integer$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{coef: :qNaN} = num) do$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{coef: :sNaN} = num) do$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{sign: sign} = num) do$/;"	f
minute	deps/timex/lib/parse/datetime/parsers.ex	/^  def minute(opts \\\\ []) do$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile(paths, compilers) do$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile({:error, _reason}, _, _, _, _) do$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile({:module, Mix.Task}, app, root, paths, compilers) do$/;"	f
mod	deps/timex/lib/date/date.ex	/^  defp mod(a, b), do: rem(rem(a, b) + b, b)$/;"	f
mod_conn	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def mod_conn(worker, ref, timeout) do$/;"	f
modconn	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  defp modconn(%{conn: conn, module: module}) do$/;"	f
mode	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def mode(pool, timeout \\\\ 5_000) do$/;"	f
model	deps/ecto/lib/ecto/adapters/sql.ex	/^  def model(repo, conn, sql, values, returning, opts) do$/;"	f
model	web/web.ex	/^  def model do$/;"	f
modifiers	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp modifiers(), do: map(one_of(char, ["E", "O"]), &map_modifier\/1)$/;"	f
modify	deps/ecto/lib/ecto/migration.ex	/^  def modify(column, type, opts \\\\ []) when is_atom(column) do$/;"	f
modify_default	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp modify_default(name, type, opts) do$/;"	f
modify_null	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp modify_null(name, opts) do$/;"	f
module_to_template_root	deps/phoenix/lib/phoenix/template.ex	/^  def module_to_template_root(module, base, suffix) do$/;"	f
modules	deps/phoenix/lib/mix/phoenix.ex	/^  def modules do$/;"	f
modules_for_recompilation	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp modules_for_recompilation(modules) do$/;"	f
modules_to_file_paths	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp modules_to_file_paths(modules) do$/;"	f
monitor	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  defp monitor(pid,s) do$/;"	f
month2	deps/timex/lib/parse/datetime/parsers.ex	/^  def month2(opts \\\\ []) do$/;"	f
month_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def month_full(_) do$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(1),  do: "Jan"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(10), do: "Oct"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(11), do: "Nov"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(12), do: "Dec"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(2),  do: "Feb"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(3),  do: "Mar"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(4),  do: "Apr"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(5),  do: "May"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(6),  do: "Jun"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(7),  do: "Jul"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(8),  do: "Aug"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(9),  do: "Sep"$/;"	f
month_name	deps/timex/lib/date/date.ex	/^    def month_name(unquote(month_num)), do: unquote(name)$/;"	f
month_name	deps/timex/lib/date/date.ex	/^  def month_name(x), do: {:error, "Invalid month num: #{x}"}$/;"	f
month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  def month_number_for_month_name(string) do$/;"	f
month_short	deps/timex/lib/parse/datetime/parsers.ex	/^  def month_short(_) do$/;"	f
month_shortname	deps/timex/lib/date/date.ex	/^    def month_shortname(unquote(month_num)), do: String.slice(unquote(name), 0..2)$/;"	f
month_shortname	deps/timex/lib/date/date.ex	/^  def month_shortname(x), do: {:error, "Invalid month num: #{x}"}$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(abbr_cased)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(abbr_chars)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(abbr_lower)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(full_chars)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(lower)),      do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(month_name)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^      def month_to_num(unquote(symbol)),     do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/date/date.ex	/^  def month_to_num(x), do: {:error, "Invalid month name: #{x}"}$/;"	f
months	deps/timex/lib/parse/datetime/helpers.ex	/^  def months, do: @months$/;"	f
msg_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_send(msg, %{sock: sock}), do: msg_send(msg, sock)$/;"	f
msg_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_send(msg, {mod, sock}) do$/;"	f
msg_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_send(msgs, {mod, sock}) when is_list(msgs) do$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<?\/, t :: binary>>, acc) when acc != "",$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<h, t :: binary>>, acc) when h in @lower or h in @alpha or h == ?-,$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<h, t :: binary>>, acc) when h in @upper,$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(_, _acc),$/;"	f
mt_params	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_params(t, first, second) do$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(<<h, t :: binary>>, acc, first) when h in @lower or h in @alpha or h in @other,$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(<<h, t :: binary>>, acc, first) when h in @upper,$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(t, acc, first),$/;"	f
mt_wildcard	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_wildcard(<<?*, t :: binary>>, first),$/;"	f
mt_wildcard	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_wildcard(t, first),$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: 0}, %Decimal{coef: :inf}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :inf}, %Decimal{coef: 0}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, coef: :inf, exp: exp1}, %Decimal{sign: sign2, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
multiple_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def multiple_select(form, field, values, opts \\\\ []) do$/;"	f
my_datetime_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def my_datetime_select(form, field, opts \\\\ []) do$/;"	f
name_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp name_from(%{name: name}, field),$/;"	f
name_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp name_from(name, field) when is_atom(name),$/;"	f
name_to_code	deps/postgrex/lib/postgrex/error_code.ex	/^        def name_to_code(unquote(name)), do: unquote(code)$/;"	f
name_to_code	deps/postgrex/lib/postgrex/error_code.ex	/^  def name_to_code(name)$/;"	f
namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp namebased_uuid(:md5, data) do$/;"	f
namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp namebased_uuid(:sha1, data) do$/;"	f
namespace	deps/exq/web/router.ex	/^  def namespace(%Plug.Conn{path_info: [ns | path]} = conn, opts, ns) do$/;"	f
namespace	deps/exq/web/router.ex	/^  def namespace(conn, _opts, _ns), do: conn$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{coef: :qNaN}), do: true$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{coef: :sNaN}), do: true$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{}),            do: false$/;"	f
nested_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp nested_attrs(attr, dict, acc) do$/;"	f
new	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(%Decimal{} = num),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(binary) when is_binary(binary),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(float) when is_float(float),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(int) when is_integer(int),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(sign, coefficient, exponent) do$/;"	f
new	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def new(conn, _params) do$/;"	f
new	deps/timex/lib/date/datetime.ex	/^  def new do$/;"	f
new_command	deps/postgrex/lib/postgrex/connection.ex	/^  defp new_command(command, from) do$/;"	f
new_data	deps/postgrex/lib/postgrex/connection.ex	/^  defp new_data(<<type :: int8, size :: int32, data :: binary>> = tail, %{state: state} = s) do$/;"	f
new_data	deps/postgrex/lib/postgrex/connection.ex	/^  defp new_data(data, %{tail: tail} = s) do$/;"	f
new_query	deps/postgrex/lib/postgrex/connection.ex	/^  def new_query(statement, params, %{queue: queue} = s) do$/;"	f
new_release_has_been_downloaded	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def new_release_has_been_downloaded do$/;"	f
new_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp new_session(conn, endpoint, handler, transport, opts) do$/;"	f
newest_release_on_file	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp newest_release_on_file do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, column: col, input: <<?\\r::utf8,?\\n::utf8,rest::binary>>, results: results} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, input: <<?\\r::utf8>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, line: line, column: col, input: <<?\\r::utf8,c::utf8,_::binary>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,c::utf8,_::binary>>} = state) do$/;"	f
next	deps/postgrex/lib/postgrex/connection.ex	/^  def next(%{queue: queue} = s) do$/;"	f
next_backoff	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  defp next_backoff(backoff) do$/;"	f
nilify_all	deps/ecto/lib/ecto/model/dependent.ex	/^  def nilify_all(%Changeset{repo: repo, model: model} = changeset, assoc_field, related_key) do$/;"	f
no_assoc!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp no_assoc!(assocs, atom) do$/;"	f
no_assoc!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp no_assoc!(nil, _atom), do: nil$/;"	f
no_assoc_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def no_assoc_constraint(changeset, assoc, opts \\\\ []) do$/;"	f
no_assoc_message	deps/ecto/lib/ecto/changeset.ex	/^  defp no_assoc_message(:many), do: "are still associated to this entry"$/;"	f
no_assoc_message	deps/ecto/lib/ecto/changeset.ex	/^  defp no_assoc_message(:one), do: "is still associated to this entry"$/;"	f
no_name_error!	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  defp no_name_error! do$/;"	f
no_umbrella!	deps/ecto/lib/mix/ecto.ex	/^  def no_umbrella!(task) do$/;"	f
none_of_impl	deps/combine/lib/combine/parsers/base.ex	/^  defp none_of_impl(%ParserState{status: :ok} = state, parser, %Range{} = items),$/;"	f
normalize	deps/ecto/lib/ecto/query/planner.ex	/^  def normalize(query, operation, adapter) do$/;"	f
normalize	deps/ecto/lib/ecto/repo/preloader.ex	/^  def normalize(preload, assocs, original) do$/;"	f
normalize	deps/timex/lib/date/date.ex	/^  def normalize({{_,_,_}=date, time, tz}) do$/;"	f
normalize	deps/timex/lib/date/date.ex	/^  def normalize({{_,_,_}=date, time}), do: normalize({date, time, %TimezoneInfo{}})$/;"	f
normalize	deps/timex/lib/time/time.ex	/^  defp normalize({mega, sec, micro}) do$/;"	f
normalize_cowboy_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_cowboy_options(cowboy_options, :http) do$/;"	f
normalize_cowboy_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_cowboy_options(cowboy_options, :https) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each(atom, acc, assocs, _original) when is_atom(atom) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each(list, acc, assocs, original) when is_list(list) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each(other, _, _assocs, original) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each({atom, %Ecto.Query{} = query}, acc, assocs, _original) when is_atom(atom) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each({atom, list}, acc, assocs, original) when is_atom(atom) do$/;"	f
normalize_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_fields(%{assocs: [], preloads: []} = query, select) do$/;"	f
normalize_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_fields(%{assocs: assocs} = query, select) do$/;"	f
normalize_method	deps/plug/lib/plug/router/utils.ex	/^  def normalize_method(method) do$/;"	f
normalize_port	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp normalize_port(port) when is_binary(port), do: String.to_integer(port)$/;"	f
normalize_port	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp normalize_port(port) when is_integer(port), do: port$/;"	f
normalize_port	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp normalize_port(port) when is_binary(port), do: String.to_integer(port)$/;"	f
normalize_port	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp normalize_port(port) when is_integer(port), do: port$/;"	f
normalize_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_select(query, operation) do$/;"	f
normalize_source	deps/ecto/lib/ecto/query/inspect.ex	/^  defp normalize_source("Elixir." <> _ = source),$/;"	f
normalize_source	deps/ecto/lib/ecto/query/inspect.ex	/^  defp normalize_source(source),$/;"	f
normalize_ssl_file	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_ssl_file(key, cowboy_options) do$/;"	f
not	deps/ecto/lib/ecto/query/api.ex	/^  def not(value), do: doc! [value]$/;"	f
not_found	deps/plug/lib/plug/static.ex	/^        def not_found(conn, _) do$/;"	f
now	deps/plug/lib/plug/session/ets.ex	/^  defp now() do$/;"	f
now	deps/timex/lib/date/date.ex	/^  def now do$/;"	f
now	deps/timex/lib/date/date.ex	/^  def now(:days), do: to_days(now())$/;"	f
now	deps/timex/lib/date/date.ex	/^  def now(:secs), do: to_secs(now())$/;"	f
now	deps/timex/lib/date/date.ex	/^  def now(tz) when is_binary(tz) do$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(:msecs),     do: :erlang.system_time(:milli_seconds)$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(:secs),      do: :erlang.system_time(:seconds)$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(:timestamp), do: :erlang.system_time(:micro_seconds) |> from(:usecs)$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(:timestamp), do: :os.timestamp$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(:usecs),     do: :erlang.system_time(:micro_seconds)$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(type),       do: :os.timestamp |> convert(type)$/;"	f
now	deps/timex/lib/time/time.ex	/^      def now(type),       do: now(:timestamp) |> convert(type)$/;"	f
now	deps/timex/lib/time/time.ex	/^  def now(type \\\\ :timestamp)$/;"	f
now_ms	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp now_ms, do: :os.timestamp() |> time_to_ms()$/;"	f
now_ms	deps/phoenix/lib/phoenix/utils.ex	/^  def now_ms, do: :os.timestamp() |> time_to_ms()$/;"	f
ntp_to_unix_timestamp	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp ntp_to_unix_timestamp(ntp_timestamp) do$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(_), do: []$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(false), do: "NOT NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(true), do: "NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(_), do: []$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(false), do: "NOT NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(true), do: "NULL"$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, false) do$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, true) do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(<<char>> <> rest = string) when char in '0123456789' do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(other), do: syntax_error(other)$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(<<char>> <> rest, acc) when char in '0123456789' do$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(_, acc), do: acc$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(<<e>> <> rest, frac, acc) when e in 'eE' do$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(string, frac, acc) do$/;"	f
number_exp_continue	deps/poison/lib/poison/parser.ex	/^  defp number_exp_continue(rest, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac("." <> rest, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac(string, acc) do$/;"	f
number_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def number_input(form, field, opts \\\\ []) do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(<<char, _ :: binary>> = string, acc) when char in '123456789' do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(other, _), do: syntax_error(other)$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("-" <> rest) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("0" <> rest) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start(string) do$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms!), do: String.to_existing_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms),  do: String.to_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, _keys),   do: name$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("\\"" <> rest, keys, acc) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("}" <> rest, _, []) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs(other, _, _), do: syntax_error(other)$/;"	f
octal_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp octal_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
octal_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp octal_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:any, _),        do: true$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:binary, term), do: is_binary(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:binary_id, value) do$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:boolean, term), do: is_boolean(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:decimal, %Decimal{}), do: true$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:float, term),   do: is_float(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:id, term),      do: is_integer(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:integer, term), do: is_integer(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:map, term),    do: is_map(term) and not Map.has_key?(term, :__struct__)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:string, term), do: is_binary(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(struct, _) when struct in ~w(decimal date time datetime)a, do: false$/;"	f
offset	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp offset(%Query{offset: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
offset	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp offset(%Query{offset: nil}, _sources), do: []$/;"	f
offset	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp offset(%Query{offset: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
offset	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp offset(%Query{offset: nil}, _sources), do: []$/;"	f
offset	deps/ecto/lib/ecto/query.ex	/^  defmacro offset(query, binding, expr) do$/;"	a
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options) do$/;"	f
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options, value) do$/;"	f
ok_error	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_error({:error, _}), do: "ERROR"$/;"	f
ok_error	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_error({:ok, _}),    do: "OK"$/;"	f
olson_to_win	deps/timex/lib/timezone/database.ex	/^      def olson_to_win(unquote(key)), do: unquote(value)$/;"	f
olson_to_win	deps/timex/lib/timezone/database.ex	/^  def olson_to_win(_tz), do: nil$/;"	f
on_exit_message	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def on_exit_message(topic, reason) do$/;"	f
on_replace	deps/ecto/lib/ecto/association.ex	/^  def on_replace(%{on_replace: :delete}, changeset) do$/;"	f
on_replace	deps/ecto/lib/ecto/association.ex	/^  def on_replace(%{on_replace: :nilify, related_key: related_key}, changeset) do$/;"	f
on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_replace(%{__struct__: module} = relation, changeset_or_model) do$/;"	f
on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  defcallback on_replace(t, Changeset.t) :: {:update | :delete, Changeset.t}$/;"	c
on_replace	deps/ecto/lib/ecto/embedded.ex	/^  def on_replace(%Embedded{on_replace: :delete}, changeset) do$/;"	f
on_repo_action	deps/ecto/lib/ecto/association.ex	/^  def on_repo_action(assoc, changeset, parent, _adapter, repo, repo_action, opts) do$/;"	f
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_repo_action(changeset, related, _adapter, _repo, _opts) when related == %{} do$/;"	f
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_repo_action(changeset, related, adapter, repo, opts) do$/;"	f
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defcallback on_repo_action(t, Changeset.t, Ecto.Model.t, Ecto.Adapter.t, Ecto.Repo.t,$/;"	c
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp on_repo_action(%{cardinality: :many} = meta, field, changesets,$/;"	f
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp on_repo_action(%{cardinality: :one} = meta, field, changeset,$/;"	f
on_repo_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp on_repo_action(%{cardinality: :one}, field, nil,$/;"	f
on_repo_action	deps/ecto/lib/ecto/embedded.ex	/^  def on_repo_action(%{field: field, related: model} = embed,$/;"	f
on_repo_action	deps/ecto/lib/ecto/embedded.ex	/^  defp on_repo_action(%Changeset{action: :update, changes: changes} = changeset,$/;"	f
on_repo_action	deps/ecto/lib/ecto/embedded.ex	/^  defp on_repo_action(%Changeset{action: action, changes: changes} = changeset,$/;"	f
one	deps/ecto/lib/ecto/repo.ex	/^      def one(queryable, opts \\\\ []) do$/;"	f
one	deps/ecto/lib/ecto/repo.ex	/^  defcallback one(Ecto.Queryable.t, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
one	deps/ecto/lib/ecto/repo/queryable.ex	/^  def one(repo, adapter, queryable, opts) do$/;"	f
one!	deps/ecto/lib/ecto/repo.ex	/^      def one!(queryable, opts \\\\ []) do$/;"	f
one!	deps/ecto/lib/ecto/repo.ex	/^  defcallback one!(Ecto.Queryable.t, Keyword.t) :: Ecto.Model.t | nil | no_return$/;"	c
one!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def one!(repo, adapter, queryable, opts) do$/;"	f
one_of	deps/combine/lib/combine/parsers/base.ex	/^  def one_of(parser, %Range{} = items), do: one_of(parser, items)$/;"	f
one_of	deps/combine/lib/combine/parsers/base.ex	/^  def one_of(parser1, parser2, %Range{} = items), do: one_of(parser1, parser2, items)$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp op_to_binary(expr, sources, query) do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp op_to_binary({op, _, [_, _]} = expr, sources, query) when op in @binary_ops do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp op_to_binary(expr, sources, query) do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp op_to_binary({op, _, [_, _]} = expr, sources, query) when op in @binary_ops do$/;"	f
open?	deps/ecto/lib/mix/ecto.ex	/^  def open?(file) do$/;"	f
open_random_file	deps/plug/lib/plug/upload.ex	/^  defp open_random_file(_prefix, tmp, attempts, _pid, _ets, _paths) do$/;"	f
open_random_file	deps/plug/lib/plug/upload.ex	/^  defp open_random_file(prefix, tmp, attempts, pid, ets, paths) when attempts < @max_attempts do$/;"	f
open_transaction	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def open_transaction(pool, timeout) do$/;"	f
open_transaction	deps/ecto/lib/ecto/pool.ex	/^  defcallback open_transaction(t, timeout) ::$/;"	c
open_transaction	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def open_transaction(pool, timeout) do$/;"	f
open_transaction	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def open_transaction(pool, timeout) do$/;"	f
optimistic_lock	deps/ecto/lib/ecto/model/optimistic_lock.ex	/^  defmacro optimistic_lock(field) do$/;"	a
option	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp option(option_key, option_value, value, acc) do$/;"	f
option	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp option(option_key, option_value, value_list, acc) when is_list(value_list) do$/;"	f
options	deps/plug/lib/plug/router.ex	/^  defmacro options(path, options, contents \\\\ []) do$/;"	a
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(keyword) when is_list(keyword),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(nil),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(options),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(keyword) when is_list(keyword),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(nil),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(options),$/;"	f
options_for_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp options_for_select(values, options, value) do$/;"	f
order_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp order_by(%Query{order_bys: order_bys} = query, sources) do$/;"	f
order_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp order_by(%Query{order_bys: order_bys} = query, distinct_exprs, sources) do$/;"	f
order_by	deps/ecto/lib/ecto/query.ex	/^  defmacro order_by(query, binding, expr)  do$/;"	a
order_by!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def order_by!(order_by) do$/;"	f
order_by_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp order_by_expr({dir, expr}, sources, query) do$/;"	f
order_by_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp order_by_expr({dir, expr}, sources, query) do$/;"	f
organize_into_map	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp organize_into_map([expiry_element = %{expires_at: _} | tail]) do$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(check_origin, origin, _endpoint) when is_list(check_origin),$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(false, _, _),$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(origin, allowed_origins) do$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(true, origin, endpoint),$/;"	f
otp_app	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp otp_app(cowboy_options) do$/;"	f
outer_transaction	deps/ecto/lib/ecto/pool.ex	/^  defp outer_transaction(ref, worker, conn, time, timeout, fun) do$/;"	f
override_method	deps/plug/lib/plug/method_override.ex	/^  defp override_method(conn, %Plug.Conn.Unfetched{}) do$/;"	f
override_method	deps/plug/lib/plug/method_override.ex	/^  defp override_method(conn, body_params) do$/;"	f
package	deps/combine/mix.exs	/^  defp package do$/;"	f
package	deps/decimal/mix.exs	/^  defp package do$/;"	f
package	deps/ecto/mix.exs	/^  defp package do$/;"	f
package	deps/fs/package.exs	/^  defp package do$/;"	f
package	deps/phoenix/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_ecto/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_html/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_live_reload/mix.exs	/^  defp package do$/;"	f
package	deps/plug/mix.exs	/^  defp package do$/;"	f
package	deps/poison/mix.exs	/^  defp package do$/;"	f
package	deps/postgrex/mix.exs	/^  defp package do$/;"	f
package	deps/timex/mix.exs	/^  defp package do$/;"	f
package	deps/tzdata/mix.exs	/^  defp package do$/;"	f
package	deps/uuid/mix.exs	/^  defp package do$/;"	f
pad	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/plug/lib/plug/conn/cookies.ex	/^  defp pad(number) when number in 0..9, do: <<?0, ?0 + number>>$/;"	f
pad	deps/plug/lib/plug/conn/cookies.ex	/^  defp pad(number), do: Integer.to_string(number)$/;"	f
pad_char	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_char(:spaces), do: <<32>>$/;"	f
pad_char	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_char(:zeroes), do: <<?0>>$/;"	f
pad_float	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp pad_float(0) do$/;"	f
pad_float	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp pad_float(num) do$/;"	f
pad_message	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp pad_message(msg) do$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(<<?-, number_str::binary>>, flags, width) do$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number, flags, width) when is_integer(number), do: pad_numeric("#{number}", flags, width)$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number_str, [], _width), do: number_str$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number_str, flags, [min: min_width, max: max_width]) do$/;"	f
pad_to_numeric_base	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp pad_to_numeric_base(float, scale) do$/;"	f
paginate	deps/ecto/lib/ecto/query.ex	/^      def paginate(query, page, size) do$/;"	f
param_struct	deps/ecto/lib/ecto/query/planner.ex	/^  defp param_struct(%{__struct__: struct}) when not struct in [Decimal] do$/;"	f
param_struct	deps/ecto/lib/ecto/query/planner.ex	/^  defp param_struct(_), do: nil$/;"	f
parameters	deps/postgrex/lib/postgrex/connection.ex	/^  def parameters(pid, opts \\\\ []) do$/;"	f
params	deps/phoenix/lib/mix/phoenix.ex	/^  def params(attrs) do$/;"	f
params	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp params(%Plug.Conn.Unfetched{}), do: "[UNFETCHED]"$/;"	f
params	deps/phoenix/lib/phoenix/controller/logger.ex	/^  defp params(params) do$/;"	f
params	deps/plug/lib/plug/conn/utils.ex	/^  def params(t) do$/;"	f
params	deps/plug/lib/plug/conn/utils.ex	/^  defp params(param, acc) do$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<>>, _acc),$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<?=, t :: binary>>, acc) when acc != "",$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<h, _ :: binary>>, _acc) when h in @specials or h in @space or h < 32 or h === 127,$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<h, t :: binary>>, acc),$/;"	f
params_value	deps/plug/lib/plug/conn/utils.ex	/^  defp params_value(token, key) do$/;"	f
parent_key	deps/ecto/lib/ecto/association.ex	/^  defp parent_key(%{owner_key: owner_key, related_key: related_key}, owner) do$/;"	f
parse	deps/combine/lib/combine.ex	/^  def parse(input, parser) do$/;"	f
parse	deps/decimal/lib/decimal.ex	/^  defp parse("+" <> bin) do$/;"	f
parse	deps/decimal/lib/decimal.ex	/^  defp parse("-" <> bin) do$/;"	f
parse	deps/decimal/lib/decimal.ex	/^  defp parse(bin) do$/;"	f
parse	deps/ecto/lib/ecto/datetime.ex	/^  defp parse(<<h, t::binary>>, acc) when h in ?0..?9, do: parse(t, <<acc::binary, h>>)$/;"	f
parse	deps/ecto/lib/ecto/datetime.ex	/^  defp parse(rest, acc), do: {acc, rest}$/;"	f
parse	deps/plug/lib/plug/parsers.ex	/^  defcallback parse(Conn.t, type :: binary, subtype :: binary,$/;"	c
parse	deps/plug/lib/plug/parsers/json.ex	/^  def parse(conn, "application", subtype, _headers, opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/json.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/multipart.ex	/^  def parse(conn, "multipart", subtype, _headers, opts) when subtype in ["form-data", "mixed"] do$/;"	f
parse	deps/plug/lib/plug/parsers/multipart.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/urlencoded.ex	/^  def parse(conn, "application", "x-www-form-urlencoded", _headers, opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/urlencoded.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/poison/lib/poison/parser.ex	/^  def parse(iodata, options \\\\ []) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<count :: int16, rest :: binary>>, ?D, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<len :: int16, rest :: binary(len, 32)>>, ?t, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<len :: int16, rest :: binary>>, ?T, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<pg_pid :: int32, rest :: binary>>, ?A, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<pid :: int32, key :: int32>>, ?K, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<status :: int8>>, ?Z, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<type :: int32, rest :: binary>>, ?R, size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?1, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?2, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?I, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?n, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?s, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?C, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?E, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?N, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?S, _size) do$/;"	f
parse	deps/timex/lib/date/date_format.ex	/^  def parse(date_string, format_string, :default),  do: Parser.parse(date_string, format_string)$/;"	f
parse	deps/timex/lib/date/date_format.ex	/^  def parse(date_string, format_string, :strftime), do: Parser.parse(date_string, format_string, StrftimeTokenizer)$/;"	f
parse	deps/timex/lib/date/date_format.ex	/^  defdelegate parse(date_string, format_string), to: Parser$/;"	d
parse	deps/timex/lib/date/date_format.ex	/^  defdelegate parse(date_string, format_string, parser), to: Parser$/;"	d
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(date_string, format_string)$/;"	f
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(date_string, format_string, tokenizer)$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(<<?T, ?Z, ?i, ?f, _reserved :: bytes(16), rest :: binary>>) do$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(_) do$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(path) when is_binary(path) do$/;"	f
parse!	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  defp parse!(int) do$/;"	f
parse!	deps/poison/lib/poison/parser.ex	/^  def parse!(iodata, options \\\\ []) do$/;"	f
parse!	deps/timex/lib/date/date_format.ex	/^  def parse!(date_string, format_string, :default),  do: Parser.parse!(date_string, format_string)$/;"	f
parse!	deps/timex/lib/date/date_format.ex	/^  def parse!(date_string, format_string, :strftime), do: Parser.parse!(date_string, format_string, StrftimeTokenizer)$/;"	f
parse!	deps/timex/lib/date/date_format.ex	/^  defdelegate parse!(date_string, format_string), to: Parser$/;"	d
parse!	deps/timex/lib/date/date_format.ex	/^  defdelegate parse!(date_string, format_string, parser), to: Parser$/;"	d
parse!	deps/timex/lib/parse/datetime/parser.ex	/^  def parse!(date_string, format_string, tokenizer \\\\ DefaultTokenizer)$/;"	f
parse_app	deps/exq/lib/mix/tasks/exq.run.ex	/^  def parse_app([h|t]) when is_atom(h) and h != :"" do$/;"	f
parse_app	deps/exq/lib/mix/tasks/exq.run.ex	/^  def parse_app([h|t]) when is_binary(h) and h != "" do$/;"	f
parse_app	deps/exq/lib/mix/tasks/exq.run.ex	/^  def parse_app(_) do$/;"	f
parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_array(data, 0, _parser), do: {[], data}$/;"	f
parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_array(data, count, parser) when is_binary(data) and is_function(parser) do$/;"	f
parse_char	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_char(<<val :: signed_char_be, rest :: binary>>),    do: {val, rest}$/;"	f
parse_config	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_config(repo, opts) do$/;"	f
parse_content_type	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp parse_content_type(header) do$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(<< digit, rest :: binary >>, acc) when digit in ?0..?9 do$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(bin), do: parse_digits(bin, [])$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(rest, acc) do$/;"	f
parse_exp	deps/decimal/lib/decimal.ex	/^  defp parse_exp(<< ?e, rest :: binary >>) do$/;"	f
parse_exp	deps/decimal/lib/decimal.ex	/^  defp parse_exp(bin) do$/;"	f
parse_exts	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_exts("*\/*" = type), do: type$/;"	f
parse_exts	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_exts(type),         do: Plug.MIME.extensions(type)$/;"	f
parse_file	deps/combine/lib/combine.ex	/^  def parse_file(path, parser) do$/;"	f
parse_float	deps/decimal/lib/decimal.ex	/^  defp parse_float("." <> rest), do: parse_digits(rest)$/;"	f
parse_float	deps/decimal/lib/decimal.ex	/^  defp parse_float(bin), do: {[], bin}$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, [], acc, accepted) do$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, [h|t], acc, accepted) do$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, {_, exts}, accepted) do$/;"	f
parse_int	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_int(<<val :: integer_32bit_be, rest :: binary>>),   do: {val, rest}$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:done, req}, limit, _opts, acc, _callback) do$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:ok, _headers, req}, limit, _opts, acc, _callback) do$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:ok, headers, req}, limit, opts, acc, callback) when limit >= 0 do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:more, _tail, req}, limit, _opts, body) do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:more, tail, req}, limit, opts, body) when limit >= 0 do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:ok, _tail, req}, limit, _opts, body) do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:ok, tail, req}, limit, _opts, body) when limit >= byte_size(tail) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:more, _tail, req}, limit, _opts, _file) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:more, tail, req}, limit, opts, file) when limit >= 0 do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:ok, _tail, req}, limit, _opts, _file) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:ok, tail, req}, limit, _opts, file) when limit >= byte_size(tail) do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids("{" <> rest) do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids("{}") do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids(bin, acc) do$/;"	f
parse_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp parse_origin(origin) do$/;"	f
parse_q	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_q(args) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  def parse_repo([]) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  def parse_repo([_|t]) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  def parse_repo([key, value|_]) when key in ~w(--repo -r) do$/;"	f
parse_req_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def parse_req_multipart(req, opts, callback) do$/;"	f
parse_req_multipart	deps/plug/lib/plug/adapters/test/conn.ex	/^  def parse_req_multipart(%{params: multipart} = state, _limit, _callback) do$/;"	f
parse_req_multipart	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback parse_req_multipart(payload, options :: Keyword.t, fun) ::$/;"	c
parse_tzfile	deps/timex/lib/timezone/timezone_local.ex	/^  def parse_tzfile(tzdata), do: parse_tzfile(tzdata, Date.now)$/;"	f
parse_tzfile	deps/timex/lib/timezone/timezone_local.ex	/^  def parse_tzfile(tzdata, %DateTime{} = reference_date) when tzdata != nil do$/;"	f
parse_uchar	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_uchar(<<val :: unsigned_char_be, rest :: binary>>), do: {val, rest}$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("inf") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("infinity") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("nan") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("snan") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign(bin) do$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url(""), do: []$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url(url) when is_binary(url) do$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url({:system, env}) when is_binary(env) do$/;"	f
parse_version	deps/postgrex/lib/postgrex/utils.ex	/^  def parse_version(version) do$/;"	f
partition_attrs_and_assocs	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp partition_attrs_and_assocs(attrs) do$/;"	f
password_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def password_input(form, field, opts \\\\ []) do$/;"	f
patch	deps/plug/lib/plug/router.ex	/^  defmacro patch(path, options, contents \\\\ []) do$/;"	a
path	deps/phoenix/lib/phoenix/endpoint.ex	/^        def path(path), do: path$/;"	f
path	deps/phoenix/lib/phoenix/endpoint.ex	/^        def path(path), do: unquote(script_name) <> path$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def path(data, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, %Socket{endpoint: endpoint}, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, %URI{} = uri, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, endpoint, path) when is_atom(endpoint) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(router, %Conn{} = conn, path) do$/;"	f
path	deps/plug/lib/plug/mime.ex	/^  def path(path) do$/;"	f
path	deps/plug/lib/plug/static.ex	/^  defp path(from, segments),$/;"	f
path	deps/plug/lib/plug/static.ex	/^  defp path({app, from}, segments) when is_atom(app) and is_binary(from),$/;"	f
path	deps/plug/lib/plug/upload.ex	/^  defp path(prefix, tmp) do$/;"	f
path_to_iodata	deps/plug/lib/plug/adapters/translator.ex	/^  defp path_to_iodata(path, ""), do: path$/;"	f
path_to_iodata	deps/plug/lib/plug/adapters/translator.ex	/^  defp path_to_iodata(path, qs), do: [path, ??, qs]$/;"	f
path_with_script	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp path_with_script(path, []) do$/;"	f
path_with_script	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp path_with_script(path, script) do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp paths do$/;"	f
pdict_store	deps/ecto/integration_test/support/models.exs	/^  def pdict_store(changeset, key, val) do$/;"	f
peer	deps/plug/lib/plug/debugger.ex	/^  defp peer(%Plug.Conn{peer: {host, port}}), do:$/;"	f
pending_in_direction	deps/ecto/lib/ecto/migrator.ex	/^  defp pending_in_direction(versions, directory, :down) do$/;"	f
pending_in_direction	deps/ecto/lib/ecto/migrator.ex	/^  defp pending_in_direction(versions, directory, :up) do$/;"	f
perform	deps/exq/test/exq_test.exs	/^    def perform do$/;"	f
perform	deps/exq/test/exq_test.exs	/^    def perform(arg) do$/;"	f
perform	deps/exq/test/exq_test.exs	/^    def perform(time, message) do$/;"	f
perform	deps/exq/test/performance_test.exs	/^    def perform(arg) do$/;"	f
perform	deps/exq/test/test_helper.exs	/^    def perform(pid) do$/;"	f
perform	deps/exq/test/worker_test.exs	/^    def perform do$/;"	f
perform	deps/exq/test/worker_test.exs	/^    def perform(_, _, _) do$/;"	f
perform	deps/exq/web/workers/longworker.ex	/^  def perform do$/;"	f
perform	web/jobs/echo_job.ex	/^  def perform(msg \\\\ "no args") do$/;"	f
period_abbrevation	deps/tzdata/lib/tzdata/util.ex	/^  def period_abbrevation(zone_abbr, std_off, letter) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:no_slash, zone_abbr, _, "-") do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:no_slash, zone_abbr, _, letter) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:slash, zone_abbr, 0, _) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:slash, zone_abbr, _, _) do$/;"	f
period_to_tuple	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp period_to_tuple(key, period) do$/;"	f
periods	deps/tzdata/lib/tzdata.ex	/^  def periods(zone_name) do$/;"	f
periods_for_point_in_time	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def periods_for_point_in_time(gregorian_seconds, zone_name) do$/;"	f
periods_for_point_in_time	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def periods_for_point_in_time({{year, _month, _day}, _}, zone_name) do$/;"	f
periods_for_time	deps/tzdata/lib/tzdata.ex	/^  def periods_for_time(zone_name, time_point, time_type) do$/;"	f
periods_for_zone_or_link	deps/tzdata/lib/tzdata/release_reader.ex	/^  def periods_for_zone_or_link(zone) do$/;"	f
periods_until_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp periods_until_year(prev_periods, from, utc_off, zone_line, rules, year, rules_per_year) do$/;"	f
persist_flash	deps/phoenix/lib/phoenix/controller.ex	/^  defp persist_flash(conn, value) do$/;"	f
pg2_namespace	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^  defp pg2_namespace(server_name), do: {:phx, server_name}$/;"	f
phoenix_controller_pipeline	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      defp phoenix_controller_pipeline(unquote(conn), var!(action)) do$/;"	f
phoenix_pipeline	deps/phoenix/lib/phoenix/endpoint.ex	/^      defp phoenix_pipeline(unquote(conn)), do: unquote(body)$/;"	f
pipe_through	deps/phoenix/lib/phoenix/router.ex	/^  defmacro pipe_through(pipes) do$/;"	a
pipe_through	deps/phoenix/lib/phoenix/router/route.ex	/^  defp pipe_through(initial, route) do$/;"	f
pipe_through	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pipe_through(module, pipes) do$/;"	f
pipeline	deps/phoenix/lib/phoenix/router.ex	/^  defmacro pipeline(plug, do: block) do$/;"	a
pipeline	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pipeline(module, pipe) when is_atom(pipe) do$/;"	f
pk_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp pk_expr(_, _), do: []$/;"	f
pk_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp pk_expr(true, name), do: ", PRIMARY KEY(#{quote_name(name)})"$/;"	f
pk_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp pk_expr(_), do: []$/;"	f
pk_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp pk_expr(true), do: "PRIMARY KEY"$/;"	f
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug)$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, opts)$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, opts), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, {:when, _, [opts, guards]}), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug({:when, _, [plug, guards]}), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defp plug(plug, opts, guards) do$/;"	f
plug	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro plug(plug, opts \\\\ []) do$/;"	a
plug	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp plug() do$/;"	f
plug	deps/phoenix/lib/phoenix/router.ex	/^  defmacro plug(plug, opts \\\\ []) do$/;"	a
plug	deps/plug/lib/plug/builder.ex	/^  defmacro plug(plug, opts \\\\ []) do$/;"	a
plug_builder_call	deps/plug/lib/plug/builder.ex	/^      defp plug_builder_call(unquote(conn), _), do: unquote(body)$/;"	f
plug_server	deps/plug/lib/plug/upload.ex	/^  defp plug_server do$/;"	f
plus	deps/decimal/lib/decimal.ex	/^  def plus(%Decimal{coef: :sNaN} = num) do$/;"	f
plus	deps/decimal/lib/decimal.ex	/^  def plus(%Decimal{} = num) do$/;"	f
poll_for_update	deps/tzdata/lib/tzdata/release_updater.ex	/^  def poll_for_update do$/;"	f
pool	deps/ecto/lib/ecto/repo/supervisor.ex	/^  defp pool(repo, config) do$/;"	f
pool	deps/ecto/mix.exs	/^  defp pool(:poolboy),         do: "poolboy"$/;"	f
pool	deps/ecto/mix.exs	/^  defp pool(:sojourn_codel),   do: "sojourn_broker"$/;"	f
pool	deps/ecto/mix.exs	/^  defp pool(:sojourn_timeout), do: "sojourn_broker"$/;"	f
pop	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pop(module) do$/;"	f
pop_autogenerate_id	deps/ecto/lib/ecto/repo/model.ex	/^  defp pop_autogenerate_id(changes, model) do$/;"	f
pop_from_changes	deps/ecto/lib/ecto/repo/model.ex	/^  defp pop_from_changes(changeset, fields) do$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp port_to_integer(port) when is_binary(port), do: String.to_integer(port)$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp port_to_integer(port) when is_integer(port), do: port$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp port_to_integer({:system, env_var}), do: port_to_integer(System.get_env(env_var))$/;"	f
possible_periods_for_zone_and_time	deps/tzdata/lib/tzdata.ex	/^  defp possible_periods_for_zone_and_time(zone_name, _time_point) do$/;"	f
possible_periods_for_zone_and_time	deps/tzdata/lib/tzdata.ex	/^  defp possible_periods_for_zone_and_time(zone_name, time_point) when time_point >= @point_from_which_to_use_dynamic_periods do$/;"	f
post	deps/plug/lib/plug/router.ex	/^  defmacro post(path, options, contents \\\\ []) do$/;"	a
postprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocess(%{expr: expr, fields: fields}) do$/;"	f
postprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocess(row, expr, false),$/;"	f
postprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocess(row, expr, true),$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :inf} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :qNaN} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :sNaN} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{sign: sign, coef: coef, exp: exp}, precision, rounding) do$/;"	f
preload	deps/ecto/lib/ecto/query.ex	/^  defmacro preload(query, bindings \\\\ [], expr) do$/;"	a
preload	deps/ecto/lib/ecto/repo.ex	/^      def preload(model_or_models, preloads) do$/;"	f
preload	deps/ecto/lib/ecto/repo.ex	/^  defcallback preload([Ecto.Model.t] | Ecto.Model.t, preloads :: term) ::$/;"	c
preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  def preload(struct, repo, preloads) when is_map(struct) do$/;"	f
preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  def preload(structs, repo, preloads) when is_list(structs) do$/;"	f
preload_assoc	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_assoc(repo, query, prefix, %{cardinality: card} = assoc, related_key, preloads) do$/;"	f
preload_assoc	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_assoc(structs, module, repo, prefix, assoc, related_key, preloads_or_query) do$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each([], _repo, _preloads), do: []$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each([sample|_] = structs, repo, preloads) do$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each(structs, _repo, []),   do: structs$/;"	f
preload_info	deps/ecto/lib/ecto/association.ex	/^  def preload_info(refl) do$/;"	f
preload_info	deps/ecto/lib/ecto/association.ex	/^  defcallback preload_info(t) ::$/;"	c
preloads	deps/ecto/lib/ecto/query/inspect.ex	/^  defp preloads([]),       do: []$/;"	f
preloads	deps/ecto/lib/ecto/query/inspect.ex	/^  defp preloads(preloads), do: [preload: inspect(preloads)]$/;"	f
prelude	deps/phoenix/lib/phoenix/router.ex	/^  defp prelude() do$/;"	f
prepare	deps/ecto/lib/ecto/adapter.ex	/^  defcallback prepare(:all | :update_all | :delete_all, query :: Ecto.Query.t) ::$/;"	c
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:all, query),        do: {:cache, @conn.all(query)}$/;"	f
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:delete_all, query), do: {:cache, @conn.delete_all(query)}$/;"	f
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:update_all, query), do: {:cache, @conn.update_all(query)}$/;"	f
prepare	deps/ecto/lib/ecto/embedded.ex	/^  def prepare(changeset, [], _adapter, _repo_action), do: changeset$/;"	f
prepare	deps/ecto/lib/ecto/embedded.ex	/^  def prepare(changeset, embeds, adapter, repo_action) do$/;"	f
prepare	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare(query, operation, adapter) do$/;"	f
prepare_assigns	deps/phoenix/lib/phoenix/controller.ex	/^  defp prepare_assigns(conn, assigns, format) do$/;"	f
prepare_cache	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare_cache(query, operation, adapter) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%Changeset{action: :update, changes: changes} = changeset,$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%Changeset{model: %{__struct__: model}, action: action} = changeset,$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%Changeset{model: model}, %{related: expected}, _adapter) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%Changeset{valid?: false}, %{related: model}, _adapter) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :many} = embed, changesets, adapter, action) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :one} = embed, changeset, adapter, action) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :one}, nil, _adapter, _action) do$/;"	f
prepare_extensions	deps/postgrex/lib/postgrex/types.ex	/^  def prepare_extensions(extensions, parameters) do$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{assoc: {ix, assoc}, qual: qual} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{source: source} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{source: {source, model}} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([], _query, joins, sources, tail_sources, _counter, _offset) do$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins(query, sources, offset) do$/;"	f
prepare_sources	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare_sources(query) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(%Ecto.Query.Tagged{tag: tag}, value, _prefix, _context, _sources, adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(_key, value, _prefix, _context, _sources, _adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(prefix, sources, adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess({:&, _, [ix]}, value, prefix, context, sources, adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess({{:., _, [{:&, _, [_]}, _]}, meta, []}, value, _prefix, _context, _sources, adapter) do$/;"	f
pretty	deps/poison/lib/poison/encoder.ex	/^      defp pretty(options) do$/;"	f
primary_key	deps/ecto/lib/ecto/model.ex	/^  def primary_key(%{__struct__: model} = struct) do$/;"	f
primary_key!	deps/ecto/lib/ecto/model.ex	/^  def primary_key!(struct) do$/;"	f
primary_key_field!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp primary_key_field!(model) when is_atom(model) do$/;"	f
primary_keys!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp primary_keys!(module) do$/;"	f
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?(_), do: false$/;"	f
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?(base) when base in @base, do: true$/;"	f
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?({composite, _}) when composite in @composite, do: true$/;"	f
process_assocs	deps/ecto/lib/ecto/repo/model.ex	/^  defp process_assocs(changeset, assocs, adapter, repo, opts) do$/;"	f
process_current	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp process_current(current, pks) do$/;"	f
process_current	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp process_current(nil, _pks),$/;"	f
process_embeds	deps/ecto/lib/ecto/repo/model.ex	/^  defp process_embeds(changeset, embeds, adapter, repo, opts) do$/;"	f
process_empty_fields	deps/ecto/lib/ecto/changeset.ex	/^  defp process_empty_fields(key, _types) when is_atom(key) do$/;"	f
process_empty_fields	deps/ecto/lib/ecto/changeset.ex	/^  defp process_empty_fields(key, _types) when is_binary(key) do$/;"	f
process_empty_fields	deps/ecto/lib/ecto/changeset.ex	/^  defp process_empty_fields({key, fun}, types) when is_atom(key) do$/;"	f
process_file	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp process_file(file_stream) do$/;"	f
process_file	deps/tzdata/lib/tzdata/parser.ex	/^  def process_file(file_stream) do$/;"	f
process_file	deps/tzdata/lib/tzdata/table_parser.ex	/^  def process_file(file_stream) do$/;"	f
process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp process_line(line) do$/;"	f
process_line	deps/tzdata/lib/tzdata/table_parser.ex	/^  defp process_line(line) do$/;"	f
process_link	deps/tzdata/lib/tzdata/parser.ex	/^  def process_link(line) do$/;"	f
process_param	deps/ecto/lib/ecto/changeset.ex	/^  defp process_param(key, kind, params, types, model, acc) do$/;"	f
process_param	deps/ecto/lib/ecto/changeset.ex	/^  defp process_param({key, fun}, kind, params, types, model, acc) do$/;"	f
process_row	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp process_row(row, preprocess, fields) do$/;"	f
process_rule	deps/tzdata/lib/tzdata/parser.ex	/^  def process_rule(line) do$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to("max"), do: :max$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to("only"), do: :only$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to(val), do: val |> to_int$/;"	f
process_tz_list	deps/tzdata/lib/tzdata/parser.ex	/^  def process_tz_list([ head | tail ]) do$/;"	f
process_tz_list	deps/tzdata/lib/tzdata/parser.ex	/^  def process_tz_list([]), do: []$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_no_until, captured, zone_name, zone_lines, []) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_no_until, captured, zone_name, zone_lines, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_with_until, captured, zone_name, zone_lines, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_no_until, captured, []) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_no_until, captured, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_with_until, captured, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone([head|tail]) do$/;"	f
processed_count	deps/exq/test/test_helper.exs	/^  def processed_count(redis, namespace) do$/;"	f
processes	deps/exq/lib/exq/api.ex	/^  def processes(pid) do$/;"	f
processes	deps/exq/lib/exq/enqueuer.ex	/^  def processes(pid) do$/;"	f
processes	deps/exq/lib/exq/stats/server.ex	/^  def processes(redis, namespace) do$/;"	f
project	deps/combine/mix.exs	/^  def project do$/;"	f
project	deps/decimal/mix.exs	/^  def project do$/;"	f
project	deps/ecto/mix.exs	/^  def project do$/;"	f
project	deps/exq/mix.exs	/^  def project do$/;"	f
project	deps/fs/package.exs	/^  def project do$/;"	f
project	deps/phoenix/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_ecto/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_html/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_live_reload/mix.exs	/^  def project do$/;"	f
project	deps/plug/mix.exs	/^  def project do$/;"	f
project	deps/poison/mix.exs	/^  def project do$/;"	f
project	deps/postgrex/mix.exs	/^  def project do$/;"	f
project	deps/timex/mix.exs	/^  def project do$/;"	f
project	deps/tzdata/mix.exs	/^  def project do$/;"	f
project	deps/uuid/mix.exs	/^  def project do$/;"	f
project	mix.exs	/^  def project do$/;"	f
protect_from_forgery	deps/phoenix/lib/phoenix/controller.ex	/^  def protect_from_forgery(conn, opts \\\\ []) do$/;"	f
protocol_version	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def protocol_version, do: @protocol_version$/;"	f
proxy_io	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp proxy_io(fun) do$/;"	f
prune	deps/plug/lib/plug/conn/query.ex	/^  defp prune([?&|t]), do: t$/;"	f
prune	deps/plug/lib/plug/conn/query.ex	/^  defp prune([]), do: []$/;"	f
publish	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp publish(conn, server_ref, endpoint, opts) do$/;"	f
publish_reply	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp publish_reply(msg, state) do$/;"	f
published	deps/ecto/lib/ecto/query.ex	/^      def published(query) do$/;"	f
published_multi	deps/ecto/lib/ecto/query.ex	/^      def published_multi(query) do$/;"	f
pubsub	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp pubsub() do$/;"	f
pubsub_children	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp pubsub_children(mod, conf) do$/;"	f
purge	deps/ecto/integration_test/cases/migrator.exs	/^  defp purge(modules) do$/;"	f
push	deps/phoenix/lib/phoenix/channel.ex	/^  def push(socket, event, message) do$/;"	f
push	deps/phoenix/lib/phoenix/channel/server.ex	/^  def push(_, _, _, _), do: raise_invalid_message$/;"	f
push	deps/phoenix/lib/phoenix/channel/server.ex	/^  def push(pid, topic, event, payload, serializer)$/;"	f
push	deps/phoenix/lib/phoenix/router/scope.ex	/^  def push(module, opts) when is_list(opts) do$/;"	f
push	deps/phoenix/lib/phoenix/router/scope.ex	/^  def push(module, path) when is_binary(path) do$/;"	f
push	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def push(socket, event, payload \\\\ %{}) do$/;"	f
put	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp put(state, topic, channel_pid) do$/;"	f
put	deps/plug/lib/plug/router.ex	/^  defmacro put(path, options, contents \\\\ []) do$/;"	a
put	deps/plug/lib/plug/session/cookie.ex	/^  def put(conn, _sid, term, opts) do$/;"	f
put	deps/plug/lib/plug/session/ets.ex	/^  def put(_conn, nil, data, table) do$/;"	f
put	deps/plug/lib/plug/session/ets.ex	/^  def put(_conn, sid, data, table) do$/;"	f
put	deps/plug/lib/plug/session/store.ex	/^  defcallback put(Plug.Conn.t, sid, any, Plug.opts) :: cookie$/;"	c
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(%Conn{query_string: "vsn=" <> _} = conn, qs_cache, _et_cache, _file_info)$/;"	f
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(conn, _, _, _) do$/;"	f
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(conn, _qs_cache, et_cache, file_info) when is_binary(et_cache) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  def put_change(%Changeset{types: nil}, _key, _value) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  def put_change(%Changeset{types: types} = changeset, key, value) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  defp put_change(model, changes, errors, valid?, key, value, _type) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  defp put_change(model, changes, errors, valid?, key, value, {tag, relation})$/;"	f
put_chars	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  defp put_chars(from, reply, chars, output) do$/;"	f
put_cookie	deps/plug/lib/plug/session.ex	/^  defp put_cookie(value, conn, %{cookie_opts: cookie_opts, key: key}),$/;"	f
put_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def put_flash(conn, key, message) do$/;"	f
put_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate put_flash(conn, key, value), to: Phoenix.Controller$/;"	d
put_format	deps/phoenix/lib/phoenix/controller.ex	/^  def put_format(conn, format), do: put_private(conn, :phoenix_format, format)$/;"	f
put_hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp put_hsts_header(conn, _), do: conn$/;"	f
put_hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp put_hsts_header(conn, hsts_header) when is_binary(hsts_header) do$/;"	f
put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout(%Plug.Conn{state: state} = conn, layout) do$/;"	f
put_layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout_formats(%Plug.Conn{state: state} = conn, formats)$/;"	f
put_layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout_formats(_conn, _formats) do$/;"	f
put_meta	deps/ecto/lib/ecto/model.ex	/^  def put_meta(model, opts) do$/;"	f
put_new	deps/plug/lib/plug/session/ets.ex	/^  defp put_new(data, table, counter \\\\ 0)$/;"	f
put_new_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp put_new_action(%{action: action} = changeset, new_action) when is_nil(action),$/;"	f
put_new_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp put_new_action(changeset, _new_action),$/;"	f
put_new_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_layout(%Plug.Conn{state: state} = conn, layout)$/;"	f
put_new_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_view(%Plug.Conn{state: state} = conn, module)$/;"	f
put_new_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_view(_conn, _module) do$/;"	f
put_private	deps/plug/lib/plug/conn.ex	/^  def put_private(%Conn{private: private} = conn, key, value) when is_atom(key) do$/;"	f
put_req_cookie	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate put_req_cookie(conn, key, value), to: Plug.Test$/;"	d
put_req_cookie	deps/plug/lib/plug/test.ex	/^  def put_req_cookie(conn, key, value) when is_binary(key) and is_binary(value) do$/;"	f
put_req_header	deps/plug/lib/plug/conn.ex	/^  def put_req_header(%Conn{req_headers: headers} = conn, key, value) when$/;"	f
put_req_header	deps/plug/lib/plug/conn.ex	/^  def put_req_header(%Conn{state: :sent}, _key, _value) do$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, charset \\\\ "utf-8")$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, charset) when$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, nil) when is_binary(content_type) do$/;"	f
put_resp_cookie	deps/plug/lib/plug/conn.ex	/^  def put_resp_cookie(%Conn{resp_cookies: resp_cookies, scheme: scheme} = conn, key, value, opts \\\\ []) when$/;"	f
put_resp_header	deps/plug/lib/plug/conn.ex	/^  def put_resp_header(%Conn{resp_headers: headers} = conn, key, value) when$/;"	f
put_resp_header	deps/plug/lib/plug/conn.ex	/^  def put_resp_header(%Conn{state: :sent}, _key, _value) do$/;"	f
put_script_name	deps/phoenix/lib/phoenix/endpoint.ex	/^        defp put_script_name(conn) do$/;"	f
put_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^      def put_secret_key_base(conn, _) do$/;"	f
put_secure_browser_headers	deps/phoenix/lib/phoenix/controller.ex	/^  def put_secure_browser_headers(conn, _opts \\\\ []) do$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  def put_session(%Conn{state: state}, _key, _value) when not state in @unsent,$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  def put_session(conn, key, value) do$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  defp put_session(conn, fun) do$/;"	f
put_session	deps/plug/lib/plug/session.ex	/^  defp put_session(sid, conn, %{store: store, store_config: store_config}),$/;"	f
put_source	deps/ecto/lib/ecto/model.ex	/^  def put_source(model, new_source, new_prefix \\\\ nil) do$/;"	f
put_ssl_file	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp put_ssl_file(cowboy_options, key, value) do$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{state: :sent}, _status),$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{} = conn, nil),$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{} = conn, status),$/;"	f
put_struct_field	deps/ecto/lib/ecto/schema.ex	/^  defp put_struct_field(mod, name, assoc) do$/;"	f
put_subscription	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  defp put_subscription(state, pid, topic, fastlane) do$/;"	f
put_timestamp	deps/ecto/lib/ecto/model/timestamps.ex	/^  def put_timestamp(changeset, field, type, use_usec) do$/;"	f
put_uniq	deps/decimal/lib/decimal.ex	/^  defp put_uniq(list, elem) do$/;"	f
put_uniq	deps/decimal/lib/decimal.ex	/^  defp put_uniq(list, elems) when is_list(elems) do$/;"	f
put_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_view(%Plug.Conn{state: state} = conn, module) when state in @unsent do$/;"	f
put_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_view(_conn, _module), do: raise AlreadySentError$/;"	f
qs	deps/plug/lib/plug/ssl.ex	/^  defp qs(""), do: ""$/;"	f
qs	deps/plug/lib/plug/ssl.ex	/^  defp qs(qs), do: "?" <> qs$/;"	f
qual!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def qual!(qual) do$/;"	f
qual!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def qual!(qual) when qual in @qualifiers, do: qual$/;"	f
query	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def query(conn, sql, params, opts \\\\ []) do$/;"	f
query	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def query(conn, sql, params, opts) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  def query(repo, sql, params, opts \\\\ []) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query(mod, conn, _queue_time, sql, params, false, opts) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query(mod, conn, queue_time, sql, params, true, opts) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query(repo, sql, params, mapper, opts) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query(repo, sql, params, outer_queue_time, mapper, opts) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback query(pid, query :: binary, params :: list(), opts :: Keyword.t) :: result$/;"	c
query	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp query(pool, query, log, opts, timeout) do$/;"	f
query	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp query(source, model) do$/;"	f
query	deps/ecto/lib/ecto/query/planner.ex	/^  def query(query, operation, repo, adapter) do$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query([], _assocs, _sources), do: []$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, [], _sources), do: rows$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, assocs, sources) do$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, assocs, sources)$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query([], _repo, _preloads, _assocs, _fun), do: []$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query(rows, _repo, [], _assocs, fun), do: Enum.map(rows, fun)$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query(rows, repo, preloads, assocs, fun) do$/;"	f
query	deps/postgrex/lib/postgrex/connection.ex	/^  def query(pid, statement, params, opts \\\\ []) do$/;"	f
query!	deps/ecto/lib/ecto/adapters/sql.ex	/^  def query!(repo, sql, params, opts \\\\ []) do$/;"	f
query!	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query!(repo, sql, params, mapper, opts) do$/;"	f
query!	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp query!(%{module: module, conn: conn}, sql, log, opts) do$/;"	f
query!	deps/postgrex/lib/postgrex/connection.ex	/^  def query!(pid, statement, params, opts \\\\ []) do$/;"	f
query_for_get	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get(_repo, queryable, id) do$/;"	f
query_for_get	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get(repo, _queryable, nil) do$/;"	f
query_for_get_by	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get_by(repo, queryable, clauses) do$/;"	f
query_without_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp query_without_cache(query, operation, adapter) do$/;"	f
queue_key	deps/exq/lib/exq/redis/job_queue.ex	/^  def queue_key(namespace, queue) do$/;"	f
queue_size	deps/exq/lib/exq/api.ex	/^  def queue_size(pid) do$/;"	f
queue_size	deps/exq/lib/exq/api.ex	/^  def queue_size(pid, :scheduled) do$/;"	f
queue_size	deps/exq/lib/exq/api.ex	/^  def queue_size(pid, queue) do$/;"	f
queue_size	deps/exq/lib/exq/enqueuer.ex	/^  def queue_size(pid) do$/;"	f
queue_size	deps/exq/lib/exq/enqueuer.ex	/^  def queue_size(pid, :scheduled) do$/;"	f
queue_size	deps/exq/lib/exq/enqueuer.ex	/^  def queue_size(pid, queue) do$/;"	f
queue_size	deps/exq/lib/exq/enqueuer/server.ex	/^  def queue_size(redis, namespace, :scheduled) do$/;"	f
queue_size	deps/exq/lib/exq/enqueuer/server.ex	/^  def queue_size(redis, namespace, queue) do$/;"	f
queues	deps/exq/lib/exq/api.ex	/^  def queues(pid) do$/;"	f
queues	deps/exq/lib/exq/enqueuer.ex	/^  def queues(pid) do$/;"	f
quote_if_buffer	deps/plug/lib/plug/router/utils.ex	/^  defp quote_if_buffer(identifier, "", context, _fun) do$/;"	f
quote_if_buffer	deps/plug/lib/plug/router/utils.ex	/^  defp quote_if_buffer(identifier, _buffer, context, fun) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name) when is_atom(name),$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name)$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_name(name) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_name(name) when is_atom(name),$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_name(name)$/;"	f
quote_plug	deps/plug/lib/plug/builder.ex	/^  defp quote_plug({plug_type, plug, opts, guards}, acc, env, builder_opts) do$/;"	f
quote_plug_call	deps/plug/lib/plug/builder.ex	/^  defp quote_plug_call(:function, plug, opts) do$/;"	f
quote_plug_call	deps/plug/lib/plug/builder.ex	/^  defp quote_plug_call(:module, plug, opts) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(name) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(name) when is_atom(name),$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(nil, name),    do: quote_table(name)$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(prefix, name), do: quote_table(prefix) <> "." <> quote_table(name)$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(name) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(name) when is_atom(name),$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(nil, name),    do: quote_table(name)$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(prefix, name), do: quote_table(prefix) <> "." <> quote_table(name)$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!(dir) when dir in [:asc, :desc],$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!(other),$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!({:^, _, [expr]}),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!(atom) when is_atom(atom),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!(other),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!({:^, _, [expr]}),$/;"	f
quoted_interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_interval!(other),$/;"	f
quoted_interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_interval!({:^, _, [expr]}),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<>>, _acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<?", t :: binary>>, acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<?\\\\, h, t :: binary>>, acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<h, t :: binary>>, acc),$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(_, _vars), do: :any$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(list, vars) when is_list(list) do$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_binary(literal),  do: :string$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_boolean(literal), do: :boolean$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_float(literal),   do: :float$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_integer(literal), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:-, _, [number]}, _vars) when is_float(number), do: :float$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:-, _, [number]}, _vars) when is_integer(number), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:<<>>, _, _}, _vars), do: :binary$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:date_add, _, [_, _, __]}, _vars), do: :date$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:datetime_add, _, [_, _, __]}, _vars), do: :datetime$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:field, _, [{var, _, context}, field]}, vars)$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:field, _, [{var, _, context}, {:^, _, [code]}]}, vars)$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:type, _, [_, type]}, _vars), do: type$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({name, _, args}, _vars) when is_atom(name) and is_list(args) do$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({sigil, _, [_, []]}, _vars) when sigil in ~w(sigil_s sigil_S)a, do: :string$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({sigil, _, [_, []]}, _vars) when sigil in ~w(sigil_w sigil_W)a, do: {:array, :string}$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({{:., _, [{var, _, context}, field]}, _, []}, vars)$/;"	f
radio_button	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def radio_button(form, field, value, opts \\\\ []) do$/;"	f
raise_invalid_message	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp raise_invalid_message do$/;"	f
raise_invalid_url	deps/phoenix/lib/phoenix/controller.ex	/^  defp raise_invalid_url do$/;"	f
raise_missing_parsers	deps/plug/lib/plug/parsers.ex	/^  defp raise_missing_parsers do$/;"	f
raise_no_migration_in_file	deps/ecto/lib/ecto/migrator.ex	/^  defp raise_no_migration_in_file(file) do$/;"	f
raise_oid_encoding_error	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp raise_oid_encoding_error(sender) do$/;"	f
raise_type_error	deps/ecto/lib/ecto/schema.ex	/^  defp raise_type_error(name, :date) do$/;"	f
raise_type_error	deps/ecto/lib/ecto/schema.ex	/^  defp raise_type_error(name, :datetime) do$/;"	f
raise_type_error	deps/ecto/lib/ecto/schema.ex	/^  defp raise_type_error(name, :time) do$/;"	f
raise_type_error	deps/ecto/lib/ecto/schema.ex	/^  defp raise_type_error(name, :uuid) do$/;"	f
raise_type_error	deps/ecto/lib/ecto/schema.ex	/^  defp raise_type_error(name, type) do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp raise_with_help do$/;"	f
raise_wrong_ecto_type	deps/ecto/lib/ecto/schema.ex	/^  defp raise_wrong_ecto_type(name, given_type, real_type) do$/;"	f
random_file	deps/plug/lib/plug/upload.ex	/^  def random_file(prefix) do$/;"	f
random_file!	deps/plug/lib/plug/upload.ex	/^  def random_file!(prefix) do$/;"	f
random_string	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  defp random_string(length) do$/;"	f
range_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def range_input(form, field, opts \\\\ []) do$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw(nil), do: {:safe, ""}$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw(value) when is_binary(value) or is_list(value), do: {:safe, value}$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw({:safe, value}), do: {:safe, value}$/;"	f
raw_config	deps/phoenix/lib/phoenix/template.ex	/^  defp raw_config(name) do$/;"	f
read_body	deps/plug/lib/plug/conn.ex	/^  def read_body(%Conn{adapter: {adapter, state}} = conn, opts \\\\ []) do$/;"	f
read_file	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  def read_file(dir_prepend \\\\ "source_data", file_name \\\\ @file_name) do$/;"	f
read_file	deps/tzdata/lib/tzdata/parser.ex	/^  def read_file(file_name, dir_prepend) do$/;"	f
read_file	deps/tzdata/lib/tzdata/table_parser.ex	/^  def read_file(dir_prepend, file_name \\\\ @file_name) do$/;"	f
read_req_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def read_req_body(req, opts \\\\ []) do$/;"	f
read_req_body	deps/plug/lib/plug/adapters/test/conn.ex	/^  def read_req_body(%{req_body: body} = state, opts \\\\ []) do$/;"	f
read_req_body	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback read_req_body(payload, options :: Keyword.t) ::$/;"	c
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, @_ETC_TIMEZONE, date) do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, file, _date) when file == @_ETC_SYS_CLOCK or file == @_ETC_CONF_CLOCK do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, file, date) when file == @_ETC_LOCALTIME or file == @_USR_ETC_LOCALTIME do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(result \\\\ nil, file, date)$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data({:ok, _} = result, _, _), do: result$/;"	f
realtime_stats	deps/exq/lib/exq/api.ex	/^  def realtime_stats(pid) do$/;"	f
realtime_stats	deps/exq/lib/exq/stats/server.ex	/^  def realtime_stats(redis, namespace) do$/;"	f
receive_resp	deps/plug/lib/plug/test.ex	/^  defp receive_resp(ref) do$/;"	f
record_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp record_elements(<<>>, 0, _decoder) do$/;"	f
record_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp record_elements(<<_oid :: uint32, -1 :: int32, rest :: binary>>, num, decoder) do$/;"	f
record_elements	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp record_elements(<<oid :: uint32, size :: int32, elem :: binary(size), rest :: binary>>,$/;"	f
record_failure	deps/exq/lib/exq/stats/server.ex	/^  def record_failure(redis, namespace, error, json) do$/;"	f
record_processed	deps/exq/lib/exq/stats/server.ex	/^  def record_processed(redis, namespace, _job) do$/;"	f
recur_through	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp recur_through(assoc, structs) do$/;"	f
recycle	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def recycle(conn) do$/;"	f
recycle_cookies	deps/plug/lib/plug/test.ex	/^  def recycle_cookies(new_conn, old_conn) do$/;"	f
redirect	deps/phoenix/lib/phoenix/controller.ex	/^  def redirect(conn, opts) when is_list(opts) do$/;"	f
redirect_to_https	deps/plug/lib/plug/ssl.ex	/^  defp redirect_to_https(%Conn{host: host} = conn, custom_host) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(%Conn{state: :unset}, _status) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(%Conn{status: status} = conn, status) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(conn, status \\\\ 302)$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(conn, status) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :inf} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :qNaN} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :sNaN} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{sign: sign, coef: coef, exp: exp}) do$/;"	f
reduce	deps/plug/lib/plug/parsers.ex	/^  defp reduce(conn, [], type, subtype, _headers, opts) do$/;"	f
reduce	deps/plug/lib/plug/parsers.ex	/^  defp reduce(conn, [h|t], type, subtype, headers, opts) do$/;"	f
reduce_delete_changesets	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp reduce_delete_changesets([], _fun, acc, valid?, skip?) do$/;"	f
reduce_delete_changesets	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp reduce_delete_changesets([model | rest], fun, acc, valid?, skip?) do$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_column_type(:serial, _opts), do: "BIGINT UNSIGNED"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_column_type(type, opts), do: column_type(type, opts)$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_column_type(:serial, _opts), do: "integer"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_column_type(type, opts), do: column_type(type, opts)$/;"	f
reference_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_expr(%Reference{} = ref, table, name),$/;"	f
reference_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_expr(%Reference{} = ref, table, name),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_name(%Reference{name: name}, _table, _column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_name(%Reference{name: nil}, table, column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_name(%Reference{name: name}, _table, _column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_name(%Reference{name: nil}, table, column),$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(:delete_all), do: " ON DELETE CASCADE"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(:nilify_all), do: " ON DELETE SET NULL"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(_), do: ""$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(:delete_all), do: " ON DELETE CASCADE"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(:nilify_all), do: " ON DELETE SET NULL"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(_), do: ""$/;"	f
references	deps/ecto/lib/ecto/migration.ex	/^  def references(table, opts \\\\ []) when is_atom(table) do$/;"	f
refuse	deps/phoenix/lib/phoenix/controller.ex	/^  defp refuse(conn, accepted) do$/;"	f
register_before_send	deps/plug/lib/plug/conn.ex	/^  def register_before_send(%Conn{before_send: before_send} = conn, callback)$/;"	f
register_before_send	deps/plug/lib/plug/conn.ex	/^  def register_before_send(%Conn{state: state}, _callback)$/;"	f
register_callback	deps/ecto/lib/ecto/model/callbacks.ex	/^  defp register_callback(event, module, function, args) do$/;"	f
regular_file_info	deps/plug/lib/plug/static.ex	/^  defp regular_file_info(path) do$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query(atom) when is_atom(atom), do: atom$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query(queryable) do$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query({source, model}) when is_binary(source) and is_atom(model), do: model$/;"	f
relation!	deps/ecto/lib/ecto/changeset.ex	/^  defp relation!(types, key, fun) do$/;"	f
release_dir	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp release_dir do$/;"	f
release_files	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp release_files do$/;"	f
release_version	deps/tzdata/lib/tzdata/release_reader.ex	/^  def release_version,        do: simple_lookup(:release_version) |> hd |> elem(1)$/;"	f
release_version_for_dir	deps/tzdata/lib/tzdata/data_loader.ex	/^  def release_version_for_dir(dir_name) do$/;"	f
reload!	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defdelegate reload!(endpoint), to: Phoenix.CodeReloader.Server$/;"	d
reload!	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def reload!(endpoint) do$/;"	f
reload_assets_tag	deps/phoenix_live_reload/lib/phoenix_live_reload/live_reloader.ex	/^  defp reload_assets_tag(conn) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(num1, num2) do$/;"	f
remote_poll_file_name	deps/tzdata/lib/tzdata/data_loader.ex	/^  def remote_poll_file_name do$/;"	f
remove	deps/ecto/lib/ecto/migration.ex	/^  def remove(column) when is_atom(column) do$/;"	f
remove_failed	deps/exq/lib/exq/api.ex	/^  def remove_failed(pid, jid) do$/;"	f
remove_failed	deps/exq/lib/exq/stats/server.ex	/^  def remove_failed(redis, namespace, jid) do$/;"	f
remove_process	deps/exq/lib/exq/stats/server.ex	/^  def remove_process(redis, namespace, hostname, pid) do$/;"	f
remove_queue	deps/exq/lib/exq/api.ex	/^  def remove_queue(pid, queue) do$/;"	f
remove_queue	deps/exq/lib/exq/manager/server.ex	/^  defp remove_queue(state, queue) do$/;"	f
remove_queue	deps/exq/lib/exq/stats/server.ex	/^  def remove_queue(redis, namespace, queue) do$/;"	f
rename	deps/ecto/lib/ecto/migration.ex	/^  def rename(%Table{} = table, current_column, to: new_column) when is_atom(current_column) and is_atom(new_column) do$/;"	f
rename	deps/ecto/lib/ecto/migration.ex	/^  def rename(%Table{} = table_current, to: %Table{} = table_new) do$/;"	f
render	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/changeset_view.ex	/^  def render("error.json", %{changeset: changeset}) do$/;"	f
render	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("<%= singular %>.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("index.json", %{<%= plural %>: <%= plural %>}) do$/;"	f
render	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("show.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template) when is_binary(template) or is_atom(template) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template, assigns) when is_binary(template) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template, assigns)$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template_or_assigns \\\\ [])$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, view, template)$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, view, template, assigns)$/;"	f
render	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def render(conn, kind, reason, stack, opts) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(module, template) when is_atom(module) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns \\\\ %{})$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns) when is_list(assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(tpl, %{render_existing: {__MODULE__, tpl}}) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(unquote(name), assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^        def render("show.json", %{user: user}) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.index.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.show.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^  def render(module, template, assigns) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/changeset_view.ex	/^  def render("error.json", %{changeset: changeset}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("<%= singular %>.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("index.json", %{<%= plural %>: <%= plural %>}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("show.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	deps/plug/lib/plug/debugger.ex	/^  def render(conn, kind, reason, stack, opts) do$/;"	f
render	web/views/error_view.ex	/^  def render("404.html", _assigns) do$/;"	f
render	web/views/error_view.ex	/^  def render("500.html", _assigns) do$/;"	f
render_errors	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp render_errors(module) do$/;"	f
render_existing	deps/phoenix/lib/phoenix/view.ex	/^  def render_existing(module, template, assigns \\\\ []) do$/;"	f
render_layout	deps/phoenix/lib/phoenix/view.ex	/^  defp render_layout(inner_content, layout_mod, layout_tpl, assigns) do$/;"	f
render_many	deps/phoenix/lib/phoenix/view.ex	/^  def render_many(collection, view, template, assigns \\\\ %{}) do$/;"	f
render_one	deps/phoenix/lib/phoenix/view.ex	/^  def render_one(model, view, template, assigns \\\\ %{}) do$/;"	f
render_to_iodata	deps/phoenix/lib/phoenix/view.ex	/^  def render_to_iodata(module, template, assign) do$/;"	f
render_to_string	deps/phoenix/lib/phoenix/view.ex	/^  def render_to_string(module, template, assign) do$/;"	f
render_within	deps/phoenix/lib/phoenix/view.ex	/^  defp render_within({false, assigns}, module, template) do$/;"	f
render_within	deps/phoenix/lib/phoenix/view.ex	/^  defp render_within({{layout_mod, layout_tpl}, assigns}, inner_mod, template) do$/;"	f
reply	deps/postgrex/lib/postgrex/utils.ex	/^  def reply(reply, %{queue: queue}) do$/;"	f
reply	deps/postgrex/lib/postgrex/utils.ex	/^  def reply(reply, {_, _} = from) do$/;"	f
reply_ignore	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp reply_ignore(msg, socket) do$/;"	f
repo_and_direction_and_level	deps/ecto/lib/ecto/migration/runner.ex	/^  defp repo_and_direction_and_level do$/;"	f
repo_priv	deps/ecto/lib/mix/ecto.ex	/^  def repo_priv(repo) do$/;"	f
request_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp request_info(%Plug.Conn{method: method, query_string: query_string} = conn) do$/;"	f
reraise	deps/ecto/lib/ecto/query/planner.ex	/^  defp reraise(exception) do$/;"	f
reraise	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp reraise(exception) do$/;"	f
reraise	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def reraise(_conn, :error, %__MODULE__{stack: stack} = reason) do$/;"	f
reraise	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def reraise(conn, kind, reason) do$/;"	f
reset	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp reset(s) do$/;"	f
reset	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def reset(value, opts \\\\ []) do$/;"	f
reset_config	deps/exq/test/test_helper.exs	/^  def reset_config do$/;"	f
resolve	deps/ecto/lib/ecto/log_entry.ex	/^  def resolve(%LogEntry{query: fun} = entry) when is_function(fun) do$/;"	f
resolve	deps/ecto/lib/ecto/log_entry.ex	/^  def resolve(%LogEntry{} = entry) do$/;"	f
resource_name	deps/phoenix/lib/phoenix/naming.ex	/^  def resource_name(alias, suffix \\\\ "") do$/;"	f
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, do: nested_context) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, opts) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, opts, do: nested_context) do$/;"	a
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{state: state}, status, _body)$/;"	f
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{} = conn, status, body)$/;"	f
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{}, _status, nil) do$/;"	f
response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response(%Conn{state: :unset}, _status) do$/;"	f
response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response(%Conn{status: status, resp_body: body}, given) do$/;"	f
response_content_type	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response_content_type(conn, format) when is_atom(format) do$/;"	f
response_content_type?	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp response_content_type?(header, format) do$/;"	f
restart	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def restart(pool, log, opts, timeout) do$/;"	f
restart	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp restart(%{ref: nil, mode: :raw} = s, query!), do: begin(s, query!)$/;"	f
restart	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp restart(%{ref: nil, mode: :sandbox, module: module} = s, query!) do$/;"	f
restart_test_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  def restart_test_transaction(repo, opts \\\\ []) do$/;"	f
result_formats	deps/postgrex/lib/postgrex/protocol.ex	/^  defp result_formats(columns, types) do$/;"	f
resume	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def resume(module, fun, args) do$/;"	f
resume_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp resume_session(%{"token" => token}, endpoint, opts) do$/;"	f
resume_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp resume_session(_params, _endpoint, _opts), do: :error$/;"	f
retry_failed	deps/exq/lib/exq/api.ex	/^  def retry_failed(pid, jid) do$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning([]),$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning(returning),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse(_command), do: false$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:alter,  %Table{}=table, changes}) do$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:rename, %Table{}=table, current_column, new_column}),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:rename, %Table{}=table_current, %Table{}=table_new}),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({command, %Table{}=table, _columns}) when command in @creates,$/;"	f
rewrite_expr	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_expr(%{expr: expr, params: params} = part, mapping) do$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(0, ix, _last_ix, _source_ix, _inc_x), do: ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(join_ix, _ix, _last_ix, _source_ix, inc_ix), do: join_ix + inc_ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(join_ix, _ix, last_ix, _source_ix, _inc_ix) when join_ix > last_ix, do: join_ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(last_ix, _ix, last_ix, source_ix, _inc_x), do: source_ix$/;"	f
rewrite_join	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_join(%{on: on, ix: join_ix} = join, qual, ix, last_ix, source_ix, inc_ix) do$/;"	f
rewrite_on	deps/plug/lib/plug/ssl.ex	/^  defp rewrite_on(conn, rewrites) do$/;"	f
rfc1123	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc1123(opts \\\\ []) do$/;"	f
rfc2822	deps/plug/lib/plug/conn/cookies.ex	/^  defp rfc2822({{year, month, day} = date, {hour, minute, second}}) do$/;"	f
rfc3339	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc3339(opts \\\\ []) do$/;"	f
rfc822	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc822(opts \\\\ []) do$/;"	f
rollback	deps/ecto/lib/ecto/adapter/transaction.ex	/^  defcallback rollback(Ecto.Repo.t, any) :: no_return$/;"	c
rollback	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def rollback do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def rollback do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql.ex	/^      def rollback(repo, value) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql.ex	/^  def rollback(repo, value) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp rollback(repo, ref, mod, mode, timeout, opts, result) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback rollback :: String.t$/;"	c
rollback	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def rollback(pool, log, opts, timeout) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp rollback(%{ref: nil, mode: :raw} = s, _), do: {:ok, s}$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp rollback(%{ref: nil, mode: :sandbox, module: module} = s, query!) do$/;"	f
rollback	deps/ecto/lib/ecto/pool.ex	/^  def rollback(pool_mod, pool, value) do$/;"	f
rollback	deps/ecto/lib/ecto/repo.ex	/^      def rollback(value) do$/;"	f
rollback	deps/ecto/lib/ecto/repo.ex	/^  defcallback rollback(any) :: no_return$/;"	c
rollback_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp rollback_sql(mod, :raw), do: mod.rollback$/;"	f
rollback_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp rollback_sql(mod, :sandbox) do$/;"	f
rollback_test_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  def rollback_test_transaction(repo, opts \\\\ []) do$/;"	f
rollback_to_savepoint	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def rollback_to_savepoint(savepoint) do$/;"	f
rollback_to_savepoint	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def rollback_to_savepoint(savepoint) do$/;"	f
rollback_to_savepoint	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback rollback_to_savepoint(savepoint :: String.t) :: String.t$/;"	c
root!	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp root!(conf) do$/;"	f
rootify	deps/exq/web/static_root.ex	/^  def rootify(%Plug.Conn{path_info: []} = conn, opts, to) do$/;"	f
rootify	deps/exq/web/static_root.ex	/^  def rootify(conn, _opts, _ns), do: conn$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :inf} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :qNaN} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :sNaN} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(num, n, mode) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(num, places \\\\ 0, mode \\\\ :half_up)$/;"	f
round_month	deps/timex/lib/date/date.ex	/^  defp round_month(m) do$/;"	f
route	deps/phoenix/lib/phoenix/router/scope.ex	/^  def route(module, kind, verb, path, plug, plug_opts, opts) do$/;"	f
route_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp route_name(name), do: name <> "_path"$/;"	f
route_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp route_name(nil),  do: ""$/;"	f
router	deps/phoenix/lib/mix/tasks/phoenix.routes.ex	/^  defp router(args) do$/;"	f
router	web/web.ex	/^  def router do$/;"	f
router_module	deps/phoenix/lib/phoenix/controller.ex	/^  def router_module(conn), do: conn.private.phoenix_router$/;"	f
rpush!	deps/exq/lib/exq/redis/connection.ex	/^  def rpush!(redis, key, value) do$/;"	f
rule_applies_for_year	deps/tzdata/lib/tzdata/util.ex	/^  def rule_applies_for_year(rule, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, :max, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, :only, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, rule_to, year) do$/;"	f
rule_applies_for_year_ints	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_ints(_, _, _) do$/;"	f
rule_applies_for_year_ints	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_ints(rule_from, rule_to, year) when rule_from > year or rule_to < year do$/;"	f
rules	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def rules(from_initial_pass) do$/;"	f
rules	deps/tzdata/lib/tzdata/release_reader.ex	/^  def rules,                  do: simple_lookup(:rules) |> hd |> elem(1)$/;"	f
rules_applying_for_rule_name_and_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp rules_applying_for_rule_name_and_year(rule_name, year) do$/;"	f
rules_for_name	deps/tzdata/lib/tzdata/release_reader.ex	/^  def rules_for_name(rules_name) do$/;"	f
rules_for_year	deps/tzdata/lib/tzdata/util.ex	/^  def rules_for_year(rules, year) do$/;"	f
run	deps/ecto/lib/ecto/migration/runner.ex	/^  def run(repo, module, direction, operation, migrator_direction, opts) do$/;"	f
run	deps/ecto/lib/ecto/migrator.ex	/^  def run(repo, directory, direction, opts) do$/;"	f
run	deps/ecto/lib/ecto/pool.ex	/^  def run(pool_mod, pool, timeout, fun) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.create.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.gen.repo.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.migrate.ex	/^  def run(args, migrator \\\\ &Ecto.Migrator.run\/4) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.rollback.ex	/^  def run(args, migrator \\\\ &Ecto.Migrator.run\/4) do$/;"	f
run	deps/exq/lib/mix/tasks/exq.run.ex	/^  def run(args) do$/;"	f
run	deps/exq/lib/mix/tasks/exq.ui.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  def run(_args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.digest.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  def run([]),    do: run(["64"])$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  def run([_|_]), do: invalid_args!$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  def run([int]), do: int |> parse! |> random_string |> Mix.shell.info$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.routes.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^  def run(args) do$/;"	f
run	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp run(scheme, plug, opts, cowboy_options) do$/;"	f
run_all	deps/ecto/lib/ecto/migrator.ex	/^  defp run_all(repo, versions, directory, direction, opts) do$/;"	f
run_args	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^  defp run_args do$/;"	f
run_before_send	deps/plug/lib/plug/conn.ex	/^  defp run_before_send(%Conn{before_send: before_send} = conn, new) do$/;"	f
run_maybe_in_transaction	deps/ecto/lib/ecto/migrator.ex	/^  defp run_maybe_in_transaction(repo, module, fun) do$/;"	f
run_step	deps/ecto/lib/ecto/migrator.ex	/^  defp run_step(repo, versions, directory, direction, count, opts) do$/;"	f
run_to	deps/ecto/lib/ecto/migrator.ex	/^  defp run_to(repo, versions, directory, direction, target, opts) do$/;"	f
run_with_mysql	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp run_with_mysql(database, sql_command) do$/;"	f
run_with_psql	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp run_with_psql(database, sql_command) do$/;"	f
runtime	deps/ecto/lib/ecto/query/builder/update.ex	/^  def runtime(runtime, _line, _file) do$/;"	f
runtime	deps/ecto/lib/ecto/query/builder/update.ex	/^  def runtime(runtime, line, file) when is_list(runtime) do$/;"	f
runtime_error!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp runtime_error!(value) do$/;"	f
runtime_field	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp runtime_field(key, kw, acc) do$/;"	f
sadd!	deps/exq/lib/exq/redis/connection.ex	/^  def sadd!(redis, set, member) do$/;"	f
safe_to_string	deps/phoenix_html/lib/phoenix_html.ex	/^  def safe_to_string({:safe, iodata}) do$/;"	f
savepoint	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def savepoint(savepoint) do$/;"	f
savepoint	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def savepoint(savepoint) do$/;"	f
savepoint	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback savepoint(savepoint :: String.t) :: String.t$/;"	c
scale	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp scale(coef, exp, scale) when scale < exp,$/;"	f
scale	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp scale(coef, exp, scale) when scale == exp,$/;"	f
scale	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp scale(coef, exp, scale) when scale > exp,$/;"	f
scale	deps/timex/lib/time/time.ex	/^  def scale({mega, secs, micro}, coef) do$/;"	f
scan!	deps/exq/lib/exq/redis/connection.ex	/^  def scan!(redis, cursor, search, count) do$/;"	f
scard!	deps/exq/lib/exq/redis/connection.ex	/^  def scard!(redis, set) do$/;"	f
scheduled_queue_key	deps/exq/lib/exq/redis/job_queue.ex	/^  def scheduled_queue_key(namespace) do$/;"	f
scheduler_dequeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def scheduler_dequeue(redis, namespace, queues) when is_list(queues) do$/;"	f
scheduler_dequeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def scheduler_dequeue(redis, namespace, queues, max_score) when is_list(queues) do$/;"	f
scheduler_dequeue_requeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def scheduler_dequeue_requeue([], _redis, _namespace, _queues, count), do: count$/;"	f
scheduler_dequeue_requeue	deps/exq/lib/exq/redis/job_queue.ex	/^  def scheduler_dequeue_requeue([job_json|t], redis, namespace, queues, count) do$/;"	f
schema	deps/ecto/lib/ecto/schema.ex	/^  defmacro schema(source, [do: block]) do$/;"	a
scheme	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp scheme(:ssl), do: :https$/;"	f
scheme	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp scheme(:tcp), do: :http$/;"	f
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(options, do: context) do$/;"	a
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(path, alias, options, do: context) do$/;"	a
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(path, options, do: context) do$/;"	a
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(" " <> rest), do: scrub?(rest)$/;"	f
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(""), do: true$/;"	f
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(_), do: false$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(%{__struct__: mod} = struct) when is_atom(mod) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(%{} = param) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(param) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(param) when is_list(param) do$/;"	f
scrub_params	deps/phoenix/lib/phoenix/controller.ex	/^  def scrub_params(conn, required_key) when is_binary(required_key) do$/;"	f
search_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def search_input(form, field, opts \\\\ []) do$/;"	f
second	deps/timex/lib/parse/datetime/parsers.ex	/^  def second(opts \\\\ []) do$/;"	f
second_fractional	deps/timex/lib/parse/datetime/parsers.ex	/^  def second_fractional(opts \\\\ []) do$/;"	f
seconds_epoch	deps/timex/lib/parse/datetime/parsers.ex	/^  def seconds_epoch(opts \\\\ []) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  def secure_compare(left, right) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  defp secure_compare(<<>>, <<>>, acc) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  defp secure_compare(<<x, left :: binary>>, <<y, right :: binary>>, acc) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match("*" <> argument, buffer, context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(":" <> argument, buffer, context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(<<>>, buffer, _context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(<<h, t::binary>>, buffer, context) do$/;"	f
segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp segments(segments, [], _reserved) do$/;"	f
segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp segments(segments, query, reserved) do$/;"	f
select	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp select(%Query{select: %SelectExpr{fields: fields}, distinct: distinct} = query,$/;"	f
select	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp select(%Query{select: %SelectExpr{fields: fields}, distinct: distinct} = query,$/;"	f
select	deps/ecto/lib/ecto/query.ex	/^  defmacro select(query, binding, expr) do$/;"	a
select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def select(form, field, values, opts \\\\ []) do$/;"	f
send_chunked	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_chunked(req, status, headers) do$/;"	f
send_chunked	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_chunked(state, _status, _headers),$/;"	f
send_chunked	deps/plug/lib/plug/conn.ex	/^  def send_chunked(%Conn{adapter: {adapter, payload}, owner: owner} = conn, status) do$/;"	f
send_chunked	deps/plug/lib/plug/conn.ex	/^  def send_chunked(%Conn{state: state}, status)$/;"	f
send_chunked	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback send_chunked(payload, Conn.status, Conn.headers) ::$/;"	c
send_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_file(req, status, headers, path, offset, length) do$/;"	f
send_file	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_file(%{method: "HEAD"} = state, status, headers, _path, _offset, _length) do$/;"	f
send_file	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_file(state, status, headers, path, offset, length) do$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(%Conn{adapter: {adapter, payload}, owner: owner} = conn, status, file, offset, length)$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(%Conn{state: state}, status, _file, _offset, _length)$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(conn, status, file, offset \\\\ 0, length  \\\\ :all)$/;"	f
send_file	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback send_file(payload, Conn.status, Conn.headers, file :: binary,$/;"	c
send_params	deps/postgrex/lib/postgrex/protocol.ex	/^  defp send_params(s, rfs) do$/;"	f
send_query	deps/postgrex/lib/postgrex/protocol.ex	/^  def send_query(statement, s) do$/;"	f
send_resp	deps/phoenix/lib/phoenix/controller.ex	/^  defp send_resp(conn, default_status, default_content_type, body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_resp(req, status, headers, body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_resp(%{method: "HEAD"} = state, status, headers, _body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_resp(state, status, headers, body) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{adapter: {adapter, payload}, state: :set, owner: owner} = conn) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{state: :unset}) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{} = conn, status, body) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{}) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(conn)$/;"	f
send_resp	deps/plug/lib/plug/conn/adapter.ex	/^  defcallback send_resp(payload, Conn.status, Conn.headers, Conn.body) ::$/;"	c
send_to_result	deps/postgrex/lib/postgrex/protocol.ex	/^  defp send_to_result(msg, s) do$/;"	f
sent_resp	deps/plug/lib/plug/test.ex	/^  def sent_resp(%Conn{adapter: {Plug.Adapters.Test.Conn, %{ref: ref}}}) do$/;"	f
seq	deps/poison/lib/poison/encoder.ex	/^  defp seq(char) do$/;"	f
serve_static	deps/plug/lib/plug/static.ex	/^  defp serve_static({:error, conn}, _segments, _gzip, _qs_cache, _et_cache, _headers) do$/;"	f
serve_static	deps/plug/lib/plug/static.ex	/^  defp serve_static({:ok, conn, file_info, path}, segments, gzip, qs_cache, et_cache, headers) do$/;"	f
server	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp server() do$/;"	f
server_children	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp server_children(mod, conf, server?) do$/;"	f
server_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp server_info(%Plug.Conn{host: host, port: port, scheme: scheme}) do$/;"	f
server_name	deps/exq/lib/exq/enqueuer/supervisor.ex	/^  defp server_name(opts) do$/;"	f
server_name	deps/exq/lib/exq/scheduler/supervisor.ex	/^  defp server_name(opts) do$/;"	f
server_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp server_ref(endpoint_id, id, pid, topic) do$/;"	f
session_key	deps/plug/lib/plug/conn.ex	/^  defp session_key(atom) when is_atom(atom), do: Atom.to_string(atom)$/;"	f
session_key	deps/plug/lib/plug/conn.ex	/^  defp session_key(binary) when is_binary(binary), do: binary$/;"	f
set	deps/timex/lib/date/date.ex	/^  def set(%DateTime{} = date, options) do$/;"	f
set!	deps/exq/lib/exq/redis/connection.ex	/^  def set!(redis, key, val \\\\ 0) do$/;"	f
set_context	deps/decimal/lib/decimal.ex	/^  def set_context(%Context{} = context) do$/;"	f
set_current_release	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp set_current_release(release_version) do$/;"	f
set_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  def set_latest_remote_poll_date do$/;"	f
set_request_id	deps/plug/lib/plug/request_id.ex	/^  defp set_request_id({conn, request_id}, header) do$/;"	f
set_width	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp set_width(min, max, type, directive, opts) do$/;"	f
setup	deps/exq/test/test_helper.exs	/^  def setup do$/;"	f
setup_queues	deps/exq/lib/exq/manager/server.ex	/^  defp setup_queues(opts) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{:hour => h, :minute => m, :second => s, :timezone => tz} = date, [days: value]) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{timezone: tz} = date, [{type, value}]) when type in [:secs, :mins, :hours] do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [months: value]) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [timestamp: timestamp]), do: add(date, timestamp)$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [timestamp: {0,0,0}]),   do: date$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [weeks: value]) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [years: value]) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, [{_, 0}]),               do: date$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%DateTime{} = date, spec) when is_list(spec) do$/;"	f
show	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, _params) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, params) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^      def show(conn, _params) do$/;"	f
show	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^        def show(conn, _params) do$/;"	f
show	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
shuffle	deps/exq/lib/exq/support/shuffle.ex	/^  def shuffle([], acc) do$/;"	f
shuffle	deps/exq/lib/exq/support/shuffle.ex	/^  def shuffle(list)  do$/;"	f
shuffle	deps/exq/lib/exq/support/shuffle.ex	/^  def shuffle(list, acc) do$/;"	f
shutdown	deps/ecto/lib/ecto/adapters/connection.ex	/^  def shutdown(pid, :brutal_kill) do$/;"	f
shutdown	deps/ecto/lib/ecto/adapters/connection.ex	/^  def shutdown(pid, shutdown \\\\ 5_000)$/;"	f
shutdown	deps/ecto/lib/ecto/adapters/connection.ex	/^  def shutdown(pid, timeout) do$/;"	f
shutdown	deps/plug/lib/plug/adapters/cowboy.ex	/^  def shutdown(ref) do$/;"	f
sigil_E	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro sigil_E(expr, opts) do$/;"	a
sigil_e	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro sigil_e(expr, opts) do$/;"	a
sign	deps/phoenix/lib/phoenix/token.ex	/^  def sign(context, salt, data, opts \\\\ []) when is_binary(salt) do$/;"	f
sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def sign(binary, secret) when is_binary(binary) and is_binary(secret) do$/;"	f
sign_token	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp sign_token(endpoint, data, opts) do$/;"	f
simple_lookup	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp simple_lookup(key) do$/;"	f
simple_perform	deps/exq/test/exq_test.exs	/^    def simple_perform do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(_relation, new, _current_pks, _new_pks, fun, nil) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(_relation, nil, _current_pks, _new_pks, fun, current) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(relation, new, current_pks, new_pks, fun, current) do$/;"	f
single_changeset!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_changeset!(new, current, fun, allowed_actions) do$/;"	f
skip?	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp skip?(%{valid?: true, changes: empty, action: :update}) when empty == %{},$/;"	f
skip?	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp skip?(_changeset),$/;"	f
skip_csrf_protection?	deps/plug/lib/plug/csrf_protection.ex	/^  defp skip_csrf_protection?(%Plug.Conn{private: %{plug_skip_csrf_protection: true}}), do: true$/;"	f
skip_csrf_protection?	deps/plug/lib/plug/csrf_protection.ex	/^  defp skip_csrf_protection?(%Plug.Conn{}), do: false$/;"	f
skip_deleted	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp skip_deleted(changesets, false) do$/;"	f
skip_deleted	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp skip_deleted(changesets, true) do$/;"	f
skip_timestamp?	deps/ecto/lib/ecto/model/timestamps.ex	/^  defp skip_timestamp?(changeset, field) do$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(<<char>> <> rest) when char in '\\s\\n\\t\\r' do$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(string), do: string$/;"	f
slashed	deps/timex/lib/parse/datetime/parsers.ex	/^  def slashed(_) do$/;"	f
smaller_than_or_equals	deps/tzdata/lib/tzdata.ex	/^  defp smaller_than_or_equals(:min, _), do: true$/;"	f
smaller_than_or_equals	deps/tzdata/lib/tzdata.ex	/^  defp smaller_than_or_equals(first, second), do: first <= second$/;"	f
smembers!	deps/exq/lib/exq/redis/connection.ex	/^  def smembers!(redis, set) do$/;"	f
socket	deps/phoenix/lib/phoenix/channel/server.ex	/^  def socket(pid) do$/;"	f
socket	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro socket(path, module) do$/;"	a
socket	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro socket() do$/;"	a
socket	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro socket(id, assigns) do$/;"	a
sort_by_id	deps/ecto/integration_test/cases/preload.exs	/^  defp sort_by_id(values) do$/;"	f
sort_rules_by_time	deps/tzdata/lib/tzdata/period_builder.ex	/^  def sort_rules_by_time(rules) do$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({:fragment, _, _} = source), do: source$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({_, nil} = source), do: source$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({bin, model}), do: {bin, model, model.__schema__(:hash)}$/;"	f
space_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp space_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
space_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp space_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
spaces	deps/combine/lib/combine/parsers/text.ex	/^  def spaces(),       do: Base.map(Base.many1(space), fn _ -> " " end)$/;"	f
spaces	deps/combine/lib/combine/parsers/text.ex	/^  def spaces(parser), do: parser |> Base.map(Base.many1(space), fn _ -> " " end)$/;"	f
spaces	deps/poison/lib/poison/encoder.ex	/^      defp spaces(count) do$/;"	f
spawn_pid	deps/phoenix/test/shared/pubsub_test.exs	/^  def spawn_pid do$/;"	f
split	deps/plug/lib/plug/router/utils.ex	/^  def split(bin) do$/;"	f
split_and_not_nil	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp split_and_not_nil([h|t], count, _all_nil?, acc) do$/;"	f
split_and_not_nil	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp split_and_not_nil([nil|t], count, all_nil?, acc) do$/;"	f
split_and_not_nil	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp split_and_not_nil(rest, 0, false, acc), do: {:lists.reverse(acc), rest}$/;"	f
split_and_not_nil	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp split_and_not_nil(rest, 0, true, _acc), do: {nil, rest}$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<>>, consumed), do: [consumed]$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<??, rest :: binary >>, consumed), do: [consumed | split_binary(rest, "")]$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<?\\\\, ??, rest :: binary >>, consumed), do: split_binary(rest, consumed <> <<??>>)$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<first :: utf8, rest :: binary>>, consumed), do: split_binary(rest, consumed <> <<first>>)$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(query), do: split_binary(query, "")$/;"	f
split_country_codes	deps/tzdata/lib/tzdata/table_parser.ex	/^  defp split_country_codes(string) do$/;"	f
split_opts	deps/ecto/lib/ecto/pools/poolboy.ex	/^  defp split_opts(opts) do$/;"	f
split_opts	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  defp split_opts(opts) do$/;"	f
split_path	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp split_path(path) do$/;"	f
split_path	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp split_path(path) do$/;"	f
sql_array	deps/postgrex/lib/postgrex/types.ex	/^  defp sql_array(list) do$/;"	f
srem!	deps/exq/lib/exq/redis/connection.ex	/^  def srem!(redis, set, member) do$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(:max, _), do: :max$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(:min, _), do: :min$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(utc_time, utc_offset) do$/;"	f
start	deps/ecto/lib/ecto.ex	/^      def start(_type, _args) do$/;"	f
start	deps/exq/lib/exq.ex	/^  def start(_type, _args) do$/;"	f
start	deps/exq/lib/exq.ex	/^  def start(opts \\\\ []) do$/;"	f
start	deps/exq/lib/exq/enqueuer.ex	/^  def start(opts \\\\ []) do$/;"	f
start	deps/exq/lib/exq/enqueuer/server.ex	/^  def start(opts \\\\ []) do$/;"	f
start	deps/exq/lib/exq/manager/supervisor.ex	/^  def start(opts \\\\ []) do$/;"	f
start	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def start(opts \\\\ []) do$/;"	f
start	deps/exq/lib/exq/worker/server.ex	/^  def start(job, manager, queue, work_table) do$/;"	f
start	deps/exq/test/test_helper.exs	/^  def start do$/;"	f
start	deps/phoenix/lib/phoenix.ex	/^  def start(_type, _args) do$/;"	f
start	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def start() do$/;"	f
start	deps/plug/lib/plug.ex	/^  def start(_type, _args) do$/;"	f
start	deps/postgrex/lib/postgrex.ex	/^  def start(_, _) do$/;"	f
start	deps/tzdata/lib/tzdata/tzdata_app.ex	/^  def start(_type, _args) do$/;"	f
start	lib/exqueue.ex	/^  def start(_type, _args) do$/;"	f
start_command	deps/ecto/lib/ecto/migration/runner.ex	/^  def start_command(command) do$/;"	f
start_link	deps/ecto/integration_test/cases/pool.exs	/^    def start_link(_conn_mod, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/adapter.ex	/^  defcallback start_link(repo, options) ::$/;"	c
start_link	deps/ecto/lib/ecto/adapters/sql.ex	/^      def start_link(repo, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/adapters/sql.ex	/^  def start_link(connection, adapter, _repo, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def start_link(conn_mod, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/migration/runner.ex	/^  def start_link(repo, direction, migrator_direction, level) do$/;"	f
start_link	deps/ecto/lib/ecto/pool.ex	/^  defcallback start_link(module, opts) ::$/;"	c
start_link	deps/ecto/lib/ecto/pools/poolboy.ex	/^  def start_link(conn_mod, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def start_link({module, params}) do$/;"	f
start_link	deps/ecto/lib/ecto/pools/sojourn_broker.ex	/^  def start_link(conn_mod, opts) do$/;"	f
start_link	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def start_link(module, broker, params) do$/;"	f
start_link	deps/ecto/lib/ecto/repo.ex	/^      def start_link(opts \\\\ []) do$/;"	f
start_link	deps/ecto/lib/ecto/repo.ex	/^  defcallback start_link() :: {:ok, pid} |$/;"	c
start_link	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def start_link(repo, otp_app, adapter, opts) do$/;"	f
start_link	deps/exq/lib/exq.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/enqueuer.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/enqueuer/server.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/enqueuer/supervisor.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/exq/lib/exq/manager/server.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/manager/supervisor.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def start_link(opts \\\\ []) do$/;"	f
start_link	deps/exq/lib/exq/scheduler/supervisor.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/exq/lib/exq/stats/server.ex	/^  def start_link(redis) do$/;"	f
start_link	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def start_link(app, root, paths, compilers, opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/config.ex	/^  def start_link(otp_app, module, defaults, opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint.ex	/^      def start_link do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def start_link(otp_app, mod) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  def start_link(scheme, endpoint, config, {m, f, a}) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  def start_link(otp_app, endpoint, opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  def start_link(root, cmd, args) do$/;"	f
start_link	deps/phoenix/lib/phoenix/pubsub.ex	/^        def start_link(name, options) do$/;"	f
start_link	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def start_link(server_name) do$/;"	f
start_link	deps/phoenix/lib/phoenix/pubsub/pg2.ex	/^  def start_link(name, _opts) do$/;"	f
start_link	deps/phoenix/lib/phoenix/pubsub/pg2_server.ex	/^  def start_link(name, local_name) do$/;"	f
start_link	deps/phoenix/lib/phoenix/supervisor.ex	/^  def start_link do$/;"	f
start_link	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def start_link do$/;"	f
start_link	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def start_link(endpoint, handler, transport_name, transport,$/;"	f
start_link	deps/plug/lib/plug/supervisor.ex	/^  def start_link() do$/;"	f
start_link	deps/plug/lib/plug/upload.ex	/^  def start_link() do$/;"	f
start_link	deps/postgrex/lib/postgrex/connection.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_server.ex	/^  def start_link do$/;"	f
start_link	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def start_link() do$/;"	f
start_link	deps/tzdata/lib/tzdata/release_updater.ex	/^  def start_link() do$/;"	f
start_timeout	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def start_timeout(pid) do$/;"	f
start_worker	deps/exq/test/worker_test.exs	/^  def start_worker(job) do$/;"	f
startup	deps/postgrex/lib/postgrex/protocol.ex	/^  def startup(%{sock: sock, opts: opts} = s) do$/;"	f
startup_ssl	deps/postgrex/lib/postgrex/protocol.ex	/^  def startup_ssl(%{sock: sock} = s) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint.ex	/^      def static_path(path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def static_path(_endpoint, path) when is_binary(path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def static_path(endpoint, "\/" <> _ = path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(%Conn{private: private} = conn, path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(%Socket{endpoint: endpoint} = conn, path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(endpoint, path) when is_atom(endpoint) do$/;"	f
static_url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def static_url do$/;"	f
static_url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def static_url(endpoint) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(%Conn{private: private} = conn, path) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(%Socket{endpoint: endpoint} = conn, path) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(endpoint, path) when is_atom(endpoint) do$/;"	f
stats	deps/exq/lib/exq/api.ex	/^  def stats(pid, key) do$/;"	f
stats	deps/exq/lib/exq/api.ex	/^  def stats(pid, key, date) do$/;"	f
stats	deps/exq/lib/exq/enqueuer.ex	/^  def stats(pid, key) do$/;"	f
stats	deps/exq/lib/exq/enqueuer.ex	/^  def stats(pid, key, date) do$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:error, error), do: Plug.Exception.status(error)$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:exit, _exit),   do: 500$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:throw, _throw), do: 500$/;"	f
status	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^  def status(_), do: 400$/;"	f
status	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^  def status(_), do: 404$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:error, error),  do: Plug.Exception.status(error)$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:exit, _exit),   do: 500$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:throw, _throw), do: 500$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(%{plug_status: status}) when is_integer(status), do: status$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(_), do: 500$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(exception)$/;"	f
status_json	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp status_json(conn, data) do$/;"	f
step_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp step_for(:integer), do: [step: 1]$/;"	f
step_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp step_for(_other),   do: [step: "any"]$/;"	f
stop	deps/ecto/lib/ecto/adapter.ex	/^  defcallback stop(pid, timeout) :: :ok$/;"	c
stop	deps/ecto/lib/ecto/adapters/sql.ex	/^      def stop(pid, timeout) do$/;"	f
stop	deps/ecto/lib/ecto/migration/runner.ex	/^  def stop() do$/;"	f
stop	deps/ecto/lib/ecto/repo.ex	/^      def stop(pid, timeout \\\\ 5000) do$/;"	f
stop	deps/ecto/lib/ecto/repo.ex	/^  defcallback stop(pid, timeout) :: :ok$/;"	c
stop	deps/exq/lib/exq.ex	/^  def stop(pid) when is_pid(pid) do$/;"	f
stop	deps/exq/lib/exq.ex	/^  def stop(sup) when is_atom(sup) do$/;"	f
stop	deps/exq/lib/exq/enqueuer.ex	/^  def stop(pid) do$/;"	f
stop	deps/exq/lib/exq/manager/server.ex	/^  def stop(_pid) do$/;"	f
stop	deps/exq/lib/exq/scheduler/scheduler.ex	/^  def stop(_pid) do$/;"	f
stop	deps/exq/test/test_helper.exs	/^  def stop do$/;"	f
stop	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def stop(proxy) do$/;"	f
stop	deps/phoenix/lib/phoenix/config.ex	/^  def stop(module) do$/;"	f
stop	deps/phoenix/lib/phoenix/config.ex	/^  defp stop(module, defaults) do$/;"	f
stop	deps/postgrex/lib/postgrex/connection.ex	/^  def stop(pid, opts \\\\ []) do$/;"	f
stop_process	deps/exq/test/test_helper.exs	/^  def stop_process(pid) do$/;"	f
stopper	deps/plug/lib/plug/builder.ex	/^        def stopper(conn, _opts) do$/;"	f
storage_down	deps/ecto/lib/ecto/adapter/storage.ex	/^  defcallback storage_down(Keyword.t) :: :ok | {:error, :already_down} | {:error, term}$/;"	c
storage_down	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def storage_down(opts) do$/;"	f
storage_down	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def storage_down(opts) do$/;"	f
storage_up	deps/ecto/lib/ecto/adapter/storage.ex	/^  defcallback storage_up(Keyword.t) :: :ok | {:error, :already_up} | {:error, term}$/;"	c
storage_up	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def storage_up(opts) do$/;"	f
storage_up	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def storage_up(opts) do$/;"	f
store_autogenerate!	deps/ecto/lib/ecto/schema.ex	/^  defp store_autogenerate!(mod, name, type, false) do$/;"	f
store_autogenerate!	deps/ecto/lib/ecto/schema.ex	/^  defp store_autogenerate!(mod, name, type, true) do$/;"	f
strftime_format_parser	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp strftime_format_parser() do$/;"	f
strftime_iso_clock	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_clock(_) do$/;"	f
strftime_iso_clock_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_clock_full(_) do$/;"	f
strftime_iso_shortdate	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_shortdate(_) do$/;"	f
strftime_kitchen	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_kitchen(opts \\\\ [padding: :zeroes]) do$/;"	f
string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  def string_amount_to_secs("0"), do: 0$/;"	f
string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  def string_amount_to_secs(string) do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\"" <> _, acc), do: acc$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\\\" <> _, acc), do: acc$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<char>> <> rest, acc) when char < 0x80 do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<codepoint :: utf8>> <> rest, acc) do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(other, _), do: syntax_error(other)$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(_),                                  do: 4$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x10000, do: 3$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x800,   do: 2$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("", _), do: throw(:invalid)$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\"" <> rest, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\\\" <> rest, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue(string, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^    defp string_escape(<<unquote(seq)>> <> rest, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, a1, b1, c1, d1, "\\\\u", a2, b2, c2, d2>> <> rest, acc)$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, seq :: binary-size(4)>> <> rest, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(other, _), do: syntax_error(other)$/;"	f
string_to_binary!	deps/uuid/lib/uuid.ex	/^  def string_to_binary!(<<uuid::binary>>) do$/;"	f
string_to_binary!	deps/uuid/lib/uuid.ex	/^  def string_to_binary!(_) do$/;"	f
stringify_kv	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_kv({k, v}),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(%{__struct__: mod} = struct) when is_atom(mod),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(%{} = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params([_|_] = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params([{_, _}|_] = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(other),$/;"	f
strip_comment	deps/tzdata/lib/tzdata/util.ex	/^  def strip_comment(line), do: Regex.replace(~r\/[\\s]*#.+\/, line, "")$/;"	f
strip_quotes	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp strip_quotes(quoted) do$/;"	f
strip_quotes	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp strip_quotes(quoted) do$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces("\\r\\n" <> t),$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces(<<h, t :: binary>>) when h in [?\\s, ?\\t],$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces(t),$/;"	f
struct	deps/ecto/lib/ecto/association.ex	/^  def struct(module, name, opts) do$/;"	f
struct	deps/ecto/lib/ecto/association.ex	/^  defcallback struct(module, field :: atom, opts :: Keyword.t) :: t$/;"	c
struct	deps/ecto/lib/ecto/embedded.ex	/^  def struct(module, name, opts) do$/;"	f
struct_from_changeset!	deps/ecto/lib/ecto/repo/model.ex	/^  defp struct_from_changeset!(_action, %{model: struct}),$/;"	f
struct_from_changeset!	deps/ecto/lib/ecto/repo/model.ex	/^  defp struct_from_changeset!(action, %{model: nil}),$/;"	f
struct_url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def struct_url do$/;"	f
struct_url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def struct_url(endpoint) do$/;"	f
sub	deps/decimal/lib/decimal.ex	/^  def sub(%Decimal{} = num1, %Decimal{sign: sign} = num2) do$/;"	f
sub	deps/timex/lib/time/time.ex	/^  def sub({mega1,sec1,micro1}, {mega2,sec2,micro2}) do$/;"	f
subcommand	deps/ecto/lib/ecto/migration/runner.ex	/^  def subcommand(subcommand) do$/;"	f
submit	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def submit(value, opts \\\\ []) do$/;"	f
subscribe	deps/exq/lib/exq.ex	/^  def subscribe(pid, queue) do$/;"	f
subscribe	deps/exq/lib/exq.ex	/^  def subscribe(pid, queue, concurrency) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def subscribe(pid, topic, opts \\\\ []) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/pubsub.ex	/^  def subscribe(server, pid, topic, opts \\\\ []) when is_atom(server),$/;"	f
subscribe	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def subscribe(local_server, pid, topic, opts \\\\ []) when is_atom(local_server) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp subscribe(_endpoint, pid) when is_pid(pid),$/;"	f
subscribe	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp subscribe(endpoint, topic) when is_binary(topic),$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, topic, payload)$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, topic, payload)$/;"	f
subscribers	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def subscribers(local_server, topic) when is_atom(local_server) do$/;"	f
subscribers_with_fastlanes	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def subscribers_with_fastlanes(local_server, topic) when is_atom(local_server) do$/;"	f
subscription	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def subscription(local_server, pid) when is_atom(local_server) do$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset([], actual),$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset([h|expected], [h|actual]),$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset(_, _),$/;"	f
subtract	deps/timex/lib/date/date.ex	/^  def subtract(%DateTime{} = date, {mega, sec, _}) do$/;"	f
sum	deps/ecto/lib/ecto/query/api.ex	/^  def sum(value), do: doc! [value]$/;"	f
supervisor_name	deps/exq/lib/exq/enqueuer/supervisor.ex	/^  defp supervisor_name(opts) do$/;"	f
supervisor_name	deps/exq/lib/exq/manager/supervisor.ex	/^  defp supervisor_name(opts) do$/;"	f
supervisor_name	deps/exq/lib/exq/scheduler/supervisor.ex	/^  defp supervisor_name(opts) do$/;"	f
supports_ddl_transaction?	deps/ecto/lib/ecto/adapter/migration.ex	/^  defcallback supports_ddl_transaction? :: boolean$/;"	c
supports_ddl_transaction?	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def supports_ddl_transaction? do$/;"	f
supports_ddl_transaction?	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def supports_ddl_transaction? do$/;"	f
swap_case	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp swap_case(<<char::utf8, _::binary>> = str)$/;"	f
swap_case	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp swap_case(str), do: str$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(<<token :: utf8>> <> _) do$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(_) do$/;"	f
tab_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp tab_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
tab_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp tab_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
table	deps/ecto/lib/ecto/migration.ex	/^  def table(name, opts \\\\ []) when is_atom(name) do$/;"	f
table_name_for_release_name	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp table_name_for_release_name(release_name) do$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse([]),   do: []$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse([h|t]) do$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse(_), do: false$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse({:add, name, _type, _opts}), do: {:remove, name}$/;"	f
tag	deps/ecto/lib/ecto/type.ex	/^  defp tag(:binary, value),$/;"	f
tag	deps/ecto/lib/ecto/type.ex	/^  defp tag(_type, value),$/;"	f
tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def tag(name), do: tag(name, [])$/;"	f
tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def tag(name, attrs) when is_list(attrs) do$/;"	f
tag_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp tag_attrs([]), do: ""$/;"	f
tag_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp tag_attrs(attrs) do$/;"	f
tainted	deps/ecto/lib/ecto/pool.ex	/^  defp tainted(ref, bool) do$/;"	f
take_prefix	deps/exq/lib/exq/support/binary.ex	/^  def take_prefix(full, prefix) do$/;"	f
tear_alias	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp tear_alias(other), do: other$/;"	f
tear_alias	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp tear_alias({:__aliases__, meta, [h|t]}) do$/;"	f
tear_alias	deps/phoenix/lib/phoenix/socket.ex	/^  defp tear_alias(other), do: other$/;"	f
tear_alias	deps/phoenix/lib/phoenix/socket.ex	/^  defp tear_alias({:__aliases__, meta, [h|t]}) do$/;"	f
teardown	deps/exq/test/test_helper.exs	/^  def teardown do$/;"	f
telephone_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def telephone_input(form, field, opts \\\\ []) do$/;"	f
template	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defp template(conn, output) do$/;"	f
template_name	deps/phoenix/lib/phoenix/controller.ex	/^  defp template_name(name, _format) when is_binary(name), do:$/;"	f
template_name	deps/phoenix/lib/phoenix/controller.ex	/^  defp template_name(name, format) when is_atom(name), do:$/;"	f
template_not_found	deps/phoenix/lib/phoenix/template.ex	/^      def template_not_found(template, assigns) do$/;"	f
template_not_found	web/views/error_view.ex	/^  def template_not_found(_template, assigns) do$/;"	f
template_path_to_name	deps/phoenix/lib/phoenix/template.ex	/^  def template_path_to_name(path, root) do$/;"	f
terminate	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def terminate(_, %{conn: conn, shutdown: shutdown}) do$/;"	f
terminate	deps/ecto/lib/ecto/pools/poolboy/worker.ex	/^  def terminate(_reason, s), do: disconnect(s)$/;"	f
terminate	deps/ecto/lib/ecto/pools/sojourn_broker/worker.ex	/^  def terminate(_reason, %{conn: conn} = s) do$/;"	f
terminate	deps/exq/lib/exq/enqueuer/server.ex	/^  def terminate(_reason, state) do$/;"	f
terminate	deps/exq/lib/exq/manager/server.ex	/^  def terminate(_reason, state) do$/;"	f
terminate	deps/exq/lib/exq/stats/server.ex	/^  def terminate(_reason, _state) do$/;"	f
terminate	deps/exq/lib/exq/worker/server.ex	/^  def terminate(:normal, %State{manager: nil}), do: :ok$/;"	f
terminate	deps/exq/lib/exq/worker/server.ex	/^  def terminate(:normal, state) do$/;"	f
terminate	deps/exq/lib/exq/worker/server.ex	/^  def terminate(_error, %State{manager: nil}), do: :ok$/;"	f
terminate	deps/exq/lib/exq/worker/server.ex	/^  def terminate(error, state) do$/;"	f
terminate	deps/phoenix/lib/phoenix/channel.ex	/^      def terminate(_reason, _socket), do: :ok$/;"	f
terminate	deps/phoenix/lib/phoenix/channel.ex	/^  defcallback terminate(msg :: map, Socket.t) ::$/;"	c
terminate	deps/phoenix/lib/phoenix/channel/server.ex	/^  def terminate(reason, socket) do$/;"	f
terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def terminate(_reason,  _req, _state) do$/;"	f
terminate	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def terminate(_reason, _state) do$/;"	f
terminate	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def terminate(_reason, _state) do$/;"	f
terminate	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp terminate(reason, req, stack) do$/;"	f
test_adapters	deps/ecto/mix.exs	/^  defp test_adapters(args) do$/;"	f
test_paths	deps/ecto/mix.exs	/^  defp test_paths(_), do: ["test\/ecto", "test\/mix"]$/;"	f
test_paths	deps/ecto/mix.exs	/^  defp test_paths(adapter) when adapter in @adapters, do: ["integration_test\/#{adapter}"]$/;"	f
test_paths	deps/ecto/mix.exs	/^  defp test_paths(pool) when pool in @pools, do: ["test\/pool\/#{pool(pool)}"]$/;"	f
test_pools	deps/ecto/mix.exs	/^  defp test_pools(args) do$/;"	f
test_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp test_transaction(fun, repo, opts) do$/;"	f
test_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp test_transaction(pool, fun, log, opts) do$/;"	f
text	deps/phoenix/lib/phoenix/controller.ex	/^  def text(conn, data) do$/;"	f
text_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def text_input(form, field, opts \\\\ []) do$/;"	f
text_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def text_response(conn, status) do$/;"	f
textarea	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def textarea(form, field, opts \\\\ []) do$/;"	f
time	deps/ecto/lib/ecto/log_entry.ex	/^  defp time(_label, nil, _force), do: []$/;"	f
time	deps/ecto/lib/ecto/log_entry.ex	/^  defp time(label, time, force) do$/;"	f
time_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_builder(b, opts) do$/;"	f
time_for_rule	deps/tzdata/lib/tzdata/util.ex	/^  def time_for_rule(rule, year) do$/;"	f
time_modifier	deps/tzdata/lib/tzdata/util.ex	/^  def time_modifier(string) do$/;"	f
time_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def time_select(form, field, opts \\\\ []) do$/;"	f
time_to_ms	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp time_to_ms({mega, sec, micro}),$/;"	f
time_to_ms	deps/phoenix/lib/phoenix/utils.ex	/^  defp time_to_ms({mega, sec, micro}) do$/;"	f
time_to_score	deps/exq/lib/exq/redis/job_queue.ex	/^  def time_to_score(time) do$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{"hour" => hour, "min" => min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{hour: hour, min: min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(nil),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(other),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({_, {hour, min, sec, _msec}}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({_, {hour, min, sec}}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({hour, min, sec, _mseg}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({hour, min, sec}),$/;"	f
timestamp	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp timestamp do$/;"	f
timestamp	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp timestamp do$/;"	f
timestamp_tuple	deps/ecto/lib/ecto/model/timestamps.ex	/^  defp timestamp_tuple(_use_usec = false) do$/;"	f
timestamp_tuple	deps/ecto/lib/ecto/model/timestamps.ex	/^  defp timestamp_tuple(_use_usec = true) do$/;"	f
timestamps	deps/ecto/lib/ecto/migration.ex	/^  def timestamps(opts \\\\ []) do$/;"	f
timestamps	deps/ecto/lib/ecto/schema.ex	/^  defmacro timestamps(opts \\\\ []) do$/;"	a
timezone	deps/timex/lib/date/date.ex	/^  def timezone(:local, %DateTime{}=date),           do: Timezone.local(date)$/;"	f
timezone	deps/timex/lib/date/date.ex	/^  def timezone(:local, {{_,_,_},{_,_,_}}=datetime), do: Timezone.local(construct(datetime))$/;"	f
timezone	deps/timex/lib/date/date.ex	/^  def timezone(:utc, _),                            do: %TimezoneInfo{}$/;"	f
timezone	deps/timex/lib/date/date.ex	/^  defdelegate timezone(name, datetime),             to: Timezone, as: :get$/;"	d
tmp_path	deps/ecto/integration_test/support/file_helpers.exs	/^  def tmp_path do$/;"	f
to_12hour_clock	deps/timex/lib/time/time.ex	/^  def to_12hour_clock(hour) when hour in 0..24 do$/;"	f
to_24hour_clock	deps/timex/lib/time/time.ex	/^  def to_24hour_clock(hour, am_or_pm) when hour in 1..12 and am_or_pm in [:am, :pm] do$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("AM"), do: [AM: "AM"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("PM"), do: [AM: "PM"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("am"), do: [am: "am"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("pm"), do: [am: "pm"]$/;"	f
to_app_source	deps/phoenix/lib/mix/phoenix.ex	/^  defp to_app_source(app, source_dir) when is_atom(app),$/;"	f
to_app_source	deps/phoenix/lib/mix/phoenix.ex	/^  defp to_app_source(path, source_dir) when is_binary(path),$/;"	f
to_args	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp to_args(all_opts) do$/;"	f
to_changeset	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_changeset(%Ecto.Changeset{} = changeset, _module, _cast), do: changeset$/;"	f
to_changeset	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_changeset(%{} = model, module, cast), do: apply(module, cast, [model, :empty])$/;"	f
to_char_list	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp to_char_list(cowboy_options, key) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{mariadb: %{code: 1062, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{mariadb: %{code: code, message: message}})$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :foreign_key_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :foreign_key_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :unique_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :unique_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback to_constraints(Exception.t) :: Keyword.t$/;"	c
to_date	deps/ecto/lib/ecto/datetime.ex	/^  def to_date(%Ecto.DateTime{year: year, month: month, day: day}) do$/;"	f
to_days	deps/timex/lib/date/date.ex	/^  def to_days(%DateTime{:year => y, :month => m, :day => d}, :zero) do$/;"	f
to_days	deps/timex/lib/date/date.ex	/^  def to_days(date, :epoch), do: to_days(date, :zero) - to_days(epoch(), :zero)$/;"	f
to_days	deps/timex/lib/date/date.ex	/^  def to_days(date, reference \\\\ :epoch)$/;"	f
to_days	deps/timex/lib/time/time.ex	/^    def to_days(value, unquote(type)),  do: do_round(value * unquote(coef) \/ @secs_in_day)$/;"	f
to_days	deps/timex/lib/time/time.ex	/^  def to_days(timestamp), do: to_secs(timestamp) \/ @secs_in_day$/;"	f
to_erl	deps/ecto/lib/ecto/datetime.ex	/^  def to_erl(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec}) do$/;"	f
to_erl	deps/ecto/lib/ecto/datetime.ex	/^  def to_erl(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
to_erl	deps/ecto/lib/ecto/datetime.ex	/^  def to_erl(%Ecto.Time{hour: hour, min: min, sec: sec}) do$/;"	f
to_erlang_datetime	deps/timex/lib/date/date_convert.ex	/^  def to_erlang_datetime(%DateTime{:year => y, :month => m, :day => d, :hour => h, :minute => min, :second => sec}) do$/;"	f
to_erlang_datetime	deps/timex/lib/date/date_convert.ex	/^  def to_erlang_datetime(date)$/;"	f
to_field	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp to_field(field), do: {{:., [], [{:&, [], [0]}, field]}, [], []}$/;"	f
to_form	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_form(%Ecto.Changeset{model: model, params: params} = changeset, opts) do$/;"	f
to_form	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_form(source, form, field, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(conn, form, field, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(conn, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(data, form, field, options)$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(data, options)$/;"	f
to_gregorian	deps/timex/lib/date/date_convert.ex	/^  def to_gregorian($/;"	f
to_gregorian	deps/timex/lib/date/date_convert.ex	/^  def to_gregorian(date)$/;"	f
to_hex	deps/uuid/lib/uuid.ex	/^  defp to_hex(i) when i < 10 do$/;"	f
to_hex	deps/uuid/lib/uuid.ex	/^  defp to_hex(i) when i >= 10 and i < 16 do$/;"	f
to_hex_str	deps/uuid/lib/uuid.ex	/^  defp to_hex_str(n) when n < 256 do$/;"	f
to_hours	deps/timex/lib/time/time.ex	/^    def to_hours(value, unquote(type)), do: do_round(value * unquote(coef) \/ @secs_in_hour)$/;"	f
to_hours	deps/timex/lib/time/time.ex	/^  def to_hours(timestamp), do: to_secs(timestamp) \/ @secs_in_hour$/;"	f
to_i	deps/ecto/lib/ecto/datetime.ex	/^  def to_i(bin) when is_binary(bin) do$/;"	f
to_i	deps/ecto/lib/ecto/datetime.ex	/^  def to_i(int) when is_integer(int), do: int$/;"	f
to_i	deps/ecto/lib/ecto/datetime.ex	/^  def to_i(nil), do: nil$/;"	f
to_int	deps/tzdata/lib/tzdata/util.ex	/^  def to_int(string) do elem(Integer.parse(string),0) end$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?0 <= c and c <= ?9 do$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?A <= c and c <= ?F do$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?a <= c and c <= ?f do$/;"	f
to_iodata	deps/ecto/lib/ecto/log_entry.ex	/^  def to_iodata(entry) do$/;"	f
to_iodata	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_iodata(t) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?"), do: "&quot;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?&), do: "&amp;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?'), do: "&#39;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?<), do: "&lt;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?>), do: "&gt;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata([]) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata([h|t]) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(atom), do: Plug.HTML.html_escape(Atom.to_string(atom))$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data)$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data), do: Integer.to_string(data)$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(h) when is_binary(h) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(h) when is_integer(h) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(nil),  do: ""$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(other) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata({:safe, data}) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata({:safe, data}), do: data$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  defdelegate to_iodata(data), to: Plug.HTML, as: :html_escape$/;"	d
to_iso8601	deps/ecto/lib/ecto/datetime.ex	/^  def to_iso8601(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_iso8601	deps/ecto/lib/ecto/datetime.ex	/^  def to_iso8601(date) do$/;"	f
to_iso8601	deps/ecto/lib/ecto/datetime.ex	/^  def to_iso8601(time) do$/;"	f
to_job_json	deps/exq/lib/exq/redis/job_queue.ex	/^  def to_job_json(queue, "Elixir." <> worker, args, enqueued_at) do$/;"	f
to_job_json	deps/exq/lib/exq/redis/job_queue.ex	/^  def to_job_json(queue, worker, args) do$/;"	f
to_job_json	deps/exq/lib/exq/redis/job_queue.ex	/^  def to_job_json(queue, worker, args, enqueued_at) do$/;"	f
to_job_json	deps/exq/lib/exq/redis/job_queue.ex	/^  def to_job_json(queue, worker, args, enqueued_at) when is_atom(worker) do$/;"	f
to_json	deps/exq/lib/exq/support/job.ex	/^  def to_json(job) do$/;"	f
to_list	deps/ecto/lib/ecto/query/inspect.ex	/^  defp to_list(query) do$/;"	f
to_lower_char	deps/ecto/lib/ecto/association.ex	/^  defp to_lower_char(char) when char in ?A..?Z, do: char + 32$/;"	f
to_lower_char	deps/ecto/lib/ecto/association.ex	/^  defp to_lower_char(char), do: char$/;"	f
to_lower_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_lower_char(char) when char in ?A..?Z, do: char + 32$/;"	f
to_lower_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_lower_char(char), do: char$/;"	f
to_lower_char	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_lower_char(char) when char in ?A..?Z, do: char + 32$/;"	f
to_lower_char	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_lower_char(char), do: char$/;"	f
to_map	deps/phoenix/lib/phoenix/controller.ex	/^  defp to_map(assigns) when is_list(assigns), do: :maps.from_list(assigns)$/;"	f
to_map	deps/phoenix/lib/phoenix/controller.ex	/^  defp to_map(assigns) when is_map(assigns), do: assigns$/;"	f
to_map	deps/phoenix/lib/phoenix/controller.ex	/^  defp to_map(assigns), do: Dict.merge(%{}, assigns)$/;"	f
to_map	deps/phoenix/lib/phoenix/view.ex	/^  defp to_map(assigns) when is_list(assigns), do: :maps.from_list(assigns)$/;"	f
to_map	deps/phoenix/lib/phoenix/view.ex	/^  defp to_map(assigns) when is_map(assigns), do: assigns$/;"	f
to_map	deps/phoenix/lib/phoenix/view.ex	/^  defp to_map(assigns), do: Dict.merge(%{}, assigns)$/;"	f
to_mins	deps/timex/lib/time/time.ex	/^    def to_mins(value, unquote(type)),  do: do_round(value * unquote(coef) \/ @secs_in_min)$/;"	f
to_mins	deps/timex/lib/time/time.ex	/^  def to_mins(timestamp), do: to_secs(timestamp) \/ @secs_in_min$/;"	f
to_month	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month(month) when is_integer(month), do: [month: month]$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["April", "Apr"],     do: to_month(4)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["August", "Aug"],    do: to_month(8)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["December", "Dec"],  do: to_month(12)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["February", "Feb"],  do: to_month(2)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["January", "Jan"],   do: to_month(1)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["July", "Jul"],      do: to_month(7)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["June", "Jun"],      do: to_month(6)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["March", "Mar"],     do: to_month(3)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["May", "May"],       do: to_month(5)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["November", "Nov"],  do: to_month(11)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["October", "Oct"],   do: to_month(10)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["September", "Sep"], do: to_month(9)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(nil), do: fail("Invalid month value.")$/;"	f
to_msecs	deps/timex/lib/time/time.ex	/^    def to_msecs(value, unquote(type)), do: do_round(value * unquote(coef) * @msecs_in_sec)$/;"	f
to_msecs	deps/timex/lib/time/time.ex	/^  def to_msecs({_, _, _} = ts), do: to_usecs(ts) \/ @usecs_in_msec$/;"	f
to_olson	deps/timex/lib/timezone/database.ex	/^      def to_olson(unquote(key)), do: unquote(value)$/;"	f
to_olson	deps/timex/lib/timezone/database.ex	/^  def to_olson(_tz), do: nil$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}) when is_binary(key), do: key$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}) when is_integer(key), do: Integer.to_string(key)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}), do: Phoenix.Param.to_param(key)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => nil}) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}) when is_binary(id), do: id$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}) when is_integer(id), do: Integer.to_string(id)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}), do: Phoenix.Param.to_param(id)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: nil}) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(atom) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(bin) when is_binary(bin), do: bin$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(data) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(int), do: Integer.to_string(int)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(map) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(map) when is_map(map) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(nil) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(term)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(bin) when is_binary(bin), do: bin$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(data), do: Phoenix.Param.to_param(data)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(false), do: "false"$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(int) when is_integer(int), do: Integer.to_string(int)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(true), do: "true"$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  defp to_port(binary)  when is_binary(binary),   do: String.to_integer(binary)$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  defp to_port(integer) when is_integer(integer), do: integer$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  defp to_port(nil) do$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/server.ex	/^  defp to_port({:system, env_var}), do: to_port(System.get_env(env_var))$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(data)$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(from = {source, model}) when is_binary(source) and is_atom(model),$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(module) do$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(query), do: query$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(source) when is_binary(source),$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(expr, line) do$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(literal, _line) when is_binary(literal) or is_atom(literal) or is_number(literal) do$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(literal, line) when is_list(literal) do$/;"	f
to_sec_ms	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_sec_ms(sec, fraction) do$/;"	f
to_secs	deps/timex/lib/date/date.ex	/^  def to_secs(date, :epoch, utc: false), do: to_secs(date, :zero, utc: false) - epoch(:secs)$/;"	f
to_secs	deps/timex/lib/date/date.ex	/^  def to_secs(date, :epoch, utc: true), do: to_secs(date, :zero) - epoch(:secs)$/;"	f
to_secs	deps/timex/lib/date/date.ex	/^  def to_secs(date, :zero, utc: false), do: utc_to_secs(date)$/;"	f
to_secs	deps/timex/lib/date/date.ex	/^  def to_secs(date, :zero, utc: true) do$/;"	f
to_secs	deps/timex/lib/date/date.ex	/^  def to_secs(date, reference \\\\ :epoch, options \\\\ [utc: true])$/;"	f
to_secs	deps/timex/lib/time/time.ex	/^    def to_secs(value, unquote(type)),  do: do_round(value * unquote(coef))$/;"	f
to_secs	deps/timex/lib/time/time.ex	/^  def to_secs({_, _, _} = ts), do: to_usecs(ts) \/ @usecs_in_sec$/;"	f
to_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  def to_sql(kind, repo, queryable) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :inf}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :qNaN}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :sNaN}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :normal) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :raw) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :scientific) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(dec) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(num, type \\\\ :scientific)$/;"	f
to_string	deps/ecto/lib/ecto/datetime.ex	/^  def to_string(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_string	deps/ecto/lib/ecto/datetime.ex	/^  def to_string(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
to_string	deps/ecto/lib/ecto/datetime.ex	/^  def to_string(%Ecto.Time{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_string	deps/ecto/lib/ecto/datetime.ex	/^  def to_string(dt) do$/;"	f
to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  def to_string(query) do$/;"	f
to_time	deps/ecto/lib/ecto/datetime.ex	/^  def to_time(%Ecto.DateTime{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_timestamp	deps/timex/lib/date/date.ex	/^  def to_timestamp(date, :epoch) do$/;"	f
to_timestamp	deps/timex/lib/date/date.ex	/^  def to_timestamp(date, :zero) do$/;"	f
to_timestamp	deps/timex/lib/date/date.ex	/^  def to_timestamp(date, reference \\\\ :epoch)$/;"	f
to_timestamp	deps/timex/lib/time/time.ex	/^    def to_timestamp(value, unquote(type)), do: from(value, unquote(type))$/;"	f
to_topic_match	deps/phoenix/lib/phoenix/socket.ex	/^  defp to_topic_match(topic_pattern) do$/;"	f
to_upper_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_upper_char(char) when char in ?a..?z, do: char - 32$/;"	f
to_upper_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_upper_char(char), do: char$/;"	f
to_usecs	deps/timex/lib/time/time.ex	/^    def to_usecs(value, unquote(type)), do: do_round(value * unquote(coef) * @usecs_in_sec)$/;"	f
to_usecs	deps/timex/lib/time/time.ex	/^  def to_usecs({mega, sec, micro}), do: (mega * @million + sec) * @million + micro$/;"	f
to_weekday	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_weekday(name) do$/;"	f
to_weeks	deps/timex/lib/time/time.ex	/^    def to_weeks(value, unquote(type)), do: do_round(value * unquote(coef) \/ @secs_in_week)$/;"	f
to_weeks	deps/timex/lib/time/time.ex	/^  def to_weeks(timestamp), do: to_secs(timestamp) \/ @secs_in_week$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(""),$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(<<?", quoted :: binary>>),$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(token),$/;"	f
tokenize	deps/timex/lib/format/datetime/formatter.ex	/^  defcallback tokenize(format_string :: String.t) :: {:ok, [%Directive{}]} | {:error, term}$/;"	c
tokenize	deps/timex/lib/format/datetime/formatters/default.ex	/^  defdelegate tokenize(format_string), to: Tokenizer$/;"	d
tokenize	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  defdelegate tokenize(format_string), to: Strftime$/;"	d
tokenize	deps/timex/lib/parse/datetime/tokenizer.ex	/^  defcallback tokenize(format_string :: String.t) :: [%Directive{}] | {:error, term}$/;"	c
tokenize	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def tokenize(<<>>), do: {:error, "Format string cannot be empty."}$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def tokenize(str) do$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def tokenize(<<>>), do: {:error, "Format string cannot be empty."}$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def tokenize(str) do$/;"	f
too_long	deps/ecto/lib/ecto/changeset.ex	/^  defp too_long(_length, value, opts), do:$/;"	f
too_long	deps/ecto/lib/ecto/changeset.ex	/^  defp too_long(length, value, _opts) when length <= value, do: nil$/;"	f
too_short	deps/ecto/lib/ecto/changeset.ex	/^  defp too_short(_length, value, opts), do:$/;"	f
too_short	deps/ecto/lib/ecto/changeset.ex	/^  defp too_short(length, value, _opts) when length >= value, do: nil$/;"	f
touch	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  def touch do$/;"	f
touch_if_exists	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp touch_if_exists(path) do$/;"	f
transaction	deps/ecto/lib/ecto/adapter/transaction.ex	/^  defcallback transaction(Ecto.Repo.t, Keyword.t, fun) :: {:ok, any} | {:error, any}$/;"	c
transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^      def transaction(repo, opts, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  def transaction(repo, opts, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp transaction(repo, ref, mod, mode, queue_time, timeout, opts, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/pool.ex	/^  def transaction(pool_mod, pool, timeout, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/repo.ex	/^      def transaction(opts \\\\ [], fun) when is_list(opts) do$/;"	f
transaction	deps/ecto/lib/ecto/repo.ex	/^  defcallback transaction(Keyword.t, fun) :: {:ok, any} | {:error, any}$/;"	c
transaction_mode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp transaction_mode(Sandbox, pool, timeout), do: Sandbox.mode(pool, timeout)$/;"	f
transaction_mode	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp transaction_mode(_, _, _), do: :raw$/;"	f
transaction_required?	deps/ecto/lib/ecto/repo/model.ex	/^  defp transaction_required?(model, embeds, assocs, callbacks) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, _keys, _as, _options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, [as], options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, as, options) when is_atom(as) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, as, options) when is_map(as) do$/;"	f
transform_map	deps/poison/lib/poison/decoder.ex	/^  defp transform_map(value, keys, as, options) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row(_, _from, values) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row(list, from, values) when is_list(list) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row({:%{}, _, pairs}, from, values) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row({:&, _, [0]}, from, values) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row({:{}, _, list}, from, values) do$/;"	f
transform_row	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp transform_row({left, right}, from, values) do$/;"	f
transform_rule_at	deps/tzdata/lib/tzdata/util.ex	/^  def transform_rule_at("0"), do: transform_rule_at "0:00"$/;"	f
transform_rule_at	deps/tzdata/lib/tzdata/util.ex	/^  def transform_rule_at(string) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, _keys, as, options) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, keys, as, options) when keys in [:atoms, :atoms!] do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_date, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_date_time, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_month, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_only, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(input_date_string) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(nil), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules("-"), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules("0"), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string) do$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string, false), do: {:named_rules, string}$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string, true) do$/;"	f
translate	deps/plug/lib/plug/adapters/translator.ex	/^  def translate(_min_level, _level, _kind, _data) do$/;"	f
translate	deps/plug/lib/plug/adapters/translator.ex	/^  def translate(min_level, :error, :format,$/;"	f
translate_ranch	deps/plug/lib/plug/adapters/translator.ex	/^  defp translate_ranch(_min_level, ref, protocol, pid, reason) do$/;"	f
translate_ranch	deps/plug/lib/plug/adapters/translator.ex	/^  defp translate_ranch(min_level, _ref, :cowboy_protocol, pid,$/;"	f
transport	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro transport(name, module, config \\\\ []) do$/;"	a
transport_dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp transport_dispatch(endpoint, server_ref, msg, opts) do$/;"	f
transport_log	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def transport_log(conn, level) do$/;"	f
traverse_exprs	deps/ecto/lib/ecto/query/planner.ex	/^  defp traverse_exprs(original, operation, acc, fun) do$/;"	f
trim_secret	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp trim_secret(secret) do$/;"	f
trim_zeros	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp trim_zeros([0|tail]), do: trim_zeros(tail)$/;"	f
trim_zeros	deps/postgrex/lib/postgrex/extensions/binary.ex	/^  defp trim_zeros(list), do: list$/;"	f
truncate	deps/decimal/lib/decimal.ex	/^  defp truncate(coef, exp) when exp < 0 do$/;"	f
truncate	deps/decimal/lib/decimal.ex	/^  defp truncate(coef, exp) when exp >= 0 do$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([], %ParserState{line: line, column: col} = state, _) do$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([], _, %ParserState{status: :ok} = success),            do: success$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([_|_], _, %ParserState{status: :ok} = success),         do: success$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([parser|rest], state, %ParserState{}),                  do: try_choice(rest, state, parser.(state))$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([parser|rest], state, nil),                             do: try_choice(rest, state, parser.(state))$/;"	f
try_expansion	deps/ecto/lib/ecto/query/builder.ex	/^  defp try_expansion(expr, type, params, vars, env) do$/;"	f
type	deps/ecto/integration_test/support/types.exs	/^  def type, do: :id$/;"	f
type	deps/ecto/lib/ecto/datetime.ex	/^  def type, do: :date$/;"	f
type	deps/ecto/lib/ecto/datetime.ex	/^  def type, do: :datetime$/;"	f
type	deps/ecto/lib/ecto/datetime.ex	/^  def type, do: :time$/;"	f
type	deps/ecto/lib/ecto/query/api.ex	/^  def type(interpolated_value, type), do: doc! [interpolated_value, type]$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^        def type, do: :integer$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type(type) do$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type(type)$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type({:array, type}), do: {:array, type(type)}$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  defcallback type :: t$/;"	c
type	deps/ecto/lib/ecto/uuid.ex	/^  def type, do: :uuid$/;"	f
type	deps/plug/lib/plug/mime.ex	/^    def type(unquote(ext)), do: unquote(type)$/;"	f
type	deps/plug/lib/plug/mime.ex	/^  def type(_ext), do: @default_type$/;"	f
type	deps/plug/lib/plug/mime.ex	/^  def type(file_extension)$/;"	f
type!	deps/ecto/lib/ecto/changeset.ex	/^  defp type!(types, key) do$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(_kind, _query, _expr, nil, _field), do: :any$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(kind, query, expr, model, field) when is_atom(model) do$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(kind, query, expr, source, field) when is_integer(source) do$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(:pull, type), do: {:in_array, type}$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(:push, type), do: {:in_array, type}$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(_, type),     do: type$/;"	f
type_for_param!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type_for_param!(_kind, _query, _expr, type) do$/;"	f
type_for_param!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type_for_param!(kind, query, expr, {composite, {ix, field}}) when is_integer(ix) do$/;"	f
type_for_param!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type_for_param!(kind, query, expr, {ix, field}) when is_integer(ix) do$/;"	f
types	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp types(attrs) do$/;"	f
tz_day_to_int	deps/tzdata/lib/tzdata/util.ex	/^  def tz_day_to_int(year, month, day) do$/;"	f
tzdata_to_timezone	deps/timex/lib/timezone/timezone.ex	/^  defp tzdata_to_timezone(%{from: %{standard: from}, std_off: std_off_secs, until: %{standard: until}, utc_off: utc_off_secs, zone_abbr: abbr} = _tzdata, zone) do$/;"	f
tzdata_version	deps/tzdata/lib/tzdata.ex	/^  def tzdata_version, do: Tzdata.ReleaseReader.release_version$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(from = {source, model}) do$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(nil),           do: "query"$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from({nil, model}),  do: inspect model$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from({source, nil}), do: inspect source$/;"	f
uncomment_expiry_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp uncomment_expiry_line(line) do$/;"	f
underscore	deps/ecto/lib/ecto/association.ex	/^  defp underscore(""), do: ""$/;"	f
underscore	deps/ecto/lib/ecto/association.ex	/^  defp underscore(<<h, t :: binary>>) do$/;"	f
underscore	deps/phoenix/lib/phoenix/naming.ex	/^  def underscore(""), do: ""$/;"	f
underscore	deps/phoenix/lib/phoenix/naming.ex	/^  def underscore(<<h, t :: binary>>) do$/;"	f
underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp underscore(<<>>), do: ""$/;"	f
underscore	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp underscore(<<h, t :: binary>>) do$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query(other) do$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query({:%, _, [Query, {:%{}, _, list}]}) do$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query({:%{}, _, list} = ast) do$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract([], [], _fun),                   do: []$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract([h1|structs], [[_|t1]|t2], fun), do: [fun.([h1|t1])|unextract(structs, t2, fun)]$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract(structs, [[nil|_]=h2|t2], fun),  do: [fun.(h2)|unextract(structs, t2, fun)]$/;"	f
unfold_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp unfold_in(%Ecto.Query.Tagged{value: value, type: {:array, type}}, acc),$/;"	f
unfold_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp unfold_in([], _type, acc),$/;"	f
unfold_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp unfold_in([h|t], type, acc),$/;"	f
unfold_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp unfold_in(value, acc) when is_list(value),$/;"	f
unique_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def unique_constraint(changeset, field, opts \\\\ []) do$/;"	f
unique_ids	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unique_ids(structs, module, assoc) do$/;"	f
unique_index	deps/ecto/lib/ecto/migration.ex	/^  def unique_index(table, columns, opts \\\\ []) when is_atom(table) and is_list(columns) do$/;"	f
universal	deps/timex/lib/date/date.ex	/^  def universal(date), do: Timezone.convert(date, %TimezoneInfo{})$/;"	f
universal	deps/timex/lib/date/date.ex	/^  defdelegate universal, to: __MODULE__, as: :now$/;"	d
unix	deps/timex/lib/parse/datetime/parsers.ex	/^  def unix(opts \\\\ []) do$/;"	f
unlisten	deps/postgrex/lib/postgrex/connection.ex	/^  def unlisten(pid, ref, opts \\\\ []) do$/;"	f
unlisten!	deps/postgrex/lib/postgrex/connection.ex	/^  def unlisten!(pid, ref, opts \\\\ []) do$/;"	f
unlock	deps/postgrex/lib/postgrex/type_server.ex	/^  def unlock(ref) do$/;"	f
unmasked_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp unmasked_csrf_token do$/;"	f
unmerge_fragments	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unmerge_fragments([{:raw, s}, {:expr, v}|t], frag, args, names, params) do$/;"	f
unmerge_fragments	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unmerge_fragments([{:raw, s}], frag, args, _names, _params) do$/;"	f
unpad_message	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp unpad_message(msg) do$/;"	f
unpublished_by_title	deps/ecto/lib/ecto/query/api.ex	/^      def unpublished_by_title(title) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      def unquote(name)(parser, unquote_splicing(other_args)) when is_function(parser, 1) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      def unquote(name)(unquote_splicing(other_args)) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      defp unquote(call) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      defp unquote(impl_name)(%Combine.ParserState{status: :error} = state, unquote_splicing(other_args)), do: state$/;"	f
unquote	deps/ecto/lib/ecto/model/callbacks.ex	/^        def unquote(event)(changeset), do: unquote(body)$/;"	f
unquote	deps/phoenix/lib/phoenix/router.ex	/^        defp unquote(plug)(unquote(conn), _) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router.ex	/^    defmacro unquote(verb)(path, plug, plug_opts, options \\\\ []) do$/;"	a
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_path")(conn_or_endpoint, unquote(opts), unquote_splicing(vars)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_path")(conn_or_endpoint, unquote(opts), unquote_splicing(vars), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_url")(conn_or_endpoint, unquote(opts), unquote_splicing(vars)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_url")(conn_or_endpoint, unquote(opts), unquote_splicing(vars), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/template.ex	/^      defp unquote(defp)(var!(assigns)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/test/conn_test.ex	/^    defmacro unquote(method)(conn, path_or_action, params_or_body \\\\ nil) do$/;"	a
unquote	deps/timex/lib/time/time.ex	/^    def unquote(name)({hours, minutes, seconds}, :hms), do: unquote(name)(hours * @secs_in_hour + minutes * @secs_in_min + seconds, :secs)$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token("\\r\\n" <> t, acc),$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<>>, acc),$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, _ :: binary>>, _acc) when h in @specials or h < 32 or h === 127,$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, t :: binary>>, acc) when h in @space,$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, t :: binary>>, acc),$/;"	f
unsubscribe	deps/exq/lib/exq.ex	/^  def unsubscribe(pid, queue) do$/;"	f
unsubscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def unsubscribe(pid, topic) do$/;"	f
unsubscribe	deps/phoenix/lib/phoenix/pubsub.ex	/^  def unsubscribe(server, pid, topic) when is_atom(server),$/;"	f
unsubscribe	deps/phoenix/lib/phoenix/pubsub/local.ex	/^  def unsubscribe(local_server, pid, topic) when is_atom(local_server) do$/;"	f
unsuffix	deps/phoenix/lib/phoenix/naming.ex	/^  def unsuffix(value, suffix) do$/;"	f
unwrap	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp unwrap(%Ecto.Query.Tagged{value: value}), do: value$/;"	f
unwrap	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp unwrap(value), do: value$/;"	f
unwrap	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp unwrap(value), do: value$/;"	f
unwrap	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp unwrap({:safe, value}), do: value$/;"	f
up	deps/ecto/integration_test/cases/migrator.exs	/^      def up do$/;"	f
up	deps/ecto/integration_test/cases/migrator.exs	/^    def up do$/;"	f
up	deps/ecto/integration_test/sql/migration.exs	/^    def up do$/;"	f
up	deps/ecto/lib/ecto/migration.ex	/^        def up do$/;"	f
up	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def up(repo, version) do$/;"	f
up	deps/ecto/lib/ecto/migrator.ex	/^        def up do$/;"	f
up	deps/ecto/lib/ecto/migrator.ex	/^  def up(repo, version, module, opts \\\\ []) do$/;"	f
up	deps/ecto/lib/ecto/storage.ex	/^  def up(repo) do$/;"	f
update	_build/dev/lib/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update	_build/dev/lib/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update	deps/ecto/integration_test/cases/migrator.exs	/^      defp update(fun) do$/;"	f
update	deps/ecto/lib/ecto.ex	/^      def update(id, params) do$/;"	f
update	deps/ecto/lib/ecto/adapter.ex	/^  defcallback update(repo, model_meta, fields, filters, autogenerate_id, returning, options) ::$/;"	c
update	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update(prefix, table, fields, filters, _returning) do$/;"	f
update	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def update(prefix, table, fields, filters, returning) do$/;"	f
update	deps/ecto/lib/ecto/adapters/sql.ex	/^      def update(repo, %{source: {prefix, source}}, fields, filter, _autogenerate, returning, opts) do$/;"	f
update	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback update(prefix :: String.t, table :: String.t, fields :: [atom],$/;"	c
update	deps/ecto/lib/ecto/query.ex	/^  defmacro update(query, binding, expr) do$/;"	a
update	deps/ecto/lib/ecto/repo.ex	/^      def update(model, opts \\\\ []) do$/;"	f
update	deps/ecto/lib/ecto/repo.ex	/^  defcallback update(Ecto.Model.t | Ecto.Changeset.t, Keyword.t) ::$/;"	c
update	deps/ecto/lib/ecto/repo/model.ex	/^  def update(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
update	deps/ecto/lib/ecto/repo/model.ex	/^  def update(repo, adapter, %{__struct__: model} = struct, opts) when is_list(opts) do$/;"	f
update	deps/phoenix/lib/phoenix/config.ex	/^  defp update(module, config) do$/;"	f
update	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update!	deps/ecto/lib/ecto/repo.ex	/^      def update!(model, opts \\\\ []) do$/;"	f
update!	deps/ecto/lib/ecto/repo.ex	/^  defcallback update!(Ecto.Model.t, Keyword.t) :: Ecto.Model.t | no_return$/;"	c
update!	deps/ecto/lib/ecto/repo/model.ex	/^  def update!(repo, adapter, model_or_changeset, opts) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update_all(query) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def update_all(query) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/sql/query.ex	/^  defcallback update_all(Ecto.Query.t) :: String.t$/;"	c
update_all	deps/ecto/lib/ecto/repo.ex	/^      def update_all(queryable, updates, opts \\\\ []) do$/;"	f
update_all	deps/ecto/lib/ecto/repo.ex	/^  defcallback update_all(Macro.t, Keyword.t, Keyword.t) :: {integer, nil} | no_return$/;"	c
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def update_all(repo, adapter, queryable, [], opts) when is_list(opts) do$/;"	f
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def update_all(repo, adapter, queryable, updates, opts) when is_list(opts) do$/;"	f
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp update_all(repo, adapter, queryable, opts) do$/;"	f
update_attribute	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_attribute(module, attr, fun) do$/;"	f
update_change	deps/ecto/lib/ecto/changeset.ex	/^  def update_change(%Changeset{changes: changes} = changeset, key, function) when is_atom(key) do$/;"	f
update_changeset	deps/ecto/lib/ecto.ex	/^      def update_changeset(user, params) do$/;"	f
update_changeset	deps/ecto/lib/ecto/repo/model.ex	/^  defp update_changeset(%{action: given}, _source, action, repo, _opts) when given != nil and given != action,$/;"	f
update_changeset	deps/ecto/lib/ecto/repo/model.ex	/^  defp update_changeset(changeset, source, action, repo, opts),$/;"	f
update_context	deps/decimal/lib/decimal.ex	/^  def update_context(fun) when is_function(fun, 1) do$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{cookies: %Unfetched{}} = conn, _fun),$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{cookies: cookies} = conn, fun),$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{state: :sent}, _fun),$/;"	f
update_date	deps/timex/lib/parse/datetime/parser.ex	/^  defp update_date(%DateTime{year: year, hour: hh} = date, token, value, tokenizer) when is_atom(token) do$/;"	f
update_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_expr(%Query{joins: []}, {table, name, _model}) do$/;"	f
update_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_expr(_query, {table, _name, _model}) do$/;"	f
update_fields	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_fields(%Query{updates: updates} = query, sources) do$/;"	f
update_fields	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_fields(%Query{updates: updates} = query, sources) do$/;"	f
update_filter	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_filter(%Query{joins: []}, _sources), do: []$/;"	f
update_filter	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_filter(query, sources) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([{:context, context}|t], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([{:prefix, prefix}|t], %{source: {_, source}} = meta) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([{:source, source}|t], %{source: {prefix, _}} = meta) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([{:state, state}|t], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto/model.ex	/^  defp update_meta([{k, _}], _meta) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(:inc, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(:set, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(command, _key, _value, _sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:inc, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:pull, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:push, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:set, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(command, _key, _value, _sources, query) do$/;"	f
update_parent_key	deps/ecto/lib/ecto/association.ex	/^  defp update_parent_key(changeset, :delete, _key, _value),$/;"	f
update_parent_key	deps/ecto/lib/ecto/association.ex	/^  defp update_parent_key(changeset, _action, key, value),$/;"	f
update_pipes	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_pipes(module, fun) do$/;"	f
update_req_header	deps/plug/lib/plug/conn.ex	/^  def update_req_header(%Conn{state: :sent}, _key, _initial, _fun) do$/;"	f
update_req_header	deps/plug/lib/plug/conn.ex	/^  def update_req_header(%Conn{} = conn, key, initial, fun) when$/;"	f
update_resp_header	deps/plug/lib/plug/conn.ex	/^  def update_resp_header(%Conn{state: :sent}, _key, _initial, _fun) do$/;"	f
update_resp_header	deps/plug/lib/plug/conn.ex	/^  def update_resp_header(%Conn{} = conn, key, initial, fun) when$/;"	f
update_stack	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_stack(module, fun) do$/;"	f
update_worker_count	deps/exq/lib/exq/manager/server.ex	/^  def update_worker_count(work_table, queue, delta) do$/;"	f
upgrade	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def upgrade(req, env, __MODULE__, {handler, opts}) do$/;"	f
upgrade	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  def upgrade(req, env, __MODULE__, {transport, plug, opts}) do$/;"	f
upper_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp upper_impl(%ParserState{status: :ok} = state) do$/;"	f
uri_to_string	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp uri_to_string(uri) do$/;"	f
url	deps/phoenix/lib/phoenix/controller.ex	/^  defp url(opts) do$/;"	f
url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def url do$/;"	f
url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def url(endpoint) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def url(data) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %Conn{private: private}) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %Socket{endpoint: endpoint}) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %URI{} = uri) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, endpoint) when is_atom(endpoint) do$/;"	f
url	deps/plug/lib/plug/debugger.ex	/^  defp url(%Plug.Conn{scheme: scheme, host: host, port: port} = conn), do:$/;"	f
url_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def url_input(form, field, opts \\\\ []) do$/;"	f
usec	deps/ecto/lib/ecto/datetime.ex	/^  def usec("." <> rest) do$/;"	f
usec	deps/ecto/lib/ecto/datetime.ex	/^  def usec(_), do: nil$/;"	f
usec	deps/ecto/lib/ecto/datetime.ex	/^  def usec(rest) when is_iso_8601(rest), do: 0$/;"	f
using	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp using(%Query{joins: []}, _sources), do: []$/;"	f
using	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp using(%Query{joins: joins} = query, sources) do$/;"	f
utc	deps/ecto/lib/ecto/datetime.ex	/^  def utc do$/;"	f
utc_to_secs	deps/timex/lib/date/date.ex	/^  defp utc_to_secs(%DateTime{:year => y, :month => m, :day => d, :hour => h, :minute => min, :second => s}) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(<<clock_seq::14>>, <<node::48>>, format) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(_, _, _) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(clock_seq, node, format \\\\ :default)$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(format \\\\ :default) do$/;"	f
uuid1_clockseq	deps/uuid/lib/uuid.ex	/^  defp uuid1_clockseq() do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node() do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node([{_if_name, if_config} | rest]) do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node(_) do$/;"	f
uuid1_time	deps/uuid/lib/uuid.ex	/^  defp uuid1_time() do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:dns, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:nil, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:oid, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:url, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:x500, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(<<uuid::binary>>, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(_, _, _) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(namespace_or_uuid, name, format \\\\ :default)$/;"	f
uuid4	deps/uuid/lib/uuid.ex	/^  def uuid4(format \\\\ :default) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:dns, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:nil, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:oid, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:url, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:x500, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(<<uuid::binary>>, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(_, _, _) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(namespace_or_uuid, name, format \\\\ :default)$/;"	f
uuid_string_to_hex_pair	deps/uuid/lib/uuid.ex	/^  defp uuid_string_to_hex_pair(<<uuid::binary>>) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u0::32, u1::16, u2::16, u3::16, u4::48>>, :default) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u::128>>, :hex) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u::128>>, :urn) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(_u, format) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(_u, format) when format in [:default, :hex, :urn] do$/;"	f
valid?	deps/plug/lib/plug/mime.ex	/^  def valid?(type) do$/;"	f
valid_csrf_token?	deps/plug/lib/plug/csrf_protection.ex	/^  defp valid_csrf_token?(<<csrf_token::@encoded_token_size-binary>>,$/;"	f
valid_csrf_token?	deps/plug/lib/plug/csrf_protection.ex	/^  defp valid_csrf_token?(_csrf_token, _user_token), do: false$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<>>), do: true$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<_, t::binary>>), do: valid_header_key?(t)$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<h, _::binary>>) when h in ?A..?Z, do: false$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(_), do: false$/;"	f
valid_request_id?	deps/plug/lib/plug/request_id.ex	/^  defp valid_request_id?(s), do: byte_size(s) in 20..200$/;"	f
validate	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  defp validate(_root, _cmd, _args) do$/;"	f
validate	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  defp validate(root, "node", [script|_]) do$/;"	f
validate	deps/timex/lib/date/date.ex	/^  defp validate({year, month, day}) do$/;"	f
validate	deps/timex/lib/date/date_format.ex	/^  def validate(format_string, formatter \\\\ nil) do$/;"	f
validate	deps/timex/lib/format/datetime/formatter.ex	/^  def validate(format_string, formatter \\\\ Default) when is_binary(format_string) do$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(:join, query, exprs, counter, adapter) do$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(kind, query, expr, counter, adapter)$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(kind, query, exprs, counter, adapter)$/;"	f
validate_and_increment_each	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment_each(kind, query, expr, ast, counter, adapter) do$/;"	f
validate_and_increment_each	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment_each(kind, query, expr, counter, adapter) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp validate_args!(args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp validate_args!(_) do$/;"	f
validate_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_assocs(query) do$/;"	f
validate_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_assocs(query, ix, assocs) do$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix.ex	/^  defp validate_attr!({_, type}), do: Mix.raise "Unknown type `#{type}` given to generator"$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix.ex	/^  defp validate_attr!({_name, type} = attr) when type in @valid_attributes, do: attr$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix.ex	/^  defp validate_attr!({_name, {type, _}} = attr) when type in @valid_attributes, do: attr$/;"	f
validate_bind	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_bind(bind, all) do$/;"	f
validate_change	deps/ecto/lib/ecto/changeset.ex	/^  def validate_change(%{validations: validations} = changeset, field, metadata, validator) do$/;"	f
validate_change	deps/ecto/lib/ecto/changeset.ex	/^  def validate_change(changeset, field, validator) when is_atom(field) do$/;"	f
validate_changes	deps/ecto/lib/ecto/repo/model.ex	/^  defp validate_changes(kind, changes, model, fields, adapter) do$/;"	f
validate_confirmation	deps/ecto/lib/ecto/changeset.ex	/^  def validate_confirmation(changeset, field, opts \\\\ []) do$/;"	f
validate_exclusion	deps/ecto/lib/ecto/changeset.ex	/^  def validate_exclusion(changeset, field, data, opts \\\\ []) do$/;"	f
validate_format	deps/ecto/lib/ecto/changeset.ex	/^  def validate_format(changeset, field, format, opts \\\\ []) do$/;"	f
validate_header_key!	deps/plug/lib/plug/conn.ex	/^  defp validate_header_key!(key) do$/;"	f
validate_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_in(meta, expr, param, acc) do$/;"	f
validate_inclusion	deps/ecto/lib/ecto/changeset.ex	/^  def validate_inclusion(changeset, field, data, opts \\\\ []) do$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(<<>>), do: :ok$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(<<h, t::binary>>)$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(_),$/;"	f
validate_key!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp validate_key!(key) do$/;"	f
validate_key!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp validate_key!(key) when key in @keys, do: :ok$/;"	f
validate_length	deps/ecto/lib/ecto/changeset.ex	/^  def validate_length(changeset, field, opts) when is_list(opts) do$/;"	f
validate_list!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_list!(value, _what) when is_list(value) or is_nil(value), do: value$/;"	f
validate_list!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_list!(value, what) do$/;"	f
validate_map!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_map!(value, _what) when is_map(value) or is_nil(value), do: value$/;"	f
validate_map!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_map!(value, what) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  def validate_number(changeset, field, opts) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  defp validate_number(field, %Decimal{} = value, message, spec_key, _spec_function, target_value) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  defp validate_number(field, value, message, _spec_key, spec_function, target_value) do$/;"	f
validate_qual	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_qual(qual) do$/;"	f
validate_qual	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_qual(qual) when is_atom(qual) do$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(nil), do:$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(secret_key_base) when byte_size(secret_key_base) < 64, do:$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(secret_key_base), do:$/;"	f
validate_subset	deps/ecto/lib/ecto/changeset.ex	/^  def validate_subset(changeset, field, data, opts \\\\ []) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!(%Reference{} = reference) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!(type) when is_atom(type) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!({type, subtype}) when is_atom(type) and is_atom(subtype) do$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!(type, _vars) do$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!(type, _vars) when is_atom(type), do: {type, type}$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!({:__aliases__, _, _} = type, _vars), do: {type, type}$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!({:array, atom} = type, _vars) when is_atom(atom), do: {type, type}$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!({:array, {:__aliases__, _, _}} = type, _vars), do: {type, type}$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!({:field, _, [{var, _, context}, field]}, vars)$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp validate_type!({{:., _, [{var, _, context}, field]}, _, []}, vars)$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<>>, _context) do$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<_ :: utf8, t :: binary>>, context) do$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<h, _ :: binary>>, context) do$/;"	f
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs(_validation, _field, _changeset) do$/;"	f
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs({:length, opts}, _field, _changeset) do$/;"	f
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs({:number, opts}, field, changeset) do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("[" <> rest, keys),      do: array_values(skip_whitespace(rest), keys, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("\\"" <> rest, _keys),    do: string_continue(rest, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("false" <> rest, _keys), do: {false, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("null" <> rest, _keys),  do: {nil, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("true" <> rest, _keys),  do: {true, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("{" <> rest, keys),      do: object_pairs(skip_whitespace(rest), keys, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(<<char, _ :: binary>> = string, _keys) when char in '-0123456789' do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(other, _keys), do: syntax_error(other)$/;"	f
value_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp value_from(%{model: model, params: params}, field) do$/;"	f
value_from	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp value_from(name, _field) when is_atom(name),$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:date), do: Ecto.Date$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:datetime), do: Ecto.DateTime$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:text), do: :string$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:time), do: Ecto.Time$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:uuid), do: Ecto.UUID$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(v) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<0, _v::2-binary>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 0, _v>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 1, 1>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 1, _v>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(_) do$/;"	f
verb_match	deps/phoenix/lib/phoenix/router/route.ex	/^  defp verb_match(:*), do: Macro.var(:_verb, nil)$/;"	f
verb_match	deps/phoenix/lib/phoenix/router/route.ex	/^  defp verb_match(verb), do: verb |> to_string() |> String.upcase()$/;"	f
verb_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp verb_name(verb), do: verb |> to_string() |> String.upcase()$/;"	f
verified_request?	deps/plug/lib/plug/csrf_protection.ex	/^  defp verified_request?(conn, csrf_token) do$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(_context, salt, nil, _opts) when is_binary(salt) do$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(context, salt, token, opts \\\\ [])$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(context, salt, token, opts) when is_binary(salt) and is_binary(token) do$/;"	f
verify	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def verify(binary, secret) when is_binary(binary) and is_binary(secret) do$/;"	f
verify_and_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def verify_and_decrypt(encrypted, secret, sign_secret, cipher \\\\ :aes_cbc256)$/;"	f
verify_token	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp verify_token(endpoint, signed, opts) do$/;"	f
view	deps/phoenix/lib/phoenix/view.ex	/^        def view do$/;"	f
view	web/web.ex	/^  def view do$/;"	f
view_module	deps/phoenix/lib/phoenix/controller.ex	/^  def view_module(conn) do$/;"	f
view_template	deps/phoenix/lib/phoenix/controller.ex	/^  def view_template(conn), do: conn.private[:phoenix_template]$/;"	f
wait	deps/exq/test/test_helper.exs	/^  def wait do$/;"	f
wait_long	deps/exq/test/test_helper.exs	/^  def wait_long do$/;"	f
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(:max, _, _), do: :max$/;"	f
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(:min, _, _), do: :min$/;"	f
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(utc_time, utc_offset, standard_offset) do$/;"	f
warmup	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  def warmup(endpoint) do$/;"	f
warmup_static	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp warmup_static(endpoint) do$/;"	f
warmup_url	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp warmup_url(endpoint) do$/;"	f
warn_name	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp warn_name(opts) do$/;"	f
warn_name	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  defp warn_name(opts) do$/;"	f
watch	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  def watch(root, cmd, args) do$/;"	f
watcher_children	deps/phoenix/lib/phoenix/endpoint/adapter.ex	/^  defp watcher_children(_mod, conf, server?) do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle(_other, req, {handler, state}) do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle({opcode = :binary, payload}, req, {handler, state}) do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle({opcode = :text, payload}, req, {handler, state}) do$/;"	f
websocket_info	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_info(message, req, {handler, state}) do$/;"	f
websocket_init	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_init(_transport, req, {handler, args}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate(reason, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:error, :closed}, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:remote, :closed}, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:remote, code, _}, _req, {handler, state})$/;"	f
week_of_year	deps/timex/lib/parse/datetime/parsers.ex	/^  def week_of_year(opts \\\\ []) do$/;"	f
weekday	deps/timex/lib/date/date.ex	/^  def weekday(%DateTime{:year => y, :month => m, :day => d}), do: :calendar.day_of_the_week({y, m, d})$/;"	f
weekday	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday(_) do$/;"	f
weekday_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday_full(_) do$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(1), do: "Mon"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(2), do: "Tue"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(3), do: "Wed"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(4), do: "Thu"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(5), do: "Fri"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(6), do: "Sat"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(7), do: "Sun"$/;"	f
weekday_short	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday_short(_) do$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("fri"), do: 5$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("mon"), do: 1$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("sat"), do: 6$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("sun"), do: 7$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("thu"), do: 4$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("tue"), do: 2$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("wed"), do: 3$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!(parm), do: parm$/;"	f
where	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp where(%Query{wheres: wheres} = query, sources) do$/;"	f
where	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp where(%Query{wheres: wheres} = query, sources) do$/;"	f
where	deps/ecto/lib/ecto/query.ex	/^  defmacro where(query, binding, expr) do$/;"	a
width_spec	deps/timex/lib/format/datetime/formatter.ex	/^  defp width_spec(min, max), do: [min: min, max: max]$/;"	f
width_spec	deps/timex/lib/format/datetime/formatter.ex	/^  defp width_spec(min..max), do: [min: min, max: max]$/;"	f
with_cache	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp with_cache(ets, key, fun) do$/;"	f
with_cache	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp with_cache(nil, _key, fun), do: fun.()$/;"	f
with_context	deps/decimal/lib/decimal.ex	/^  def with_context(%Context{} = context, fun) when is_function(fun, 0) do$/;"	f
with_line_number	deps/plug/lib/plug/debugger.ex	/^  defp with_line_number(lines, initial, highlight) do$/;"	f
with_minimum	deps/ecto/lib/ecto/query.ex	/^      def with_minimum(age, height_ft) do$/;"	f
with_rollback	deps/ecto/lib/ecto/pool.ex	/^  def with_rollback(:already_open, ref, fun) do$/;"	f
with_rollback	deps/ecto/lib/ecto/pool.ex	/^  def with_rollback(:opened, ref, fun) do$/;"	f
word	deps/combine/lib/combine/parsers/text.ex	/^  def word(),       do: word_of(~r\/\\w+\/)$/;"	f
word	deps/combine/lib/combine/parsers/text.ex	/^  def word(parser), do: word_of(parser, ~r\/\\w+\/)$/;"	f
word_of_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp word_of_impl(%ParserState{status: :ok} = state, _pattern) do$/;"	f
work	deps/exq/lib/exq/worker/server.ex	/^  def work(pid) do$/;"	f
wrap_in_transaction	deps/ecto/lib/ecto/repo/model.ex	/^  defp wrap_in_transaction(repo, adapter, model, opts, embeds, assocs, callbacks, fun) do$/;"	f
write_tmp_dir	deps/plug/lib/plug/upload.ex	/^  defp write_tmp_dir(path) do$/;"	f
write_to_disk	deps/phoenix/lib/phoenix/digester.ex	/^  defp write_to_disk(file, output_path) do$/;"	f
wrong_length	deps/ecto/lib/ecto/changeset.ex	/^  defp wrong_length(_length, value, opts), do:$/;"	f
wrong_length	deps/ecto/lib/ecto/changeset.ex	/^  defp wrong_length(value, value, _opts), do: nil$/;"	f
ws_close	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_close(state) do$/;"	f
ws_handle	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_handle(opcode, payload, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(%Broadcast{event: "disconnect"}, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(:phoenix_heartbeat, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(_, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info({:EXIT, channel_pid, reason}, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info({:socket_push, _, _encoded_payload} = msg, state) do$/;"	f
ws_init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_init({socket, config}) do$/;"	f
ws_terminate	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_terminate(_reason, _state) do$/;"	f
xhr?	deps/plug/lib/plug/csrf_protection.ex	/^  defp xhr?(conn) do$/;"	f
year2	deps/timex/lib/parse/datetime/parsers.ex	/^  def year2(opts \\\\ []) do$/;"	f
year4	deps/timex/lib/parse/datetime/parsers.ex	/^  def year4(opts \\\\ []) do$/;"	f
zadd!	deps/exq/lib/exq/redis/connection.ex	/^  def zadd!(redis, set, score, member) do$/;"	f
zcard!	deps/exq/lib/exq/redis/connection.ex	/^  def zcard!(redis, set) do$/;"	f
zero	deps/timex/lib/date/date.ex	/^  def zero, do: construct({0, 1, 1}, {0, 0, 0}, %TimezoneInfo{})$/;"	f
zero	deps/timex/lib/time/time.ex	/^  def zero, do: {0, 0, 0}$/;"	f
zero_pad	deps/ecto/lib/ecto/datetime.ex	/^  def zero_pad(val, count) do$/;"	f
zname	deps/timex/lib/parse/datetime/parsers.ex	/^  def zname(_) do$/;"	f
zoffs	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs(_) do$/;"	f
zoffs_colon	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs_colon(_) do$/;"	f
zoffs_sec	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs_sec(_) do$/;"	f
zone	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp zone(btz_data, zone_name) do$/;"	f
zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone(zone_name) do$/;"	f
zone_alias?	deps/tzdata/lib/tzdata.ex	/^  def zone_alias?(name), do: Enum.member?(zone_alias_list, name)$/;"	f
zone_alias_list	deps/tzdata/lib/tzdata.ex	/^  def zone_alias_list, do: Tzdata.ReleaseReader.link_list$/;"	f
zone_and_link_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zone_and_link_list(from_initial_pass) do$/;"	f
zone_and_link_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone_and_link_list,     do: simple_lookup(:zone_and_link_list) |> hd |> elem(1)$/;"	f
zone_exists?	deps/tzdata/lib/tzdata.ex	/^  def zone_exists?(name), do: Enum.member?(zone_list, name)$/;"	f
zone_in_30_years_in_eternal_period?	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def zone_in_30_years_in_eternal_period?(zone_name) do$/;"	f
zone_list	deps/tzdata/lib/tzdata.ex	/^  def zone_list, do: Tzdata.ReleaseReader.zone_and_link_list$/;"	f
zone_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zone_list(from_initial_pass) do$/;"	f
zone_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone_list,              do: simple_lookup(:zone_list) |> hd |> elem(1)$/;"	f
zone_lists_grouped	deps/tzdata/lib/tzdata.ex	/^  def zone_lists_grouped, do: Tzdata.ReleaseReader.by_group$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  def zone_mapped(line) do$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  defp zone_mapped(_line, []), do: {:error, :no_regex_matched}$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  defp zone_mapped(line,[regex_head|tail]) do$/;"	f
zones	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zones(from_initial_pass), do: map_with_name_key(from_initial_pass, :zone)$/;"	f
zones	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zones,                  do: simple_lookup(:zones) |> hd |> elem(1)$/;"	f
zrangebyscore!	deps/exq/lib/exq/redis/connection.ex	/^  def zrangebyscore!(redis, set, min \\\\ "0", max \\\\ "+inf") do$/;"	f
zrem!	deps/exq/lib/exq/redis/connection.ex	/^  def zrem!(redis, set, member) do$/;"	f
